# pylint: disable=redefined-outer-name, too-many-lines
import datetime
import decimal

import pytest

from piecework_calculation import utils
from piecework_calculation.generated.cron import run_cron

NOW = datetime.datetime(2020, 1, 18, 10, 0)

AGENT_EMPLOYEES = {
    'items': [
        {
            'country': 'ru',
            'login': 'ivanov',
            'half_time': False,
            'team': 'general',
        },
        {
            'country': 'md',
            'login': 'petrov',
            'half_time': True,
            'team': 'other',
        },
        {
            'country': 'ru',
            'login': 'smirnoff',
            'half_time': False,
            'team': 'general',
        },
        {
            'country': 'ru',
            'login': 'popov',
            'half_time': False,
            'team': 'general',
        },
    ],
}
EXPECTED_AGENT_EMPLOYEES = [
    {
        'country': 'ru',
        'login': 'ivanov',
        'timezone': 'Europe/Moscow',
        'position_name': 'head_of_support_department',
        'rating_factor': 1,
        'branch': 'general',
    },
    {
        'country': 'md',
        'login': 'petrov',
        'timezone': 'Europe/Kiev',
        'position_name': 'support',
        'rating_factor': 2,
        'branch': 'other',
    },
    {
        'country': 'ru',
        'login': 'popov',
        'timezone': 'Europe/Moscow',
        'position_name': 'support',
        'rating_factor': 1,
        'branch': 'general',
    },
    {
        'country': 'ru',
        'login': 'smirnoff',
        'timezone': 'Europe/Volgograd',
        'position_name': 'support',
        'rating_factor': 1,
        'branch': 'general',
    },
]
OEBS_HOLIDAYS = {
    'logins': [
        {
            'login': 'ivanov',
            'holiday': [
                '2020-01-01',
                '2020-01-02',
                '2020-01-03',
                '2020-01-04',
                '2020-01-05',
                '2020-01-06',
                '2020-01-07',
            ],
        },
        {
            'login': 'petrov',
            'holiday': ['2020-01-01', '2020-01-02', '2020-01-07'],
        },
    ],
}

CALCULATION_RESULT = [
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('1.8'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.0'),
            'csat_ratio': decimal.Decimal('95.0'),
            'avg_duration': None,
            'min_hour_cost': decimal.Decimal('5.0'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('237600.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('237600.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('9.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.5'),
            'csat_ratio': decimal.Decimal('96.0'),
            'avg_duration': None,
            'min_hour_cost': decimal.Decimal('10.0'),
            'rating_factor': decimal.Decimal('2.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('316800.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('316800.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('1.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'avg_duration': None,
            'benefit_thresholds_strict': [
                {
                    'threshold': decimal.Decimal('0.0'),
                    'value': decimal.Decimal('0.5'),
                },
                {
                    'threshold': decimal.Decimal('80.0'),
                    'value': decimal.Decimal('0.0'),
                },
            ],
            'csat_ratio': decimal.Decimal('0'),
            'min_hour_cost': decimal.Decimal('10.0'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'plan_workshifts_duration_sec': decimal.Decimal('0'),
            'qa_ratio': decimal.Decimal('0'),
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'workshifts_duration_sec': decimal.Decimal('0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'smirnoff',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('1.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('326.5'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.0'),
            'csat_ratio': decimal.Decimal('95.0'),
            'avg_duration': None,
            'min_hour_cost': decimal.Decimal('5.0'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('237600.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('237600.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('2.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('2.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.5'),
            'csat_ratio': decimal.Decimal('96.0'),
            'avg_duration': None,
            'min_hour_cost': decimal.Decimal('10.0'),
            'rating_factor': decimal.Decimal('2.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('316800.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('316800.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('2.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'avg_duration': None,
            'benefit_thresholds_strict': [
                {
                    'threshold': decimal.Decimal('0.0'),
                    'value': decimal.Decimal('0.5'),
                },
                {
                    'threshold': decimal.Decimal('80.0'),
                    'value': decimal.Decimal('0.0'),
                },
            ],
            'csat_ratio': decimal.Decimal('0'),
            'min_hour_cost': decimal.Decimal('10.0'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'plan_workshifts_duration_sec': decimal.Decimal('0'),
            'qa_ratio': decimal.Decimal('0'),
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'workshifts_duration_sec': decimal.Decimal('0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'smirnoff',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('220.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('83.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.0'),
            'csat_ratio': decimal.Decimal('95.0'),
            'avg_duration': None,
            'min_hour_cost': decimal.Decimal('5.0'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('237600.0'),
            'workshifts_duration_sec': decimal.Decimal('237600.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('39.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'avg_duration': None,
            'benefit_thresholds_strict': [
                {
                    'threshold': decimal.Decimal('0.0'),
                    'value': decimal.Decimal('0.5'),
                },
                {
                    'threshold': decimal.Decimal('80.0'),
                    'value': decimal.Decimal('0.0'),
                },
            ],
            'csat_ratio': decimal.Decimal('0'),
            'min_hour_cost': decimal.Decimal('10.0'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'plan_workshifts_duration_sec': decimal.Decimal('0'),
            'qa_ratio': decimal.Decimal('0'),
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'workshifts_duration_sec': decimal.Decimal('0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'smirnoff',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('13.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.0'),
            'csat_ratio': decimal.Decimal('95.0'),
            'avg_duration': decimal.Decimal('60.0'),
            'min_hour_cost': decimal.Decimal('5.0'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('237600.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('237600.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('7.5'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.5'),
            'csat_ratio': decimal.Decimal('96.0'),
            'avg_duration': decimal.Decimal('60.0'),
            'min_hour_cost': decimal.Decimal('10.0'),
            'rating_factor': decimal.Decimal('2.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('316800.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('316800.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'smirnoff',
        'daytime_cost': decimal.Decimal('11.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('0'),
            'csat_ratio': decimal.Decimal('0'),
            'avg_duration': decimal.Decimal('60.0'),
            'min_hour_cost': decimal.Decimal('10.0'),
            'rating_factor': decimal.Decimal('1.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('3.5'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': {
            'qa_ratio': decimal.Decimal('85.5'),
            'csat_ratio': decimal.Decimal('96.0'),
            'avg_duration': decimal.Decimal('20.0'),
            'min_hour_cost': decimal.Decimal('10.0'),
            'rating_factor': decimal.Decimal('2.0'),
            'rating_qa_weight': decimal.Decimal('0.49875'),
            'rating_csat_weight': decimal.Decimal('0.49875'),
            'min_workshifts_ratio': decimal.Decimal('0.25'),
            'rating_max_total_cost': decimal.Decimal('11000.0'),
            'workshifts_duration_sec': decimal.Decimal('316800.0'),
            'rating_total_cost_weight': decimal.Decimal('0.0025'),
            'benefit_thresholds_strict': [
                {
                    'value': decimal.Decimal('0.5'),
                    'threshold': decimal.Decimal('0.0'),
                },
                {
                    'value': decimal.Decimal('0.0'),
                    'threshold': decimal.Decimal('80.0'),
                },
            ],
            'rating_avg_duration_weight': decimal.Decimal('0.0'),
            'plan_workshifts_duration_sec': decimal.Decimal('316800.0'),
        },
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'start_date': datetime.date(2020, 1, 1),
        'stop_date': datetime.date(2020, 1, 16),
        'login': 'smirnoff',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
        'benefit_conditions': None,
    },
]

CALCULATION_DAILY_RESULT = [
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('1.8'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('8.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('1.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('1.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('3.5'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('132.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('83.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 15),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('88.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('39.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('1.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 2),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('324.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 6),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('2.5'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 2),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('2.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('2.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 2),
        'login': 'popov',
        'daytime_cost': decimal.Decimal('2.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'daytime_cost': decimal.Decimal('13.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'petrov',
        'daytime_cost': decimal.Decimal('0.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('7.5'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 10),
        'login': 'smirnoff',
        'daytime_cost': decimal.Decimal('11.0'),
        'night_cost': decimal.Decimal('0.0'),
        'holidays_daytime_cost': decimal.Decimal('0.0'),
        'holidays_night_cost': decimal.Decimal('0.0'),
    },
]

CALCULATION_DETAIL_RESULT = [
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'ivanov',
        'cost_condition_key': 'close',
        'line': 'first',
        'cost_action': decimal.Decimal('1.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'ivanov',
        'cost_condition_key': 'communicate',
        'line': 'first',
        'cost_action': decimal.Decimal('0.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'ivanov',
        'cost_condition_key': 'forward',
        'line': 'first',
        'cost_action': decimal.Decimal('0.8'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'md_tariff_id',
        'country': 'md',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'petrov',
        'cost_condition_key': 'communicate',
        'line': 'urgent',
        'cost_action': decimal.Decimal('1.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'md_tariff_id',
        'country': 'md',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'petrov',
        'cost_condition_key': 'smm',
        'line': 'smm',
        'cost_action': decimal.Decimal('8.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox',
        'calc_date': datetime.date(2020, 1, 5),
        'login': 'popov',
        'cost_condition_key': 'close',
        'line': 'first',
        'cost_action': decimal.Decimal('1.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'cost_condition_key': 'mail',
        'line': 'tracker_dtpStrahovanie',
        'cost_action': decimal.Decimal('1.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 6),
        'login': 'ivanov',
        'cost_condition_key': 'mail',
        'line': 'tracker_dtpStrahovanie',
        'cost_action': decimal.Decimal('1.0'),
        'daytime_count': 0,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 1,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 6),
        'login': 'ivanov',
        'cost_condition_key': 'sms',
        'line': 'tracker_dtpStrahovanie',
        'cost_action': decimal.Decimal('1.5'),
        'daytime_count': 0,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 1,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 2),
        'login': 'ivanov',
        'cost_condition_key': 'tracker_create',
        'line': 'tracker_incident',
        'cost_action': decimal.Decimal('324.0'),
        'daytime_count': 0,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 1,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'md_tariff_id_old',
        'country': 'md',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 2),
        'login': 'petrov',
        'cost_condition_key': 'mail',
        'line': 'tracker_corp_users',
        'cost_action': decimal.Decimal('2.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 1,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker',
        'calc_date': datetime.date(2020, 1, 2),
        'login': 'popov',
        'cost_condition_key': 'mail',
        'line': 'tracker_corp_users',
        'cost_action': decimal.Decimal('2.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calc_date': datetime.date(2020, 1, 1),
        'calc_subtype': 'new_tel',
        'calc_type': 'general',
        'calculation_rule_id': 'periodic_rule_id',
        'cost_action': decimal.Decimal('0.0'),
        'cost_condition_key': 'asterisk_call',
        'country': 'ru',
        'daytime_count': 1,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
        'line': '',
        'login': 'ivanov',
        'night_count': 0,
        'tariff_id': 'ru_tariff_id',
        'tariff_type': 'support-taxi',
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'cost_condition_key': 'asterisk_call',
        'line': 'test1',
        'cost_action': decimal.Decimal('11.0'),
        'daytime_count': 3,
        'night_count': 0,
        'holidays_daytime_count': 4,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 15),
        'login': 'ivanov',
        'cost_condition_key': 'asterisk_call',
        'line': 'test1',
        'cost_action': decimal.Decimal('11.0'),
        'daytime_count': 2,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'cost_condition_key': 'asterisk_call',
        'line': 'test2',
        'cost_action': decimal.Decimal('13.0'),
        'daytime_count': 0,
        'night_count': 0,
        'holidays_daytime_count': 3,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'cost_condition_key': 'asterisk_solved_call',
        'line': 'test1',
        'cost_action': decimal.Decimal('33.0'),
        'daytime_count': 3,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 15),
        'login': 'ivanov',
        'cost_condition_key': 'asterisk_solved_call',
        'line': 'test1',
        'cost_action': decimal.Decimal('33.0'),
        'daytime_count': 2,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'new_tel',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'popov',
        'cost_condition_key': 'asterisk_call',
        'line': 'test2',
        'cost_action': decimal.Decimal('13.0'),
        'daytime_count': 3,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'cost_condition_key': 'sip_call',
        'line': 'tracker_corp_users',
        'cost_action': decimal.Decimal('7.5'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id_old',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'ivanov',
        'cost_condition_key': 'sip_call',
        'line': 'tracker_dtpStrahovanie',
        'cost_action': decimal.Decimal('5.5'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'md_tariff_id_old',
        'country': 'md',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 1),
        'login': 'petrov',
        'cost_condition_key': 'sip_call',
        'line': 'tracker_corp_users',
        'cost_action': decimal.Decimal('7.5'),
        'daytime_count': 0,
        'night_count': 0,
        'holidays_daytime_count': 1,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'ru_tariff_id',
        'country': 'ru',
        'calc_type': 'general',
        'calc_subtype': 'tracker_calls',
        'calc_date': datetime.date(2020, 1, 10),
        'login': 'smirnoff',
        'cost_condition_key': 'sip_call',
        'line': 'tracker_dtpStrahovanie',
        'cost_action': decimal.Decimal('5.5'),
        'daytime_count': 2,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'md_tariff_id',
        'country': 'md',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'petrov',
        'cost_condition_key': 'sip_call',
        'line': 'first',
        'cost_action': decimal.Decimal('0.0'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
    {
        'calculation_rule_id': 'periodic_rule_id',
        'tariff_type': 'support-taxi',
        'tariff_id': 'md_tariff_id',
        'country': 'md',
        'calc_type': 'general',
        'calc_subtype': 'chatterbox_calls',
        'calc_date': datetime.date(2020, 1, 11),
        'login': 'petrov',
        'cost_condition_key': 'sip_call',
        'line': 'sip',
        'cost_action': decimal.Decimal('3.5'),
        'daytime_count': 1,
        'night_count': 0,
        'holidays_daytime_count': 0,
        'holidays_night_count': 0,
    },
]

CALCULATION_WORKSHIFTS = [
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2019, 12, 31, 21, 0),
        'stop_dt': datetime.datetime(2020, 1, 1, 5, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2020, 1, 2, 17, 0),
        'stop_dt': datetime.datetime(2020, 1, 3, 5, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2020, 1, 5, 17, 0),
        'stop_dt': datetime.datetime(2020, 1, 6, 5, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2020, 1, 7, 17, 0),
        'stop_dt': datetime.datetime(2020, 1, 8, 5, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2020, 1, 10, 17, 0),
        'stop_dt': datetime.datetime(2020, 1, 11, 5, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2020, 1, 12, 17, 0),
        'stop_dt': datetime.datetime(2020, 1, 13, 5, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'ivanov',
        'start_dt': datetime.datetime(2020, 1, 15, 17, 0),
        'stop_dt': datetime.datetime(2020, 1, 15, 21, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 1, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 1, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 2, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 2, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 5, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 5, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 6, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 6, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 9, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 9, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 10, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 10, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 13, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 13, 17, 0),
    },
    {
        'tariff_type': 'support-taxi',
        'login': 'petrov',
        'start_dt': datetime.datetime(2020, 1, 14, 5, 0),
        'stop_dt': datetime.datetime(2020, 1, 14, 17, 0),
    },
]


async def _compare_results(
        cron_context,
        calculation_result,
        rule_id,
        expected_pg_daily_result,
        expected_pg_detail_result,
        expected_workshifts,
):
    async with cron_context.pg.slave_pool.acquire() as conn:
        pg_rule_query = (
            'SELECT tariff_type, status, description, start_date, stop_date '
            'FROM piecework.calculation_rule WHERE calculation_rule_id = $1'
        )
        pg_rule = await conn.fetchrow(pg_rule_query, rule_id)
        assert pg_rule['status'] == 'success'
        assert pg_rule['description']

    async with cron_context.pg.slave_pool.acquire() as conn:
        pg_employees_query = (
            'SELECT country, login, timezone, position_name, '
            'rating_factor, branch '
            'FROM piecework.agent_employee WHERE start_date = $1 '
            'AND stop_date = $2 AND tariff_type = $3 '
            'ORDER BY login'
        )
        pg_employees = await conn.fetch(
            pg_employees_query,
            pg_rule['start_date'],
            pg_rule['stop_date'],
            pg_rule['tariff_type'],
        )
        pg_employees = [dict(item) for item in pg_employees]
        assert pg_employees == EXPECTED_AGENT_EMPLOYEES

    async with cron_context.pg.slave_pool.acquire() as conn:
        pg_result_query = (
            'SELECT '
            'calculation_rule_id, tariff_type, calc_type, calc_subtype, '
            'start_date, stop_date, login, daytime_cost, night_cost, '
            'holidays_daytime_cost, holidays_night_cost, benefit_conditions '
            'FROM piecework.calculation_result WHERE calculation_rule_id = $1 '
            'ORDER BY calc_type, calc_subtype, login'
        )
        pg_result = await conn.fetch(pg_result_query, rule_id)
        pg_result = [dict(item) for item in pg_result]
        for item in pg_result:
            if item['benefit_conditions'] is None:
                continue
            item['benefit_conditions'] = utils.from_json(
                item['benefit_conditions'],
            )
        assert pg_result == calculation_result

        pg_daily_result = await conn.fetch(
            'SELECT '
            'calculation_rule_id, tariff_type, calc_type, calc_subtype, '
            'calc_date, login, daytime_cost, night_cost, '
            'holidays_daytime_cost, holidays_night_cost '
            'FROM piecework.calculation_daily_result '
            'WHERE calculation_rule_id = $1 '
            'ORDER BY calc_type, calc_subtype, login, calc_date',
            rule_id,
        )
        pg_daily_result = [dict(item) for item in pg_daily_result]
        assert pg_daily_result == expected_pg_daily_result

        pg_detail_result = await conn.fetch(
            'SELECT '
            'calculation_rule_id, tariff_type, tariff_id, country, calc_type, '
            'calc_subtype, calc_date, login, cost_condition_key, line, '
            'cost_action, daytime_count, night_count, holidays_daytime_count, '
            'holidays_night_count '
            'FROM piecework.calculation_detail WHERE calculation_rule_id = $1 '
            'ORDER BY calc_type, calc_subtype, login, cost_condition_key, '
            'line, calc_date',
            rule_id,
        )
        pg_detail_result = [dict(item) for item in pg_detail_result]
        assert pg_detail_result == expected_pg_detail_result

        pg_workshifts_result = await conn.fetch(
            'SELECT tariff_type, login, start_dt, stop_dt '
            'FROM piecework.workshift '
            'WHERE start_date = $1 AND stop_date = $2 '
            'ORDER BY tariff_type, login, start_dt, stop_dt',
            pg_rule['start_date'],
            pg_rule['stop_date'],
        )
        pg_workshifts_result = [dict(item) for item in pg_workshifts_result]
        assert pg_workshifts_result == expected_workshifts


@pytest.mark.now(NOW.isoformat())
@pytest.mark.translations(
    piecework={
        'payment_ticket.summary': {
            'ru': 'Payment {country} per {start_date} - ' '{stop_date}',
        },
        'payment_ticket.description': {
            'ru': 'Country: {country}\nPeriod: {start_date} - {stop_date}',
        },
    },
)
@pytest.mark.config(
    PIECEWORK_CALCULATION_PAYMENT_SETTINGS={
        'ru': {'ticket_locale': 'ru', 'destination': 'oebs'},
        'md': {'ticket_locale': 'md', 'destination': 'oebs'},
    },
    PIECEWORK_CALCULATION_YT_CHUNK_SIZE=1,
)
async def test_calculate(
        cron_context,
        mock_create_draft,
        mock_oebs_holidays,
        mock_agent_employees,
):
    mock_oebs_holidays(OEBS_HOLIDAYS)
    mock_agent_employees(AGENT_EMPLOYEES)
    await run_cron.main(
        ['piecework_calculation.crontasks.calculate_support_taxi', '-t', '0'],
    )
    await _compare_results(
        cron_context,
        CALCULATION_RESULT,
        'periodic_rule_id',
        CALCULATION_DAILY_RESULT,
        CALCULATION_DETAIL_RESULT,
        CALCULATION_WORKSHIFTS,
    )


@pytest.mark.now(NOW.isoformat())
@pytest.mark.translations(
    piecework={
        'payment_ticket.summary': {
            'ru': 'Payment {country} per {start_date} - ' '{stop_date}',
        },
        'payment_ticket.description': {
            'ru': 'Country: {country}\nPeriod: {start_date} - {stop_date}',
        },
    },
)
@pytest.mark.config(
    PIECEWORK_CALCULATION_PAYMENT_SETTINGS={
        'ru': {'ticket_locale': 'ru', 'destination': 'oebs'},
        'md': {'ticket_locale': 'md', 'destination': 'oebs'},
    },
)
@pytest.mark.parametrize(
    'rule_id, expected_pg_daily_result, '
    'expected_pg_detail_result, expected_workshifts',
    [
        (
            'dismissal_rule_id',
            CALCULATION_DAILY_RESULT,
            CALCULATION_DETAIL_RESULT,
            CALCULATION_WORKSHIFTS,
        ),
        (
            'dismissal_rule_id_start',
            [],
            [],
            [
                {
                    'login': 'ivanov',
                    'start_dt': datetime.datetime(2020, 1, 15, 21, 0),
                    'stop_dt': datetime.datetime(2020, 1, 15, 21, 0),
                    'tariff_type': 'support-taxi',
                },
            ],
        ),
    ],
)
async def test_calculate_dismissal(
        cron_context,
        rule_id,
        expected_pg_daily_result,
        expected_pg_detail_result,
        expected_workshifts,
        mock_create_draft,
        mock_oebs_holidays,
        mock_agent_employees,
):
    mock_oebs_holidays(OEBS_HOLIDAYS)
    mock_agent_employees(AGENT_EMPLOYEES)
    await run_cron.main(
        ['piecework_calculation.crontasks.dismissal', '-t', '0'],
    )
    for item in CALCULATION_RESULT:
        item['benefit_conditions'] = None
        item['calculation_rule_id'] = rule_id
        if rule_id == 'dismissal_rule_id_start':
            item['start_date'] = datetime.date(2020, 1, 16)
            item['daytime_cost'] = 0.0
            item['night_cost'] = 0.0
            item['holidays_daytime_cost'] = 0.0
            item['holidays_night_cost'] = 0.0
    for item in expected_pg_daily_result:
        item['calculation_rule_id'] = rule_id
    for item in expected_pg_detail_result:
        item['calculation_rule_id'] = rule_id
    await _compare_results(
        cron_context,
        CALCULATION_RESULT,
        rule_id,
        expected_pg_daily_result,
        expected_pg_detail_result,
        expected_workshifts,
    )


@pytest.mark.now('2019-12-20T10:00:00')
async def test_no_calculate(cron_context):
    await run_cron.main(
        ['piecework_calculation.crontasks.calculate_support_taxi', '-t', '0'],
    )
    async with cron_context.pg.slave_pool.acquire() as conn:
        pg_result = await conn.fetchrow(
            'SELECT status FROM piecework.calculation_rule '
            'WHERE calculation_rule_id = $1',
            'periodic_rule_id',
        )
        assert pg_result['status'] == 'waiting_agent'
