/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/experiments3/declarations/test_experiment.yaml

#include <experiments3/test_experiment.hpp>

#include <codegen/impl/convert.hpp>
#include <codegen/impl/get_validation_length.hpp>
#include <codegen/impl/optional_convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <cstring>
#include <unordered_set>
#include <userver/formats/common/meta.hpp>
#include <userver/formats/json/string_builder.hpp>
#include <userver/logging/log.hpp>
#include <userver/utils/assert.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>
#include <userver/utils/underlying_value.hpp>

#include <codegen/impl/convert.hpp>

namespace experiments3::test_experiment {

experiments3::test_experiment::Value Parse(
    [[maybe_unused]] const formats::json::Value& elem,
    formats::parse::To<experiments3::test_experiment::Value>) {
  experiments3::test_experiment::Value result;

  elem.CheckNotMissing();
  elem.CheckObjectOrNull();

  result.int_value = elem["int_value"].As<int>();

  return result;
}

namespace parser {
template <class To>
template <class From>
To PValue::ParserLocalConverterTrait<To>::Convert(From&& from) {
  return ::codegen::impl::Convert<To>(std::forward<From>(from));
}

template <class To>
To PValue::ParserLocalDomToType<To>::Convert(::formats::json::Value&& value) {
  return std::move(value).As<To>();
}

PValue::PValue()
{
  f_int_value_.Subscribe(sink_int_value_);
}

void PValue::Reset()
{
  state_ = State::kStart;
  result_ = {};

  s_int_value_ = false;
}

void PValue::StartObject() {
  switch (state_) {
    case State::kStart:
      state_ = State::kInside;
      break;

    case State::kInside:
      Throw("{");
  }
}

void PValue::Key([[maybe_unused]] std::string_view key)
{
  key_ = key;
  if (false) {
  } else if (key == "int_value") {
    s_int_value_ = true;
    f_int_value_.Reset();

    parser_state_->PushParser(f_int_value_.GetParser());
  } else {
    /* Eat and ignore unknown value */
    ff_empty_.Reset();
    parser_state_->PushParser(ff_empty_.GetParser());
  }
}

void PValue::EndObject()
{
  switch (state_) {
    case State::kStart:
      Throw("}");

    case State::kInside:
      // If an exception is thrown below, we must not set .old_key
      key_.clear();

      if (!s_int_value_) {
        throw ::formats::json::parser::InternalParseError(
            "missing required field 'int_value'");
      }

      SetResult(std::move(result_));
      break;
  }
}

std::string PValue::Expected() const {
  switch (state_) {
    case State::kStart:
      return "object";

    case State::kInside:
      return "field name";
  }
}

std::string PValue::GetPathItem() const { return key_; }
}

}

namespace experiments3 {

const std::string TestExperiment::kName = "test_experiment";

}
