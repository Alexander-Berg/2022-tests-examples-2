/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/experiments3/declarations/test_definitions.yaml

#pragma once

#include <experiments3/models/experiment_type.hpp>

#include <optional>
#include <string>
#include <vector>

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/parsing_flags.hpp>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>

#include <codegen/parser/datetime_parser.hpp>
#include <codegen/parser/dummy_parser.hpp>  // TODO: for debug only
#include <codegen/parser/enum_parser.hpp>
#include <codegen/parser/extra_helper.hpp>
#include <codegen/parser/null_swallow.hpp>
#include <codegen/parser/nullable_helper.hpp>
#include <codegen/parser/parser_converter.hpp>
#include <codegen/parser/parser_dom.hpp>
#include <codegen/parser/parser_empty.hpp>
#include <codegen/parser/parser_non_null_ptr.hpp>
#include <codegen/parser/validator.hpp>
#include <codegen/parser/value_builder_helper.hpp>
#include <userver/formats/json/parser/parser.hpp>

namespace experiments3::test_definitions {

struct SomeObj {
  ::std::string sub{};
};

SomeObj Parse(const formats::json::Value& elem, formats::parse::To<SomeObj>);

namespace parser {
class PSomeObj final: public ::formats::json::parser::TypedParser<
                          experiments3::test_definitions::SomeObj> {
 public:
  PSomeObj();

  void Reset() override;

  void StartObject() override;

  void Key(std::string_view key) override;

  void EndObject() override;

 private:
  std::string Expected() const override;

  std::string GetPathItem() const override;

  experiments3::test_definitions::SomeObj result_;
  std::string key_;

  template <class To>
  struct ParserLocalConverterTrait {
    template <class From>
    static To Convert(From&& from);
  };

  template <class To>
  struct ParserLocalDomToType {
    static To Convert(::formats::json::Value&& value);
  };

  // sub
  // .cpp_type: std::string
  // .optional_subtype: None
  // cpp_type: std::string
  ::formats::json::parser::StringParser f_sub_;

  ::codegen::parser::NullSwallow<std::string, decltype(f_sub_)> null_sub_{
      f_sub_};
  ::formats::json::parser::SubscriberSink<std::string> sink_sub_{result_.sub};

  bool s_sub_{false};

  ::codegen::parser::EmptyParser ff_empty_;

  enum class State {
    kStart,
    kInside,
  };
  State state_;
};

}  // namespace parser

}

namespace experiments3::test_definitions {

struct Value {
  int some_int{};
  ::std::optional<::std::vector<std::string>> some_list{};
  ::std::optional<::experiments3::test_definitions::SomeObj> some_obj{};
};

Value Parse(const formats::json::Value& elem, formats::parse::To<Value>);

namespace parser {
class PValue final: public ::formats::json::parser::TypedParser<
                        experiments3::test_definitions::Value> {
 public:
  PValue();

  void Reset() override;

  void StartObject() override;

  void Key(std::string_view key) override;

  void EndObject() override;

 private:
  std::string Expected() const override;

  std::string GetPathItem() const override;

  experiments3::test_definitions::Value result_;
  std::string key_;

  template <class To>
  struct ParserLocalConverterTrait {
    template <class From>
    static To Convert(From&& from);
  };

  template <class To>
  struct ParserLocalDomToType {
    static To Convert(::formats::json::Value&& value);
  };

  // some_int
  // .cpp_type: int
  // .optional_subtype: None
  // cpp_type: int
  ::formats::json::parser::IntegralParser<int> f_some_int_;

  ::codegen::parser::NullSwallow<int, decltype(f_some_int_)> null_some_int_{
      f_some_int_};
  ::formats::json::parser::SubscriberSink<int> sink_some_int_{result_.some_int};

  bool s_some_int_{false};

  // some_list
  // .cpp_type: std::string
  // .optional_subtype: None
  // cpp_type: std::string
  ::formats::json::parser::StringParser f_some_list_i_;

  ::formats::json::parser::ArrayParser<std::string, decltype(f_some_list_i_),
                                       std::vector<std::string>>
      f_some_list_{f_some_list_i_};

  ::codegen::parser::NullableHelper<::std::optional<::std::vector<std::string>>,
                                    decltype(f_some_list_)>
      null_some_list_{f_some_list_};
  ::formats::json::parser::SubscriberSinkOptional<std::vector<std::string>>
      sink_some_list_{result_.some_list};

  bool s_some_list_{false};

  // some_obj
  // .cpp_type: std::optional<::experiments3::test_definitions::SomeObj>
  // .optional_subtype: experiments3::test_definitions::SomeObj
  // cpp_type: experiments3::test_definitions::SomeObj
  experiments3::test_definitions::parser::PSomeObj f_some_obj_;

  ::codegen::parser::NullableHelper<
      ::std::optional<::experiments3::test_definitions::SomeObj>,
      decltype(f_some_obj_)>
      null_some_obj_{f_some_obj_};
  ::formats::json::parser::SubscriberSinkOptional<
      experiments3::test_definitions::SomeObj>
      sink_some_obj_{result_.some_obj};

  bool s_some_obj_{false};

  ::codegen::parser::EmptyParser ff_empty_;

  enum class State {
    kStart,
    kInside,
  };
  State state_;
};

}  // namespace parser

}

namespace experiments3::test_definitions {
using Ref = std::string;
}

namespace experiments3::test_definitions {
using SomeList = std::vector<std::string>;
}

namespace experiments3::test_definitions {
using SomeInt = int;
}

namespace experiments3 {
struct TestDefinitions {
  using Value = experiments3::test_definitions::Value;
  enum class Type { kExperiment, kConfig, kUnion };
  static constexpr auto kType = Type::kUnion;
  static constexpr bool kCacheResult = false;
  static const std::string kName;
};
}
