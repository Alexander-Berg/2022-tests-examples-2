/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/experiments3/declarations/test_experiment.yaml

#pragma once

#include <experiments3/models/experiment_type.hpp>

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/parsing_flags.hpp>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>

#include <codegen/parser/datetime_parser.hpp>
#include <codegen/parser/dummy_parser.hpp>  // TODO: for debug only
#include <codegen/parser/enum_parser.hpp>
#include <codegen/parser/extra_helper.hpp>
#include <codegen/parser/null_swallow.hpp>
#include <codegen/parser/nullable_helper.hpp>
#include <codegen/parser/parser_converter.hpp>
#include <codegen/parser/parser_dom.hpp>
#include <codegen/parser/parser_empty.hpp>
#include <codegen/parser/parser_non_null_ptr.hpp>
#include <codegen/parser/validator.hpp>
#include <codegen/parser/value_builder_helper.hpp>
#include <userver/formats/json/parser/parser.hpp>

namespace experiments3::test_experiment {

struct Value {
  int int_value{};
};

Value Parse(const formats::json::Value& elem, formats::parse::To<Value>);

namespace parser {
class PValue final: public ::formats::json::parser::TypedParser<
                        experiments3::test_experiment::Value> {
 public:
  PValue();

  void Reset() override;

  void StartObject() override;

  void Key(std::string_view key) override;

  void EndObject() override;

 private:
  std::string Expected() const override;

  std::string GetPathItem() const override;

  experiments3::test_experiment::Value result_;
  std::string key_;

  template <class To>
  struct ParserLocalConverterTrait {
    template <class From>
    static To Convert(From&& from);
  };

  template <class To>
  struct ParserLocalDomToType {
    static To Convert(::formats::json::Value&& value);
  };

  // int_value
  // .cpp_type: int
  // .optional_subtype: None
  // cpp_type: int
  ::formats::json::parser::IntegralParser<int> f_int_value_;

  ::formats::json::parser::SubscriberSink<int> sink_int_value_{
      result_.int_value};

  bool s_int_value_{false};

  ::codegen::parser::EmptyParser ff_empty_;

  enum class State {
    kStart,
    kInside,
  };
  State state_;
};

}  // namespace parser

}

namespace experiments3 {
struct TestExperiment {
  using Value = experiments3::test_experiment::Value;
  enum class Type { kExperiment, kConfig, kUnion };
  static constexpr auto kType = Type::kExperiment;
  static constexpr bool kCacheResult = false;
  static const std::string kName;
};
}
