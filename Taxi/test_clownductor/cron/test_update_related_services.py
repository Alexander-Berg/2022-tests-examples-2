# pylint: disable=redefined-outer-name
import pytest

from clownductor.generated.cron import run_cron


@pytest.mark.features_on('update_related_services')
@pytest.mark.pgsql('clownductor', files=['add_test_data.sql'])
@pytest.mark.config(
    CLOWNDUCTOR_IGNORE_UPDATE_RELATED_SERVICES=[
        {'id': 5, 'service_name': 'test-service3'},
    ],
)
async def test_update_related_services(mockserver, pgsql):

    strongbox_responses = {
        'test-service1': (
            'somethingsomething-test-db1-host1-test-db1-host2-something'
        ),
        'test-service2': 'somethingsomething-test-db2-host3-something',
        'test-service3': 'somethingsomething-test-db2-host3-something',
    }

    @mockserver.json_handler('/strongbox/v1/secrets/safe_render/')
    async def _mock_strongbox(request):
        service_name = request.query['service_name']
        assert request.query['env'] == 'production'
        secdist = strongbox_responses.get(service_name, '')
        return {'data': secdist}

    await run_cron.main(
        ['clownductor.crontasks.update_related_services', '-t', '0'],
    )

    cursor = pgsql['clownductor'].cursor()
    cursor.execute(
        'select service_id, related_service_id, '
        'relation_type, is_autogenerated '
        'from clownductor.related_services '
        'order by service_id, related_service_id',
    )
    related_services_table = cursor.fetchall()
    assert related_services_table == [
        (1, 2, 'alias_main_service', False),
        (1, 3, 'service_database', True),
        (2, 4, 'service_database', True),
        (5, 6, 'service_database', False),
    ]
