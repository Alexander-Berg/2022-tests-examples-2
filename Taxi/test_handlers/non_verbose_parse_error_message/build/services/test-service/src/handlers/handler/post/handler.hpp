/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/docs/yaml/api/api.yaml,
// taxi/uservices/services/test-service/docs/yaml/api/openapi.yaml

#pragma once

#include <memory>

#include <codegen/dependency_schema.hpp>
#include <userver/server/handlers/http_handler_base.hpp>

#include <handlers/dependencies_fwd.hpp>

namespace handlers::handler::post {

/* Handler parses raw HTTP request according to YAML declaration, fills Request
 * struct (according to Yaml's "parameters"), fills Dependencies struct, and
 * calls user-defined View to actually handle the request according to the
 * business logic. View either returns Response (any of Yaml's "responses") or
 * throws an exception.
 */

/// Smth
class Handler: public server::handlers::HttpHandlerBase {
 public:
  static constexpr const char* kName = "handler-handler-post";

  Handler(const components::ComponentConfig&,
          const components::ComponentContext&);
  ~Handler();

  std::string HandleRequestThrow(
      const server::http::HttpRequest& request,
      server::request::RequestContext& context) const override;

  static ::yaml_config::Schema GetStaticConfigSchema();

 private:
  ::server::handlers::FormattedErrorData GetFormattedExternalErrorBody(
      const ::server::handlers::CustomHandlerException& exc) const override;

  void ParseRequestData(const ::server::http::HttpRequest&,
                        ::server::request::RequestContext&) const override;

  std::string GetRequestBodyForLogging(
      const server::http::HttpRequest& request,
      server::request::RequestContext& context,
      const std::string& request_body) const override;

  template <typename ViewType>
  std::string DoGetRequestBodyForLogging(
      const server::http::HttpRequest& request,
      server::request::RequestContext& context,
      const std::string& request_body) const;

  std::string GetResponseDataForLogging(
      const server::http::HttpRequest& request,
      server::request::RequestContext& context,
      const std::string& response_data) const override;

  template <typename ViewType>
  std::string DoGetResponseDataForLogging(
      const server::http::HttpRequest& request,
      server::request::RequestContext& context,
      const std::string& response_data) const;

 private:
  std::unique_ptr<handlers::DependenciesFactory> deps_factory_;
  const bool proxy_too_many_requests_error_;
};

}
