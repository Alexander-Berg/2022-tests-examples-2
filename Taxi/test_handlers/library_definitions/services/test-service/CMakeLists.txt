# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (NOT USERVICES)
    message(
        FATAL_ERROR
        "#################################################################\n"
        "Do NOT use this CMakeLists.txt file directly!\n"
        "Use the CMakeLists.txt at the root of uservices!\n"
        "\n"
        "Type `make help` at the uservices root for more information.\n"
        "#################################################################"
    )
endif()

# Autogenerated grpc target, if any
file(GLOB GRPC_GENERATED_TARGET
  ${CMAKE_CURRENT_BINARY_DIR}/grpc
)
foreach(GRPC_TARGET ${GRPC_GENERATED_TARGET})
  add_subdirectory(${GRPC_TARGET} ${GRPC_TARGET})
endforeach(GRPC_TARGET)

set(LINK_TARGETS)
list(APPEND LINK_TARGETS
  "regex"
  "yandex-taxi-library-codegen"
  "yandex-taxi-library-codegen-clients"
  "yandex-taxi-library-new-lib"
  "yandex-taxi-library-solomon-stats"
)
foreach(LINK_TARGET ${LINK_TARGETS})
  if (LINK_TARGET MATCHES "^(.*)::(.*)$")
    find_package(${CMAKE_MATCH_1} REQUIRED COMPONENTS ${CMAKE_MATCH_2})
  elseif (NOT TARGET ${LINK_TARGET})
    unset(FIND_TARGET_CMAKE_FOUND CACHE)
    find_file(
      FIND_TARGET_CMAKE_FOUND
      "FindHelper${LINK_TARGET}.cmake"
      ${CMAKE_MODULE_PATH}
    )
    if (FIND_TARGET_CMAKE_FOUND)
      include("FindHelper${LINK_TARGET}")
    elseif (LINK_TARGET MATCHES "^yandex-taxi-library-schemas-(.*)$")
      # Do nothing, already included
    elseif (LINK_TARGET MATCHES "^yandex-taxi-library-(.*)$")
      # Do nothing, already included
    elseif (LINK_TARGET MATCHES "^userver-(.*)$")
      # Do nothing, already included
    elseif (LINK_TARGET MATCHES "^yandex-userver-(.*)$")
      # Do nothing, already included
    elseif (LINK_TARGET MATCHES "^yandex-taxi-client-(.*)$")
      # Do nothing, already included
    elseif (LINK_TARGET MATCHES "^yandex-taxi-config-(.*)$")
      # Do nothing
    elseif (LINK_TARGET MATCHES "^yandex-taxi-stq-client-definitions-(.*)$")
      # Do nothing
    else()
      find_package(${LINK_TARGET} REQUIRED)
    endif(FIND_TARGET_CMAKE_FOUND)
  endif()
endforeach(LINK_TARGET)

find_program_required(mongo mongodb-shell)
find_program_required(mongod mongodb-server)
find_program_required(mongos mongodb-mongos)
find_program_required(pg_config postgresql-12)
find_program_required(pg_config postgresql-server-dev-12)
find_program_required(redis-cli redis-tools)
find_program_required(redis-server redis-server)

project(yandex-taxi-test-service)
message("Project ${PROJECT_NAME}")

set(DEPENDS_FILES)
list(APPEND DEPENDS_FILES
  ${CMAKE_CURRENT_SOURCE_DIR}/configs/*
  ${CMAKE_CURRENT_SOURCE_DIR}/docs/yaml/*.yaml
  ${CMAKE_CURRENT_SOURCE_DIR}/service.yaml
  ${CMAKE_SOURCE_DIR}/libraries/new-lib/docs/yaml/*.yaml
)
file(GLOB_RECURSE FILES CONFIGURE_DEPENDS FOLLOW_SYMLINKS ${DEPENDS_FILES})
set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${FILES})

file (GLOB_RECURSE BENCH_SOURCES
  src/*_benchmark.cpp
  include/*_benchmark.hpp
)

file(GLOB_RECURSE TEST_SOURCES
  src/*_test.cpp
  src/*_test.hpp
)
file(GLOB_RECURSE TEST_FOLDER_SOURCES
  tests/*.cpp
  tests/*.hpp
)
set(TEST_SOURCES ${TEST_SOURCES} ${TEST_FOLDER_SOURCES})

file(GLOB_RECURSE LIB_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
)

set(SRC_MAIN_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/src/main.cpp)
set(BIN_MAIN_SOURCE ${CMAKE_CURRENT_BINARY_DIR}/src/main.cpp)
set(COMPONENTS_SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/src/components.cpp)

list(REMOVE_ITEM LIB_SOURCES ${SRC_MAIN_SOURCE} ${BIN_MAIN_SOURCE} ${COMPONENTS_SOURCE})
if (BENCH_SOURCES)
  list(REMOVE_ITEM LIB_SOURCES ${BENCH_SOURCES})
endif(BENCH_SOURCES)
if (TEST_SOURCES)
  list(REMOVE_ITEM LIB_SOURCES ${TEST_SOURCES})
endif(TEST_SOURCES)

file(GLOB_RECURSE LIB_GENERATED_SOURCES
  ${CMAKE_CURRENT_BINARY_DIR}/src/*.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/src/*.hpp
)
list(REMOVE_ITEM LIB_GENERATED_SOURCES ${BIN_MAIN_SOURCE})

add_empty_object_target(${PROJECT_NAME}_all_obj)

# Do not make an archive, just collect objects in one target
add_library(${PROJECT_NAME}_lib OBJECT ${LIB_SOURCES})
if (LIB_GENERATED_SOURCES)
  target_sources(${PROJECT_NAME}_lib PRIVATE ${LIB_GENERATED_SOURCES})
endif()
target_include_directories(${PROJECT_NAME}_lib
  PUBLIC
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}/fbs
  ${CMAKE_CURRENT_SOURCE_DIR}/src/
)
target_link_libraries(${PROJECT_NAME}_lib ${LINK_TARGETS})
target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_lib)

file(GLOB_RECURSE LIB_PROTOBUF_SOURCES
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.cc
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.h
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.hpp
)

python_requirements_check(${CMAKE_CURRENT_SOURCE_DIR})

if (TESTSUITE_SEPARATE_TARGETS)
  if (DEFINED ENV{IS_TEAMCITY})
    set(SKIP_FLAPS_ARG --skip-flaps)
  endif()

  add_test(
    NAME ${PROJECT_NAME}_testsuite
    COMMAND
      ${CMAKE_BINARY_DIR}/testsuite/runtests
      -vv
      -p tests_plugins.rerunfailures --reruns 1 ${SKIP_FLAPS_ARG}
      -p no:name_of_plugin
      -p no:pytest-teamcity
      --profile-junitxml
      --junitxml=${CMAKE_BINARY_DIR}/test-results/junit-test-service.xml
      --service-logs-pretty-disable
      ${CMAKE_CURRENT_SOURCE_DIR}/testsuite
  )
  set_tests_properties(${PROJECT_NAME}_testsuite PROPERTIES TIMEOUT 2500)
endif()

include_directories(
  ${CMAKE_CURRENT_BINARY_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}/src
  ${CMAKE_CURRENT_BINARY_DIR}/include
)

if (LIB_PROTOBUF_SOURCES)
  add_library(${PROJECT_NAME}_lib_proto OBJECT ${LIB_PROTOBUF_SOURCES})
  target_include_directories(${PROJECT_NAME}_lib_proto SYSTEM PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR}/proto
    ${CMAKE_BINARY_DIR}/schemas/proto/src
  )
  target_compile_options(${PROJECT_NAME}_lib_proto PRIVATE
    -Wno-unused-parameter
  )
  target_link_libraries(${PROJECT_NAME}_lib_proto PUBLIC Protobuf)
  if (yandex-userver-grpc IN_LIST LINK_TARGETS)
    target_link_libraries(${PROJECT_NAME}_lib_proto PUBLIC yandex-userver-grpc)
  endif()

  target_link_libraries(${PROJECT_NAME}_lib ${PROJECT_NAME}_lib_proto)
  target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_lib_proto)
endif()

if (TEST_SOURCES)
  add_library(${PROJECT_NAME}_unittest_obj OBJECT ${TEST_SOURCES})
  add_google_tests_compile_options(${PROJECT_NAME}_unittest_obj)
  target_compile_definitions(${PROJECT_NAME}_unittest_obj
    PRIVATE -DDEFAULT_TAXI_CONFIG_FILENAME="${CMAKE_CURRENT_BINARY_DIR}/taxi_config_fallback.json"
    PRIVATE -DSOURCE_DIR="${CMAKE_SOURCE_DIR}"
    PRIVATE -DCURRENT_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
    PRIVATE -DBINARY_DIR="${CMAKE_BINARY_DIR}"
    PRIVATE -DCURRENT_BINARY_DIR="${CMAKE_CURRENT_BINARY_DIR}"
  )
  
  if ("userver-redis" IN_LIST LINK_TARGETS)
    target_link_libraries(${PROJECT_NAME}_unittest_obj
      userver-redis_utest
    )
  elseif ("yandex-userver-redis" IN_LIST LINK_TARGETS)
    target_link_libraries(${PROJECT_NAME}_unittest_obj
      yandex-userver-redis_utest
    )
  endif()

  target_link_libraries(${PROJECT_NAME}_unittest_obj
    ${PROJECT_NAME}_lib
    yandex-userver-utest
  )

  add_executable(${PROJECT_NAME}_unittest)
  target_link_libraries(${PROJECT_NAME}_unittest
    ${PROJECT_NAME}_lib
    ${LINK_TARGETS}
    ${PROJECT_NAME}_unittest_obj
  )

  if (LIB_PROTOBUF_SOURCES)
    target_link_libraries(${PROJECT_NAME}_unittest
      ${PROJECT_NAME}_lib_proto
    )
  endif()
  add_google_tests(${PROJECT_NAME}_unittest)

  target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_unittest_obj)
endif(TEST_SOURCES)

if (BENCH_SOURCES)
  add_library(${PROJECT_NAME}_benchmark_obj OBJECT ${BENCH_SOURCES})
  target_compile_definitions(${PROJECT_NAME}_benchmark_obj
    PRIVATE -DDEFAULT_TAXI_CONFIG_FILENAME="${CMAKE_CURRENT_BINARY_DIR}/taxi_config_fallback.json"
    PRIVATE -DSOURCE_DIR="${CMAKE_SOURCE_DIR}"
    PRIVATE -DCURRENT_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
    PRIVATE -DBINARY_DIR="${CMAKE_BINARY_DIR}"
    PRIVATE -DCURRENT_BINARY_DIR="${CMAKE_CURRENT_BINARY_DIR}"
  )
  target_link_libraries(${PROJECT_NAME}_benchmark_obj
    ${PROJECT_NAME}_lib
    yandex-userver-ubench
  )

  add_executable(${PROJECT_NAME}_benchmark)
  target_link_libraries(${PROJECT_NAME}_benchmark
    ${PROJECT_NAME}_lib
    ${LINK_TARGETS}
    ${PROJECT_NAME}_benchmark_obj
  )
  if (LIB_PROTOBUF_SOURCES)
    target_link_libraries(${PROJECT_NAME}_benchmark
      ${PROJECT_NAME}_lib_proto
    )
  endif()
  target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_benchmark_obj)
endif(BENCH_SOURCES)

if (EXISTS ${SRC_MAIN_SOURCE})
  add_library(${PROJECT_NAME}_obj OBJECT ${SRC_MAIN_SOURCE})
else()
  add_library(${PROJECT_NAME}_obj OBJECT ${COMPONENTS_SOURCE} ${BIN_MAIN_SOURCE})
endif()
target_link_libraries(${PROJECT_NAME}_obj ${PROJECT_NAME}_lib)

add_executable(${PROJECT_NAME})
add_dependencies(${PROJECT_NAME} yandex-userver-core)
set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)
target_link_libraries(${PROJECT_NAME}
  ${PROJECT_NAME}_lib
  ${LINK_TARGETS}
  ${PROJECT_NAME}_obj
)
target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_obj)
if (LIB_PROTOBUF_SOURCES)
  target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_lib_proto)
endif()
