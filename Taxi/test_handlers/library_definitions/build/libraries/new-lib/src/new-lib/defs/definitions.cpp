/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s): definitions.yaml

#include <new-lib/defs/definitions.hpp>

#include <userver/formats/json/value_builder.hpp>
#include <userver/formats/parse/common_containers.hpp>
#include <userver/formats/parse/variant.hpp>

#include <codegen/impl/convert.hpp>
#include <codegen/impl/get_validation_length.hpp>
#include <codegen/impl/optional_convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <cstring>
#include <unordered_set>
#include <userver/formats/common/meta.hpp>
#include <userver/formats/json/string_builder.hpp>
#include <userver/logging/log.hpp>
#include <userver/utils/assert.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>
#include <userver/utils/underlying_value.hpp>

#include <codegen/impl/convert.hpp>

namespace handlers::libraries::new_lib {

handlers::libraries::new_lib::NewExtra Parse(
    [[maybe_unused]] const formats::json::Value& elem,
    formats::parse::To<handlers::libraries::new_lib::NewExtra>) {
  handlers::libraries::new_lib::NewExtra result;

  elem.CheckNotMissing();
  elem.CheckObjectOrNull();

  result.new_extra_param =
      elem["new-extra-param"].As<std::optional<::std::string>>();

  return result;
}

namespace parser {
template <class To>
template <class From>
To PNewExtra::ParserLocalConverterTrait<To>::Convert(From&& from) {
  return ::codegen::impl::Convert<To>(std::forward<From>(from));
}

template <class To>
To PNewExtra::ParserLocalDomToType<To>::Convert(
    ::formats::json::Value&& value) {
  return std::move(value).As<To>();
}

PNewExtra::PNewExtra()
{
  null_new_extra_param_.Subscribe(sink_new_extra_param_);

  f_new_extra_param_.Subscribe(sink_new_extra_param_);
}

void PNewExtra::Reset()
{
  state_ = State::kStart;
  result_ = {};

  s_new_extra_param_ = false;
}

void PNewExtra::StartObject() {
  switch (state_) {
    case State::kStart:
      state_ = State::kInside;
      break;

    case State::kInside:
      Throw("{");
  }
}

void PNewExtra::Key([[maybe_unused]] std::string_view key)
{
  key_ = key;
  if (false) {
  } else if (key == "new-extra-param") {
    s_new_extra_param_ = true;
    f_new_extra_param_.Reset();

    parser_state_->PushParser(null_new_extra_param_.GetParser());
  } else {
    /* Eat and ignore unknown value */
    ff_empty_.Reset();
    parser_state_->PushParser(ff_empty_.GetParser());
  }
}

void PNewExtra::EndObject()
{
  switch (state_) {
    case State::kStart:
      Throw("}");

    case State::kInside:
      // If an exception is thrown below, we must not set .old_key
      key_.clear();

      if (!s_new_extra_param_) {
        result_.new_extra_param = {};
      }

      SetResult(std::move(result_));
      break;
  }
}

std::string PNewExtra::Expected() const {
  switch (state_) {
    case State::kStart:
      return "object";

    case State::kInside:
      return "field name";
  }
}

std::string PNewExtra::GetPathItem() const { return key_; }
}

formats::json::Value Serialize(
    [[maybe_unused]] const handlers::libraries::new_lib::NewExtra& value,
    ::formats::serialize::To<formats::json::Value>)
{
  formats::json::ValueBuilder builder(formats::json::Type::kObject);

  if (value.new_extra_param)
    builder.EmplaceNocheck("new-extra-param", *value.new_extra_param);
  return builder.ExtractValue();
}

void WriteToStream(
    [[maybe_unused]] const handlers::libraries::new_lib::NewExtra& value,
    formats::json::StringBuilder& sw, [[maybe_unused]] bool hide_brackets,
    [[maybe_unused]] const char* hide_field_name)
{
  std::optional<::formats::json::StringBuilder::ObjectGuard> guard;
  if (!hide_brackets) guard.emplace(sw);

  if (!hide_field_name || std::strcmp(hide_field_name, "new-extra-param"))
  {
    if (value.new_extra_param)
    {
      sw.Key("new-extra-param");

      WriteToStream(*value.new_extra_param, sw);
    }
  }
}

logging::LogHelper& operator<<(logging::LogHelper& lh,
                               const handlers::libraries::new_lib::NewExtra& v)
{
  return lh << ToString(formats::json::ValueBuilder(v).ExtractValue());
}

}
