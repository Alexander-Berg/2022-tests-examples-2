/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s): definitions.yaml

#pragma once

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/non_null_ptr.hpp>
#include <codegen/parsing_flags.hpp>
#include <optional>
#include <string>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>

#include <codegen/parser/datetime_parser.hpp>
#include <codegen/parser/dummy_parser.hpp>  // TODO: for debug only
#include <codegen/parser/enum_parser.hpp>
#include <codegen/parser/extra_helper.hpp>
#include <codegen/parser/null_swallow.hpp>
#include <codegen/parser/nullable_helper.hpp>
#include <codegen/parser/parser_converter.hpp>
#include <codegen/parser/parser_dom.hpp>
#include <codegen/parser/parser_empty.hpp>
#include <codegen/parser/parser_non_null_ptr.hpp>
#include <codegen/parser/validator.hpp>
#include <codegen/parser/value_builder_helper.hpp>
#include <userver/formats/json/parser/parser.hpp>

namespace handlers::libraries::new_lib {

struct NewExtra {
  ::std::optional<::std::string> new_extra_param{};
};

NewExtra Parse(const formats::json::Value& elem, formats::parse::To<NewExtra>);

namespace parser {
class PNewExtra final: public ::formats::json::parser::TypedParser<
                           handlers::libraries::new_lib::NewExtra> {
 public:
  PNewExtra();

  void Reset() override;

  void StartObject() override;

  void Key(std::string_view key) override;

  void EndObject() override;

 private:
  std::string Expected() const override;

  std::string GetPathItem() const override;

  handlers::libraries::new_lib::NewExtra result_;
  std::string key_;

  template <class To>
  struct ParserLocalConverterTrait {
    template <class From>
    static To Convert(From&& from);
  };

  template <class To>
  struct ParserLocalDomToType {
    static To Convert(::formats::json::Value&& value);
  };

  // new-extra-param
  // .cpp_type: std::optional<::std::string>
  // .optional_subtype: std::string
  // cpp_type: std::string
  ::formats::json::parser::StringParser f_new_extra_param_;

  ::codegen::parser::NullableHelper<::std::optional<::std::string>,
                                    decltype(f_new_extra_param_)>
      null_new_extra_param_{f_new_extra_param_};
  ::formats::json::parser::SubscriberSinkOptional<std::string>
      sink_new_extra_param_{result_.new_extra_param};

  bool s_new_extra_param_{false};

  ::codegen::parser::EmptyParser ff_empty_;

  enum class State {
    kStart,
    kInside,
  };
  State state_;
};

}  // namespace parser

logging::LogHelper& operator<<(logging::LogHelper& lh, const NewExtra& v);

template <typename U>
std::enable_if_t<std::is_same<U, NewExtra>::value, bool> operator==(
    const U& lhs, const U& rhs)
{
  // template magic identifies whether all struct fields are comparable
  static_assert(boost::has_equal_to<decltype(lhs.new_extra_param)>::value,
                "No operator==() defined for field 'new_extra_param' of type "
                "'::std::optional<::std::string>'");

  return std::tie(lhs.new_extra_param) == std::tie(rhs.new_extra_param);
}

template <typename U>
std::enable_if_t<std::is_same<U, NewExtra>::value, bool> operator!=(
    const U& lhs, const U& rhs)
{
  return !(lhs == rhs);
}

::formats::json::Value Serialize(
    const NewExtra& value, ::formats::serialize::To<::formats::json::Value>);

void WriteToStream(const NewExtra& value, formats::json::StringBuilder& sw,
                   bool hide_brackets = false,
                   const char* hide_field_name = nullptr);

}
