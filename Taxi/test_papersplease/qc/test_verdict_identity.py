from unittest import mock

import pytest

from papersplease.qc import verdict_common
from papersplease.qc import verdict_identity


SUCCESSFUL_PASS: dict = {
    'config': {
        'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_OCR_CONFIDENCE_THRESHOLD': 0.5,
        'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_CHECK_PASSPORT_IN_FNS_ENABLED': (
            True
        ),
        'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_AGE_MODEL_ENABLED': True,
        'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_FACE_AGE_THRESHOLD': 20,
        'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_MISTAKES_SELFIE_FORMAT_THRESHOLD': (  # noqa: E501 pylint: disable=line-too-long
            0.9
        ),
        'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_MISTAKES_SELFIE_SAAS_ENABLED': (
            True
        ),
        'PPS_CRON_RESOLVE_QC_PASSES_BANNED_SELFIES_COUNT_OF_FACES': 1,
        'PPS_CRON_RESOLVE_QC_PASSES_BANNED_SELFIES_CONFIDENCE_THRESHOLD': (
            0.889
        ),
        'PPS_CRON_RESOLVE_QC_PASSES_BANNED_SELFIES_FACE_SIZE_THRESHOLD': 0.0,
        'PPS_CRON_RESOLVE_QC_PASSES_BANNED_SELFIES_SIMILARITY_THRESHOLD': (
            0.8797
        ),
    },
    'qc_pass': {
        'entity_id': 'SomeParkId_SomeDriverId',
        'first_name': 'Иван',
        'last_name': 'Иванов',
        'patronymic': 'Иванович',
        'date_of_birth': '1995-01-01',
        'issue_date': '2015-02-01',
        'number': '1111122222',
    },
    'ocr_response': {
        'title_recognized_text': [
            {'confidence': 0.9, 'text': 'Иванов', 'type': 'surname'},
            {'confidence': 0.9, 'text': 'Иван', 'type': 'name'},
            {'confidence': 0.9, 'text': 'Иванович', 'type': 'middle_name'},
            {'confidence': 0.9, 'text': '01.01.1995', 'type': 'birth_date'},
            {'confidence': 0.9, 'text': '1111122222', 'type': 'number'},
            {'confidence': 0.9, 'text': '01.02.2015', 'type': 'issue_date'},
            {'confidence': 0.9, 'text': 'РОВД', 'type': 'subdivision'},
        ],
    },
    'catboost_scores': {
        'title_from_screen_score': 0.2,
        'selfie_from_screen_score': 0.2,
        'registration_from_screen_score': 0.2,
        'selfie_bad_format_score': 0.2,
        'printed_selfie_score': 0.2,
        'title_is_russian_score': 0.8,
        'registration_is_russian_score': 0.8,
        'quasi_fms_score': 0.8,
        'face_age_prediction': 25,
    },
    'driver_profile': {
        'full_name': {
            'last_name': 'Иванов',
            'first_name': 'Иван',
            'middle_name': 'Иванович',
        },
        'license_driver_birth_date': '1995-01-01T00:00:00.000',
    },
    'has_inn_in_fns': True,
    'driver_license': '3333344444',
    'driver_license_pd_id': '3333344444_pd_id',
    'face_saas_features': [
        {
            'confidence': 0.9980099797,
            'height': 0.511926055,
            'layer_name': 'prod_v5_face_emb_256',
            'saas_info': [],
        },
    ],
}

DEFAULT_SAAS_FEATURES_FOR_DUPLICATES = [
    {
        'confidence': 0.9980099797,
        'height': 0.511926055,
        'layer_name': 'prod_v5_face_emb_256',
        'saas_info': [
            {
                'metainfo': {
                    'center_x': 0.6753937602,
                    'center_y': 0.6566802859,
                    'confidence': 0.9452818632,
                    'db_id': 'AnotherParkId',
                    'driver_id': 'AnotherDriverId',
                    'driver_license': '9999900000',
                    'exam': 'identity',
                    'height': 0.08714871109,
                    'is_history': True,
                    'pass_id': '5f5c86b6938cffd776a15619',
                    'pass_modified': 1599900509,
                    'photo_number_by_size': 1,
                    'picture_type': 'selfie',
                    'uberdriver_driver_id': None,
                    'width': 0.03945605829,
                },
                'similarity': 0.95,
            },
        ],
    },
]
DEFAULT_SAAS_FEATURES_DUPLICATE_WITH_DKVU = [
    {
        'confidence': 0.9980099797,
        'height': 0.511926055,
        'layer_name': 'prod_v5_face_emb_256',
        'saas_info': [
            {
                'metainfo': {
                    'center_x': 0.6753937602,
                    'center_y': 0.6566802859,
                    'confidence': 0.9452818632,
                    'db_id': 'AnotherParkId',
                    'driver_id': 'AnotherDriverId',
                    'driver_license': '9999900000',
                    'exam': 'dkvu',
                    'height': 0.08714871109,
                    'is_history': True,
                    'pass_id': '5f5c86b6938cffd776a15619',
                    'pass_modified': 1599900509,
                    'photo_number_by_size': 1,
                    'picture_type': 'selfie',
                    'uberdriver_driver_id': None,
                    'width': 0.03945605829,
                },
                'similarity': 0.95,
            },
        ],
    },
]

DEFAULT_SAAS_FEATURES_DUPLICATE_WITH_COURIER = [
    {
        'confidence': 0.9980099797,
        'height': 0.511926055,
        'layer_name': 'prod_v5_face_emb_256',
        'saas_info': [
            {
                'metainfo': {
                    'center_x': 0.6753937602,
                    'center_y': 0.6566802859,
                    'confidence': 0.9452818632,
                    'db_id': 'AnotherParkId',
                    'driver_id': 'AnotherDriverId',
                    'driver_license': 'COURIER9999900000',
                    'exam': 'identity',
                    'height': 0.08714871109,
                    'is_history': True,
                    'pass_id': '5f5c86b6938cffd776a15619',
                    'pass_modified': 1599900509,
                    'photo_number_by_size': 1,
                    'picture_type': 'selfie',
                    'uberdriver_driver_id': None,
                    'width': 0.03945605829,
                },
                'similarity': 0.95,
            },
        ],
    },
]


@pytest.mark.now('2021-01-01T00:00:00Z')
@pytest.mark.parametrize(
    'comment,config_dict,qc_pass_dict,ocr_response,catboost_scores_dict,'
    'driver_profile,has_inn_in_fns,driver_license,driver_license_pd_id,'
    'face_saas_features,expected_verdict,expected_errors,'
    'expected_invite_exam_request',
    [
        (
            'successful pass',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'success',
            [],
            None,
        ),
        (
            'unknown pass ocr is None',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            {'title_recognized_text': None},
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['title recognized text is None'],
            None,
        ),
        (
            'unknown pass nothing is recognized',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            {'title_recognized_text': []},
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'field first_name is not recognized in title',
                'field patronymic is not recognized in title',
                'field last_name is not recognized in title',
                'field date_of_birth is not recognized in title',
                'field number is not recognized in title',
                'field issue_date is not recognized in title',
                'field issuer is not recognized in title',
            ],
            None,
        ),
        (
            'unknown_pass_confidence_is_not_enough',
            {
                **SUCCESSFUL_PASS['config'],
                'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_OCR_CONFIDENCE_THRESHOLD': (  # noqa: E501 pylint: disable=line-too-long
                    0.95
                ),
            },
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'field first_name is not recognized in title',
                'field patronymic is not recognized in title',
                'field last_name is not recognized in title',
                'field date_of_birth is not recognized in title',
                'field number is not recognized in title',
                'field issue_date is not recognized in title',
                'field issuer is not recognized in title',
            ],
            None,
        ),
        (
            'unknown pass number is None',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'number': None},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['passport number is None'],
            None,
        ),
        (
            'unknown pass letters in number',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'number': '11111OOOOO'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['passport number has non-digit symbols'],
            None,
        ),
        (
            'unknown pass not ten symbols',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'number': '111111111'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['passport number must have 10 symbols'],
            None,
        ),
        (
            'unknown pass catboost scores reached thresholds',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            {
                'title_from_screen_score': 0.8,
                'selfie_from_screen_score': 0.8,
                'printed_selfie_score': 0.8,
                'registration_from_screen_score': 0.8,
                'selfie_bad_format_score': 0.8,
                'title_is_russian_score': 0.2,
                'registration_is_russian_score': 0.2,
                'quasi_fms_score': 0.2,
                'face_age_prediction': 80,
            },
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'catboost title_from_screen_score reached threshold',
                'catboost selfie_from_screen_score reached threshold',
                'catboost printed_selfie_score reached threshold',
                'catboost registration_from_screen_score reached threshold',
                'catboost selfie_bad_format_score reached threshold',
                'catboost title_is_russian_score reached threshold',
                'catboost registration_is_russian_score reached threshold',
                'catboost quasi_fms_score reached threshold',
                'face age prediction is not close to driver age',
            ],
            None,
        ),
        (
            'unknown pass birthday is None',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'date_of_birth': None},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'birthday is unknown',
                'qc_pass birthday is not equal to driver profile birthday',
            ],
            None,
        ),
        (
            'unknown pass issue date is None',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'issue_date': None},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['issue date is None'],
            None,
        ),
        (
            'unknown pass age is 17',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'date_of_birth': '2003-06-01'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'age is less than 18',
                'qc_pass birthday is not equal to driver profile birthday',
            ],
            None,
        ),
        (
            'unknown pass passport is not changed at 20 years',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'issue_date': '2011-01-01'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['passport obtained before 20, driver is older than 20 now'],
            None,
        ),
        (
            'unknown pass passport is not changed at 45 years',
            SUCCESSFUL_PASS['config'],
            {
                **SUCCESSFUL_PASS['qc_pass'],
                'date_of_birth': '1975-01-01',
                'issue_date': '2005-01-01',
            },
            SUCCESSFUL_PASS['ocr_response'],
            {**SUCCESSFUL_PASS['catboost_scores'], 'face_age_prediction': 45},
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'passport obtained before 45, driver is older than 45 now',
                'qc_pass birthday is not equal to driver profile birthday',
            ],
            None,
        ),
        (
            'unknown pass name is not correct',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'first_name': 'Петр'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['qc_pass first name is not equal to driver profile first name'],
            None,
        ),
        (
            'unknown pass last_name is not correct',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'last_name': 'Петров'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['qc_pass last name is not equal to driver profile last name'],
            None,
        ),
        (
            'unknown pass middle_name is not correct',
            SUCCESSFUL_PASS['config'],
            {**SUCCESSFUL_PASS['qc_pass'], 'patronymic': 'Петрович'},
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['qc_pass middle name is not equal to driver profile middle name'],
            None,
        ),
        (
            'successful pass driver profile data is empty',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            {
                'full_name': {
                    'last_name': None,
                    'first_name': None,
                    'middle_name': None,
                },
                'license_driver_birth_date': None,
            },
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'success',
            [],
            None,
        ),
        (
            'unknown pass driver profile is None',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            None,
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['driver profile is None'],
            None,
        ),
        (
            'unknown pass passport is not valid in fns',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            False,
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['passport is not valid according to FNS'],
            None,
        ),
        (
            'successful pass fns config is disabled',
            {
                **SUCCESSFUL_PASS['config'],
                'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_CHECK_PASSPORT_IN_FNS_ENABLED': (  # noqa: E501 pylint: disable=line-too-long
                    False
                ),
            },
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            False,
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'success',
            [],
            None,
        ),
        (
            'unknown pass qc_pass data are None',
            SUCCESSFUL_PASS['config'],
            {
                'entity_id': 'SomeParkId_SomeDriverId',
                'first_name': None,
                'last_name': None,
                'patronymic': None,
                'date_of_birth': None,
                'issue_date': None,
                'number': None,
            },
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            True,
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            [
                'passport number is None',
                'birthday is unknown',
                'qc_pass first name is not equal to driver profile first name',
                'qc_pass last name is not equal to driver profile last name',
                'qc_pass middle name is not equal to driver profile middle '
                'name',
                'qc_pass birthday is not equal to driver profile birthday',
            ],
            None,
        ),
        (
            'mistakes pass selfie duplicates',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            DEFAULT_SAAS_FEATURES_FOR_DUPLICATES,
            'mistakes',
            [],
            verdict_common.InviteExamRequest.create(
                license_pd_id='3333344444_pd_id',
                park_id='SomeParkId',
                comment_for_assessors='Подозрение на дубли по '
                'лицу: 9999900000;AnotherDriverId.',
            ),
        ),
        (
            'successful pass selfie duplicates config disabled',
            {
                **SUCCESSFUL_PASS['config'],
                'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_MISTAKES_SELFIE_SAAS_ENABLED': (  # noqa: E501 pylint: disable=line-too-long
                    False
                ),
            },
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            DEFAULT_SAAS_FEATURES_FOR_DUPLICATES,
            'success',
            [],
            None,
        ),
        (
            'successful pass selfie duplicates with dkvu',
            {
                **SUCCESSFUL_PASS['config'],
                'PPS_CRON_RESOLVE_IDENTITY_QC_PASSES_MISTAKES_SELFIE_SAAS_ENABLED': (  # noqa: E501 pylint: disable=line-too-long
                    False
                ),
            },
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            DEFAULT_SAAS_FEATURES_DUPLICATE_WITH_DKVU,
            'success',
            [],
            None,
        ),
        (
            'successful pass selfie duplicates with dkvu',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            DEFAULT_SAAS_FEATURES_DUPLICATE_WITH_DKVU,
            'success',
            [],
            None,
        ),
        (
            'successful pass selfie duplicates with courier',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            DEFAULT_SAAS_FEATURES_DUPLICATE_WITH_COURIER,
            'success',
            [],
            None,
        ),
        (
            'mistakes pass courier duplicates',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            'COURIER3333344444',
            SUCCESSFUL_PASS['driver_license_pd_id'],
            DEFAULT_SAAS_FEATURES_DUPLICATE_WITH_COURIER,
            'mistakes',
            [],
            verdict_common.InviteExamRequest.create(
                license_pd_id='3333344444_pd_id',
                park_id='SomeParkId',
                comment_for_assessors='Подозрение на дубли по '
                'лицу: COURIER9999900000;AnotherDriverId.',
            ),
        ),
        (
            'successful pass driver profiled stripped',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            {
                'full_name': {
                    'last_name': '  Иванов  ',
                    'first_name': ' Иван   ',
                    'middle_name': '    Иванович  ',
                },
                'license_driver_birth_date': '1995-01-01T00:00:00.000',
            },
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'success',
            [],
            None,
        ),
        (
            'successful pass after normalization',
            SUCCESSFUL_PASS['config'],
            {
                **SUCCESSFUL_PASS['qc_pass'],
                'first_name': 'семен',
                'last_name': 'семенов       ',
                'patronymic': 'семенович',
            },
            SUCCESSFUL_PASS['ocr_response'],
            SUCCESSFUL_PASS['catboost_scores'],
            {
                'full_name': {
                    'last_name': 'Семёнов',
                    'first_name': ' Семён ',
                    'middle_name': 'Семёнович  ',
                },
                'license_driver_birth_date': '1995-01-01T00:00:00.000',
            },
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'success',
            [],
            None,
        ),
        (
            'mistakes pass bad selfie format',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            {
                **SUCCESSFUL_PASS['catboost_scores'],
                'selfie_bad_format_score': 0.95,
            },
            {
                'full_name': {
                    'last_name': 'Семёнов',
                    'first_name': ' Семён ',
                    'middle_name': 'Семёнович  ',
                },
                'license_driver_birth_date': '1995-01-01T00:00:00.000',
            },
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'mistakes',
            [],
            None,
        ),
        (
            'unknown pass printed_photo',
            SUCCESSFUL_PASS['config'],
            SUCCESSFUL_PASS['qc_pass'],
            SUCCESSFUL_PASS['ocr_response'],
            {
                **SUCCESSFUL_PASS['catboost_scores'],
                'printed_selfie_score': 0.7,
            },
            SUCCESSFUL_PASS['driver_profile'],
            SUCCESSFUL_PASS['has_inn_in_fns'],
            SUCCESSFUL_PASS['driver_license'],
            SUCCESSFUL_PASS['driver_license_pd_id'],
            SUCCESSFUL_PASS['face_saas_features'],
            'unknown',
            ['catboost printed_selfie_score reached threshold'],
            None,
        ),
    ],
)
def test_calculate_verdict(
        comment,
        config_dict,
        qc_pass_dict,
        ocr_response,
        catboost_scores_dict,
        driver_profile,
        has_inn_in_fns,
        driver_license,
        driver_license_pd_id,
        face_saas_features,
        expected_verdict,
        expected_errors,
        expected_invite_exam_request,
):
    config = mock.Mock(**config_dict)
    qc_pass = mock.Mock(**qc_pass_dict)
    catboost_scores = mock.Mock(**catboost_scores_dict)
    catboost_models = mock.Mock(
        photo_from_screen_v2_threshold=0.5,
        selfie_bad_format_threshold=0.5,
        printed_photo_threshold=0.5,
        title_is_russian_threshold=0.5,
        registration_is_russian_threshold=0.5,
        quasi_fms_threshold=0.5,
    )

    verdict = verdict_identity.calculate_verdict(
        qc_pass,
        ocr_response,
        catboost_models,
        catboost_scores,
        driver_profile,
        has_inn_in_fns,
        driver_license,
        driver_license_pd_id,
        face_saas_features,
        config,
    )

    assert str(verdict.verdict) == expected_verdict
    assert verdict.errors == expected_errors
    assert verdict.invite_exam_request == expected_invite_exam_request
