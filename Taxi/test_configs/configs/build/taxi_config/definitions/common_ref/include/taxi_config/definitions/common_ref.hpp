/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/schemas/schemas/configs/definitions/common/ref.yaml

#pragma once

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/non_null_ptr.hpp>
#include <codegen/parsing_flags.hpp>
#include <string>
#include <unordered_map>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>

namespace taxi_config::common_ref {

struct Obj {
  ::formats::json::Value extra{
      formats::json::ValueBuilder(formats::json::Type::kObject).ExtractValue()};
};

Obj Parse(const formats::json::Value& elem, formats::parse::To<Obj>,
          ::codegen::ParsingFlags flags = ::codegen::ParsingFlags::kParseExtra);

template <typename U>
std::enable_if_t<std::is_same<U, Obj>::value, bool> operator==(const U& lhs,
                                                               const U& rhs)
{
  // template magic identifies whether all struct fields are comparable
  static_assert(boost::has_equal_to<decltype(lhs.extra)>::value,
                "No operator==() defined for field 'extra' of type "
                "'::formats::json::Value'");

  return std::tie(lhs.extra) == std::tie(rhs.extra);
}

template <typename U>
std::enable_if_t<std::is_same<U, Obj>::value, bool> operator!=(const U& lhs,
                                                               const U& rhs)
{
  return !(lhs == rhs);
}

}
