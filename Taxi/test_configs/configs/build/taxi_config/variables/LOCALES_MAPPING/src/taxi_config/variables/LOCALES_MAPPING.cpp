/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/schemas/schemas/configs/declarations/locales/LOCALES_MAPPING.yaml

#include <codegen/impl/convert.hpp>
#include <codegen/impl/get_validation_length.hpp>
#include <codegen/impl/optional_convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <cstring>
#include <taxi_config/variables/LOCALES_MAPPING.hpp>
#include <unordered_set>
#include <userver/dynamic_config/value.hpp>
#include <userver/formats/common/meta.hpp>
#include <userver/formats/json/serialize_container.hpp>
#include <userver/formats/json/string_builder.hpp>
#include <userver/logging/log.hpp>
#include <userver/utils/assert.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>
#include <userver/utils/underlying_value.hpp>

namespace taxi_config::locales_mapping {

static const std::unordered_set<std::string> kLocalesMappingNonExtraKeys = {};

taxi_config::locales_mapping::LocalesMapping Parse(
    [[maybe_unused]] const formats::json::Value& elem,
    formats::parse::To<taxi_config::locales_mapping::LocalesMapping>,
    [[maybe_unused]] ::codegen::ParsingFlags flags) {
  taxi_config::locales_mapping::LocalesMapping result;

  elem.CheckNotMissing();
  elem.CheckObjectOrNull();

  if (flags == ::codegen::ParsingFlags::kParseExtra)
  {
    for (auto it = elem.begin(); it != elem.end(); ++it) {
      const auto& name = it.GetName();
      /* Skip 'properties', they don't go to additionalProperties */
      if (kLocalesMappingNonExtraKeys.count(name) > 0) continue;

      result.extra.emplace(name, (*it).As<std::string>());
    }
  }

  return result;
}

}

namespace taxi_config::locales_mapping {

VariableType ParseVariable(const dynamic_config::DocsMap& docs_map) {
  return docs_map.Get("LOCALES_MAPPING")
      .As<taxi_config::locales_mapping::LocalesMapping>();
}

}
