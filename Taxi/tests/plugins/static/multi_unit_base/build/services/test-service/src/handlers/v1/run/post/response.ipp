#ifndef USERVER_CODEGEN_IPP_INSTANTIATION_GUARD
#error DO NOT INCLUDE THIS FILE! INCLUDE THE FILE WITH *.hpp EXTENSION!
#endif

/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/docs/yaml/api/api.yaml,
// taxi/uservices/services/test-service/docs/yaml/api/openapi.yaml

#include <handlers/v1/run/post/response.hpp>

#include <userver/formats/json/serialize_container.hpp>
#include <userver/formats/parse/common_containers.hpp>

#include <boost/algorithm/string/join.hpp>

#include <codegen/impl/response_visitors.hpp>
#include <userver/formats/json/serialize.hpp>
#include <userver/formats/json/serialize_container.hpp>  // for std::optional
#include <userver/formats/json/value_builder.hpp>
#include <userver/utils/assert.hpp>

#include <codegen/impl/convert.hpp>
#include <codegen/impl/get_validation_length.hpp>
#include <codegen/impl/optional_convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <cstring>
#include <unordered_set>
#include <userver/formats/common/meta.hpp>
#include <userver/formats/json/string_builder.hpp>
#include <userver/logging/log.hpp>
#include <userver/utils/assert.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>
#include <userver/utils/underlying_value.hpp>

#include <codegen/impl/convert.hpp>

namespace handlers::v1_run::post {

formats::json::Value Serialize([[maybe_unused]] const Response200& value,
                               ::formats::serialize::To<formats::json::Value>)
{
  formats::json::ValueBuilder builder(formats::json::Type::kObject);

  builder.EmplaceNocheck("discounts", value.discounts);
  return builder.ExtractValue();
}

void WriteToStream([[maybe_unused]] const Response200& value,
                   formats::json::StringBuilder& sw,
                   [[maybe_unused]] bool hide_brackets,
                   [[maybe_unused]] const char* hide_field_name)
{
  std::optional<::formats::json::StringBuilder::ObjectGuard> guard;
  if (!hide_brackets) guard.emplace(sw);

  if (!hide_field_name || std::strcmp(hide_field_name, "discounts"))
  {
    sw.Key("discounts");

    WriteToStream(value.discounts, sw);
  }
}

handlers::v1_run::post::Response200 Parse(
    [[maybe_unused]] const formats::json::Value& elem,
    formats::parse::To<handlers::v1_run::post::Response200>) {
  handlers::v1_run::post::Response200 result;

  elem.CheckNotMissing();
  elem.CheckObjectOrNull();

  result.discounts = [](const formats::json::Value& array)
      -> std::vector<std::unordered_set<std::string>> {
    std::vector<std::unordered_set<std::string>> result;
    array.CheckArrayOrNull();
    result.reserve(array.GetSize());
    for (const auto& item : array) {
      result.insert(result.end(),
                    [](const formats::json::Value& array)
                        -> std::unordered_set<std::string> {
                      std::unordered_set<std::string> result;
                      array.CheckArrayOrNull();
                      for (const auto& item : array) {
                        result.insert(result.end(), item.As<std::string>());
                      }

                      return result;
                    }(item));
    }

    return result;
  }(elem["discounts"]);

  return result;
}

namespace parser {
template <class To>
template <class From>
To PResponse200::ParserLocalConverterTrait<To>::Convert(From&& from) {
  return ::codegen::impl::Convert<To>(std::forward<From>(from));
}

template <class To>
To PResponse200::ParserLocalDomToType<To>::Convert(
    ::formats::json::Value&& value) {
  return std::move(value).As<To>();
}

PResponse200::PResponse200()
{
  f_discounts_.Subscribe(sink_discounts_);
}

void PResponse200::Reset()
{
  state_ = State::kStart;
  result_ = {};

  s_discounts_ = false;
}

void PResponse200::StartObject() {
  switch (state_) {
    case State::kStart:
      state_ = State::kInside;
      break;

    case State::kInside:
      Throw("{");
  }
}

void PResponse200::Key([[maybe_unused]] std::string_view key)
{
  key_ = key;
  if (false) {
  } else if (key == "discounts") {
    s_discounts_ = true;
    f_discounts_.Reset();

    parser_state_->PushParser(f_discounts_.GetParser());
  } else {
    /* Eat and ignore unknown value */
    ff_empty_.Reset();
    parser_state_->PushParser(ff_empty_.GetParser());
  }
}

void PResponse200::EndObject()
{
  switch (state_) {
    case State::kStart:
      Throw("}");

    case State::kInside:
      // If an exception is thrown below, we must not set .old_key
      key_.clear();

      if (!s_discounts_) {
        throw ::formats::json::parser::InternalParseError(
            "missing required field 'discounts'");
      }

      SetResult(std::move(result_));
      break;
  }
}

std::string PResponse200::Expected() const {
  switch (state_) {
    case State::kStart:
      return "object";

    case State::kInside:
      return "field name";
  }
}

std::string PResponse200::GetPathItem() const { return key_; }
}

void FillHttpResponse(
    [[maybe_unused]] ::server::http::HttpResponse& http_response,
    [[maybe_unused]] const Response200& response)
{}

void FillHttpResponse(
    [[maybe_unused]] ::server::http::HttpResponse& http_response,
    [[maybe_unused]] const Response400& response)
{
  http_response.SetStatus(static_cast<server::http::HttpStatus>(400));
}

void FillHttpResponse(server::http::HttpResponse& http_response,
                      const Response& response)
{
  std::visit(::codegen::impl::HttpResponseVisitor(http_response), response);
}

std::string ToString(const Response& response)
{
  return std::visit(::codegen::impl::ResponseVisitorToString(), response);
}

}
