# AUTOGENERATED, DON'T CHANGE THIS FILE!

if (NOT USERVICES)
    message(
        FATAL_ERROR
        "#################################################################\n"
        "Do NOT use this CMakeLists.txt file directly!\n"
        "Use the CMakeLists.txt at the root of uservices!\n"
        "\n"
        "Type `make help` at the uservices root for more information.\n"
        "#################################################################"
    )
endif()

project("yandex-taxi-library-stq-dispatcher")

# Autogenerated grpc target, if any
file(GLOB GRPC_GENERATED_TARGET
  ${CMAKE_CURRENT_BINARY_DIR}/grpc
)
foreach(GRPC_TARGET ${GRPC_GENERATED_TARGET})
  add_subdirectory(${GRPC_TARGET} ${GRPC_TARGET})
endforeach(GRPC_TARGET)

file(GLOB_RECURSE LIB_SOURCES
  ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/*.hpp
)

file(GLOB_RECURSE GENERATED_SOURCES
  ${CMAKE_CURRENT_BINARY_DIR}/src/*.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/src/*.hpp
)

file(GLOB_RECURSE GENERATED_FLATBUFFER_HEADERS
  ${CMAKE_CURRENT_BINARY_DIR}/fbs/*.h
  ${CMAKE_BINARY_DIR}/schemas/fbs/*.h
)

file(GLOB_RECURSE PROTOBUF_SOURCES
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.cc
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.h
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.cpp
  ${CMAKE_CURRENT_BINARY_DIR}/proto/*.hpp
)

file(GLOB_RECURSE TEST_SOURCES
    src/*_test.cpp
    src/*_test.hpp
)
file(GLOB_RECURSE TEST_FOLDER_SOURCES
  tests/*.cpp
  tests/*.hpp
)
set(TEST_SOURCES ${TEST_SOURCES} ${TEST_FOLDER_SOURCES})

if(TEST_SOURCES)
  list(REMOVE_ITEM LIB_SOURCES ${TEST_SOURCES})
endif(TEST_SOURCES)

file(GLOB_RECURSE BENCH_SOURCES
  src/*_benchmark.cpp
  include/*_benchmark.hpp
)

if(BENCH_SOURCES)
  list(REMOVE_ITEM LIB_SOURCES ${BENCH_SOURCES})
endif(BENCH_SOURCES)

set(LINK_TARGETS  "")
set(LIB_SOURCES_FULL ${LIB_SOURCES} ${GENERATED_SOURCES})

set(PUBLIC_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/include/
  ${CMAKE_CURRENT_BINARY_DIR}/include/
  ${CMAKE_CURRENT_BINARY_DIR}/proto
  ${CMAKE_CURRENT_BINARY_DIR}/fbs
  ${CMAKE_BINARY_DIR}/schemas/fbs/
)
set(PRIVATE_INCLUDE_DIRS
  ${CMAKE_CURRENT_SOURCE_DIR}/src/
  ${CMAKE_CURRENT_BINARY_DIR}/src/
)


get_filename_component(LIB_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
if (LIB_SOURCES_FULL)
  add_library(${PROJECT_NAME} STATIC
      ${LIB_SOURCES_FULL}
      ${GENERATED_FLATBUFFER_HEADERS}
  )
  target_include_directories(${PROJECT_NAME}
    PUBLIC ${PUBLIC_INCLUDE_DIRS}
    PRIVATE ${PRIVATE_INCLUDE_DIRS})
  target_link_libraries(${PROJECT_NAME} ${LINK_TARGETS})
else()
  add_library(${PROJECT_NAME} INTERFACE)
  target_include_directories(${PROJECT_NAME}
    INTERFACE ${PUBLIC_INCLUDE_DIRS})
  target_link_libraries(${PROJECT_NAME} INTERFACE ${LINK_TARGETS})
endif()

if (PROTOBUF_SOURCES)
  add_library(${PROJECT_NAME}_proto OBJECT ${PROTOBUF_SOURCES})
  target_include_directories(${PROJECT_NAME}_proto SYSTEM PUBLIC
    ${CMAKE_CURRENT_BINARY_DIR}/proto
    ${CMAKE_BINARY_DIR}/schemas/proto/src
  )
  target_compile_options(${PROJECT_NAME}_proto PRIVATE
    -Wno-unused-parameter
  )
  target_link_libraries(${PROJECT_NAME}_proto PUBLIC Protobuf)
  if (yandex-userver-grpc IN_LIST LINK_TARGETS)
    target_link_libraries(${PROJECT_NAME}_proto PUBLIC yandex-userver-grpc)
  endif()

  if (LIB_SOURCES_FULL)
    target_link_libraries(${PROJECT_NAME} ${PROJECT_NAME}_proto)
  else()
    target_link_libraries(${PROJECT_NAME} INTERFACE ${PROJECT_NAME}_proto)
  endif()
endif()

add_empty_object_target(${PROJECT_NAME}_all_obj)
target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME})

if(TEST_SOURCES)
  add_library(${PROJECT_NAME}_unittest_obj OBJECT ${TEST_SOURCES})
  add_google_tests_compile_options(${PROJECT_NAME}_unittest_obj)
  target_link_libraries(${PROJECT_NAME}_unittest_obj
    ${PROJECT_NAME} ${LINK_TARGETS} yandex-userver-utest)
  if("userver-redis" IN_LIST LINK_TARGETS)
    target_link_libraries(${PROJECT_NAME}_unittest_obj
      userver-redis_utest)
  elseif ("yandex-userver-redis" IN_LIST LINK_TARGETS)
    target_link_libraries(${PROJECT_NAME}_unittest_obj
      yandex-userver-redis_utest
    )
  endif()
  target_include_directories(${PROJECT_NAME}_unittest_obj
    PUBLIC ${PUBLIC_INCLUDE_DIRS}
    PRIVATE ${PRIVATE_INCLUDE_DIRS})
  target_compile_definitions(${PROJECT_NAME}_unittest_obj
    PRIVATE -DSOURCE_DIR="${CMAKE_SOURCE_DIR}"
    PRIVATE -DCURRENT_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
    PRIVATE -DBINARY_DIR="${CMAKE_BINARY_DIR}"
    PRIVATE -DCURRENT_BINARY_DIR="${CMAKE_CURRENT_BINARY_DIR}"
    PRIVATE -DDEFAULT_TAXI_CONFIG_FILENAME="${CMAKE_CURRENT_BINARY_DIR}/taxi_config_fallback.json"
  )

  add_executable(${PROJECT_NAME}_unittest)
  target_link_libraries(${PROJECT_NAME}_unittest
    ${PROJECT_NAME}
    ${LINK_TARGETS}
    ${PROJECT_NAME}_unittest_obj
  )
  add_google_tests(${PROJECT_NAME}_unittest ${PROJECT_NAME}_unittest_obj)

  target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_unittest_obj)
endif(TEST_SOURCES)

if(BENCH_SOURCES)
  add_library(${PROJECT_NAME}_benchmark_obj OBJECT ${BENCH_SOURCES})
  target_include_directories(${PROJECT_NAME}_benchmark_obj
    PUBLIC ${PUBLIC_INCLUDE_DIRS}
    PRIVATE ${PRIVATE_INCLUDE_DIRS})
  target_compile_definitions(${PROJECT_NAME}_benchmark_obj
    PRIVATE -DSOURCE_DIR="${CMAKE_SOURCE_DIR}"
    PRIVATE -DCURRENT_SOURCE_DIR="${CMAKE_CURRENT_SOURCE_DIR}"
    PRIVATE -DBINARY_DIR="${CMAKE_BINARY_DIR}"
    PRIVATE -DCURRENT_BINARY_DIR="${CMAKE_CURRENT_BINARY_DIR}"
    PRIVATE -DDEFAULT_TAXI_CONFIG_FILENAME="${CMAKE_CURRENT_BINARY_DIR}/taxi_config_fallback.json")
  target_link_libraries(${PROJECT_NAME}_benchmark_obj
    ${PROJECT_NAME}
    ${LINK_TARGETS}
    yandex-userver-ubench
  )

  add_executable(${PROJECT_NAME}_benchmark)
  target_link_libraries(${PROJECT_NAME}_benchmark
    ${PROJECT_NAME}
    ${LINK_TARGETS}
    ${PROJECT_NAME}_benchmark_obj
  )

  target_link_libraries(${PROJECT_NAME}_all_obj ${PROJECT_NAME}_benchmark_obj)
endif(BENCH_SOURCES)

set(DEPENDS_FILES)
list(APPEND DEPENDS_FILES
  ${CMAKE_SOURCE_DIR}/libraries/stq-dispatcher/library.yaml
  fbs/*.fbs
  proto/*.proto
)
file(GLOB_RECURSE FILES CONFIGURE_DEPENDS FOLLOW_SYMLINKS ${DEPENDS_FILES})
set_property(DIRECTORY APPEND PROPERTY CMAKE_CONFIGURE_DEPENDS ${FILES})
