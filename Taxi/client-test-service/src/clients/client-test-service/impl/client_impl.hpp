/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// schemas/services/client-test-service/api/api.yaml

#pragma once

#include <clients/client-test-service/client.hpp>

#include <clients/http_fwd.hpp>
#include <userver/dynamic_config/source.hpp>
#include <userver/utils/statistics/metrics_storage.hpp>

#include <clients/impl/method_metric.hpp>
#include <clients/statistics.hpp>
#include <tvm2/models/service.hpp>
#include <userver/crypto/certificate.hpp>
#include <userver/crypto/private_key.hpp>

namespace clients::client_test_service::impl {

// Do NOT use this class directly!
//
// Use clients::client_test_service::Client instead!
class ClientImpl final : public Client {
 public:
  explicit ClientImpl(
      ::clients::Http& http_client, const ::dynamic_config::Source& config,
      const std::string& base_url, utils::statistics::MetricsStoragePtr metrics,
      ::logging::Level body_log_level, size_t body_log_limit,
      std::optional<std::string> proxy, tvm2::models::ServiceId tvm2_service_id,
      ::clients::StatisticsReachUserverInterface statistics_userver_client);

  ~ClientImpl();

 private:
  const ::dynamic_config::Source config_;
  ::clients::Http& http_client_;
  std::string base_url_;
  std::string unix_socket_path_;
  utils::statistics::MetricsStoragePtr metrics_;
  const ::logging::Level body_log_level_;
  const size_t body_log_limit_;
  std::optional<std::string> proxy_;
  [[maybe_unused]] const tvm2::models::ServiceId tvm2_service_id_;
  const ::clients::StatisticsReachInterface& statistics_client_;
};

}  // namespace clients::client_test_service::impl
