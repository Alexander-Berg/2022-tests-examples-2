lua_need_request_body on;

set $resp_body "";
set $resp_headers "";
set $req_body "";
set $req_headers "";

rewrite_by_lua_block {
    ngx.var.req_body = ngx.req.get_body_data();

    local req_headers = "";
    local h, err = ngx.req.get_headers()
    for k, v in pairs(h) do
        req_headers = req_headers .. k .. ": " .. v .. "\n";
    end
    ngx.var.req_headers = req_headers;
}

body_filter_by_lua_block {
    local resp_body = string.sub(ngx.arg[1], 1, 1000)
    ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
    if ngx.arg[2] then
        ngx.var.resp_body = ngx.ctx.buffered
    end
}

header_filter_by_lua_block {
    local resp_headers = "";
    local h, err = ngx.resp.get_headers()
    for k, v in pairs(h) do
        resp_headers = resp_headers .. k .. ": " .. (type(v) == "table" and table.concat(v, ";") or v) .. "\n";
    end
    ngx.var.resp_headers = resp_headers;
}
