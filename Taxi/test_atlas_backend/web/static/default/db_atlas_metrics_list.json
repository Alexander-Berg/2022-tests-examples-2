[
  {
    "_id": "anomaly_trips_taxi_all",
    "absolute": "anomaly_trips_taxi_all",
    "agg_func": "AVG",
    "class_any_exists": false,
    "color": "#4651a0",
    "database": "atlas_orders",
    "db": [
      "pixel",
      "realtime"
    ],
    "default": true,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "Share of requests burnt",
    "divide_by": 1.0,
    "en": "Burnt Requests Share, %",
    "formula": null,
    "id": "anomaly_trips_taxi_all",
    "ifnull": 0,
    "main_class_if_any": false,
    "map": true,
    "metric": "Сгоревших заказов, %",
    "metrics": [
      "requests_share_burnt",
      "requests_volume"
    ],
    "monitoring": false,
    "optgroup": "Заказы",
    "optgroup_en": "Requests",
    "primary": true,
    "relative": true,
    "selection_rules": [
      "SUM(requests_share_burnt) / SUM(requests_volume)",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_burnt) AS requests_share_burnt",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_burnt) AS requests_share_burnt",
      "requests_volume, requests_share_burnt*requests_volume AS requests_share_burnt"
    ],
    "server": "clickhouse_cluster",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "\n--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM MultiSelector car_class\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_PARAM TimeBucketGrid time_grid\n\nSELECT\n    ts_1_min,\n    city,\n    quadkey as quadkey,\n    requests_volume, requests_share_burnt*requests_volume AS requests_share_burnt\nFROM\n    atlas_orders.orders\nWHERE \n    1 = 1\n    AND {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey('quadkey') }}\n    AND {{ filter.car_class() }}   \n    AND requests_share_burnt >= 0.0\n    AND requests_volume >= 0.0\n    AND {{ log_table_filter(\"orders\", params.ts.from_ts, params.ts.to_ts) }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "orders",
    "target": 0.05,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "requests_share_burnt",
    "absolute": "requests_volume",
    "agg_func": "AVG",
    "class_any_exists": false,
    "color": "#4651a0",
    "database": "atlas_orders",
    "db": [
      "pixel",
      "realtime"
    ],
    "default": true,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "Share of requests burnt",
    "divide_by": 1.0,
    "en": "Burnt Requests Share, %",
    "formula": null,
    "id": "requests_share_burnt",
    "ifnull": 0,
    "main_class_if_any": false,
    "map": true,
    "metric": "Сгоревших заказов, %",
    "metrics": [
      "requests_share_burnt",
      "requests_volume"
    ],
    "monitoring": false,
    "optgroup": "Заказы",
    "optgroup_en": "Requests",
    "primary": true,
    "relative": true,
    "selection_rules": [
      "SUM(requests_share_burnt) / SUM(requests_volume)",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_burnt) AS requests_share_burnt",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_burnt) AS requests_share_burnt",
      "requests_volume, requests_share_burnt*requests_volume AS requests_share_burnt"
    ],
    "server": "clickhouse_back_man",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "\n--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM MultiSelector car_class\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_PARAM TimeBucketGrid time_grid\n--REGISTER_PARAM GeoNode geonodes\n\nSELECT\n    ts_1_min,\n    city,\n    quadkey as quadkey,\n    requests_volume, requests_share_burnt*requests_volume AS requests_share_burnt\nFROM\n    atlas_orders.orders\nWHERE\n    1 = 1\n    AND {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey('quadkey') }}\n    AND {{ filter.car_class() }}\n    AND requests_share_burnt >= 0.0\n    AND requests_volume >= 0.0\n    AND {{ log_table_filter(\"orders\", params.ts.from_ts, params.ts.to_ts) }}\n   AND {{ filter.geonodes('ololo') }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "orders",
    "target": 0.05,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "requests_share_found",
    "absolute": "requests_volume",
    "agg_func": "AVG",
    "class_any_exists": false,
    "color": "#4651a0",
    "database": "atlas",
    "db": [
      "pixel",
      "realtime"
    ],
    "default": false,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "",
    "divide_by": 1.0,
    "en": "requests_share_found",
    "formula": null,
    "id": "requests_share_found",
    "ifnull": null,
    "main_class_if_any": false,
    "map": true,
    "metric": "Водителей найдено (found), %",
    "metrics": [
      "requests_share_found",
      "requests_volume"
    ],
    "monitoring": false,
    "optgroup": "Заказы",
    "optgroup_en": "Requests",
    "primary": true,
    "quadkey_size": 17,
    "relative": true,
    "selection_rules": [
      "SUM(requests_share_found) / SUM(requests_volume)",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_found) AS requests_share_found",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_found) AS requests_share_found",
      "requests_volume, requests_share_found*requests_volume AS requests_share_found"
    ],
    "server": "clickhouse_cluster",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "--DEFINE_ATLAS_BLOCK REPORT::PLOT START\n--REGISTER_PARAM TimeBucketGrid time_grid\nSELECT\n    atlas_ts,\n    SUM(cnt) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('dttm_utc_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(cnt) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    {{params.geonodes.build_case('nearest_zone')}} as city,\n    SUM(cnt) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM MultiSelector car_class\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_PARAM ContainsSelector tags\n--REGISTER_PARAM Selector corp_contract_id\n--REGISTER_PARAM CorpType corp_type\n--REGISTER_PARAM MultiSelector tariff_zones\n--REGISTER_PARAM PaymentType payment_type\n--REGISTER_PARAM Selector couriers_source\n--REGISTER_PARAM MultiSelector grocery_ids\n--REGISTER_PARAM GeoNode geonodes\n\nSELECT\n    dttm_utc_1_min,\n    city,\n    source_quadkey as quadkey,\n    nearest_zone,\n    {{ params.corp_type.corp_order_type() }} as corp_order_type,\n    1 as cnt\nFROM\n    {{ table_path('FINAL') }}\nWHERE\n    1 = 1\n    AND {{ filter.ts('dttm_utc_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey() }}\n    AND {{ filter.car_class(\"if(car_class_refined == '', car_class, car_class_refined)\") }}\n    AND ({{ filter.tags('user_tags') }} or {{ filter.tags('cand_perf_tags') }})\n    AND ({{ filter.corp_contract_id('corp_contract_id') }} OR {{ filter.corp_contract_id('corp_client_id') }})\n    AND {{ filter.corp_type('corp_order_type') }}\n    AND {{ filter.tariff_zones('nearest_zone') }}\n    AND {{ filter.couriers_source('couriers_source') }}\n    AND {{ filter.grocery_ids('orders_place_id') }}\n    AND {{ filter.payment_type() }}\n    AND user_fraud = 0\n    AND {{ filter.geonodes('nearest_zone') }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END",
    "table": "ods_order",
    "target": null,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "z_edit_protected_metric",
    "absolute": "requests_volume",
    "agg_func": "AVG",
    "class_any_exists": false,
    "color": "#4651a0",
    "database": "atlas_orders",
    "db": [
      "pixel",
      "realtime"
    ],
    "default": true,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "Share of requests burnt",
    "divide_by": 1.0,
    "en": "Burnt Requests Share, %",
    "formula": null,
    "id": "z_edit_protected_metric",
    "ifnull": 0,
    "main_class_if_any": false,
    "map": true,
    "metric": "Сгоревших заказов, %",
    "metrics": [
      "requests_share_burnt",
      "requests_volume"
    ],
    "monitoring": false,
    "optgroup": "Заказы",
    "optgroup_en": "Requests",
    "primary": true,
    "protected_edit": true,
    "protected_view_group": "ci_kd",
    "quadkey_size": 18,
    "relative": true,
    "selection_rules": [
      "SUM(requests_share_burnt) / SUM(requests_volume)",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_burnt) AS requests_share_burnt",
      "SUM(requests_volume) AS requests_volume, SUM(requests_share_burnt) AS requests_share_burnt",
      "requests_volume, requests_share_burnt*requests_volume AS requests_share_burnt"
    ],
    "server": "clickhouse_back_man",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "\n--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(requests_share_burnt) / SUM(requests_volume) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM MultiSelector car_class\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_PARAM TimeBucketGrid time_grid\n\nSELECT\n    ts_1_min,\n    city,\n    quadkey as quadkey,\n    requests_volume, requests_share_burnt*requests_volume AS requests_share_burnt\nFROM\n    atlas_orders.orders\nWHERE\n    1 = 1\n    AND {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey('quadkey') }}\n    AND {{ filter.car_class() }}   \n    AND requests_share_burnt >= 0.0\n    AND requests_volume >= 0.0\n    AND {{ log_table_filter(\"orders\", params.ts.from_ts, params.ts.to_ts) }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "orders",
    "target": 0.05,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "z_detailed_data_airports",
    "absolute": "",
    "agg_func": "SUM",
    "class_any_exists": false,
    "color": "#2f10cc",
    "database": "atlas",
    "db": [
      "pixel"
    ],
    "default": false,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "",
    "divide_by": null,
    "en": "[detailed][data] Airports",
    "formula": null,
    "id": "z_detailed_data_airports",
    "ifnull": null,
    "main_class_if_any": false,
    "map": true,
    "metric": "[detailed][data] Airports",
    "metrics": [
      "<filler>"
    ],
    "monitoring": false,
    "optgroup": "not_pixel",
    "optgroup_en": "not_pixel",
    "primary": true,
    "protected_edit": false,
    "protected_view_group": null,
    "quadkey_size": 18,
    "relative": false,
    "selection_rules": null,
    "server": "clickhouse_cluster_test",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "--DEFINE_ATLAS_BLOCK REPORT::DETAIL_DATA START\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM ContainsMultiSelector source_geoareas\n\nSELECT\n  dttm,\n  car_class,\n  source_geoareas,\n  count() as cnt\nFROM atlas.ods_order\nWHERE \n  1\n  AND {{ filter.ts('dttm_utc_1_min') }}\n  AND {{ filter.source_geoareas() }}\nGROUP BY\n  toUnixTimestamp(toStartOfMinute(dttm_utc_1_min)) as dttm,\n  -- toString(toStartOfMinute(dttm_utc_1_min), 'UTC') as dttm,\n  if (car_class_refined != '', car_class_refined, car_class) as car_class,\n  source_geoareas\norder by dttm\n--DEFINE_ATLAS_BLOCK REPORT::DETAIL_DATA END\n\n\n--DEFINE_ATLAS_BLOCK BASE_QUERY START\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM ContainsMultiSelector source_geoareas\n\nSELECT\n  toUnixTimestamp(toStartOfMinute(dttm_utc_1_min)) as dttm,\n  if (car_class_refined != '', car_class_refined, car_class) as car_class,\n  source_geoareas,\n  1 as requests_count,\n  if(status = 'finished'\n    AND taxi_status = 'complete', 1, 0) as trips_count\nFROM atlas.ods_order\nWHERE \n  1\n  AND {{ filter.ts('dttm_utc_1_min') }}\n  AND {{ filter.source_geoareas() }}\nGROUP BY\n  toUnixTimestamp(toStartOfMinute(dttm_utc_1_min)) as dttm,\n  if (car_class_refined != '', car_class_refined, car_class) as car_class,\n  source_geoareas\norder by dttm\n--DEFINE_ATLAS_BLOCK BASE_QUERY END\n",
    "table": "ods_order",
    "target": null,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "z_trips_with_aggregated_version",
    "absolute": "z_trips_with_aggregated_version",
    "agg_func": "AVG",
    "class_any_exists": false,
    "color": "#4651a0",
    "database": "atlas_orders",
    "db": [
      "pixel",
      "realtime"
    ],
    "default": true,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "trips_with_aggregated_version",
    "divide_by": 1.0,
    "en": "trips_with_aggregated_version",
    "formula": null,
    "id": "z_trips_with_aggregated_version",
    "ifnull": 0,
    "main_class_if_any": false,
    "map": true,
    "metric": "[detailed] Поездки",
    "metrics": [],
    "monitoring": false,
    "optgroup": "Заказы",
    "optgroup_en": "Requests",
    "primary": true,
    "relative": true,
    "selection_rules": [],
    "server": "clickhouse_cluster",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "--DEFINE_ATLAS_BLOCK REPORT::PLOT START\n--REGISTER_PARAM TimeBucketGrid time_grid\nSELECT\n    atlas_ts,\n    SUM(cnt) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('dttm_utc_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::AGGREGATED_PLOT START\n--REGISTER_PARAM TimeBucketGrid time_grid\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM Selector car_class\n--REGISTER_PARAM DateRange ts\nSELECT\n    atlas_ts,\n    SUM(requests_volume) as value\nFROM\n    atlas.orders_aggregated\nWHERE\n    {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.car_class() }}\nGROUP BY\n    {{ make_ts_bucket('dttm_utc_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::AGGREGATED_PLOT END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(cnt) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n--DEFINE_ATLAS_BLOCK REPORT::AGGREGATED_LEADERBOARD START\n--REGISTER_PARAM TimeBucketGrid time_grid\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM Selector car_class\n--REGISTER_PARAM DateRange ts\nSELECT\n    city,\n    SUM(cnt) as value\nFROM\n    atlas.orders_aggregated\nWHERE\n    {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.car_class() }}\nGROUP BY\n    city\n--DEFINE_ATLAS_BLOCK REPORT::AGGREGATED_LEADERBOARD END\n\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM Selector car_class\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_PARAM ContainsSelector tags\n--REGISTER_PARAM Selector corp_contract_id\n--REGISTER_PARAM CorpType corp_type\n--REGISTER_PARAM MultiSelector tariff_zones\n--REGISTER_PARAM PaymentType payment_type\n--REGISTER_PARAM GeoNode geonodes\n\nSELECT\n    dttm_utc_1_min,\n    {{params.geonodes.build_case('tariff_zones')}} as city,\n    source_quadkey as quadkey,\n    {{ params.corp_type.corp_order_type() }} as corp_order_type,\n    1 as cnt\nFROM\n    atlas.ods_order FINAL\nWHERE\n    1 = 1\n    AND {{ filter.ts('dttm_utc_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey() }}\n    AND {{ filter.car_class(\"if(car_class_refined == '', car_class, car_class_refined)\") }}\n    AND ({{ filter.tags('user_tags') }} or {{ filter.tags('cand_perf_tags') }})\n    AND ({{ filter.corp_contract_id('corp_contract_id') }} OR {{ filter.corp_contract_id('corp_client_id') }})\n    AND {{ filter.corp_type('corp_order_type') }}\n    AND {{ filter.tariff_zones('nearest_zone') }}\n    AND {{ filter.payment_type() }}\n AND {{ filter.geonodes('nearest_zone') }}\n    AND user_fraud = 0\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END",
    "table": "orders",
    "target": 0.05,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "chyt_sum_fact_km",
    "absolute": "",
    "agg_func": "SUM",
    "chyt_cluster": "hahn",
    "class_any_exists": false,
    "clique_alias": "*atlas_chyt",
    "color": "#2f10cc",
    "connection_type": "chyt",
    "database": "",
    "db": [
      "pixel",
      "leaderboard"
    ],
    "default": false,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "",
    "divide_by": null,
    "en": "YT sum fact km",
    "formula": null,
    "id": "chyt_sum_fact_km",
    "ifnull": null,
    "main_class_if_any": false,
    "map": true,
    "metric": "[dpano] YT sum fact km",
    "metrics": [
      "<filler>"
    ],
    "monitoring": false,
    "optgroup": "test",
    "optgroup_en": "test",
    "primary": false,
    "protected_edit": false,
    "protected_view_group": null,
    "quadkey_size": 15,
    "relative": false,
    "selection_rules": null,
    "server": 0,
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "\n--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    SUM(sum_fact_km) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(sum_fact_km) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(sum_fact_km) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM MultiSelector car_class\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_PARAM TimeBucketGrid time_grid\n\nSELECT\n    ts_1_min,\n    city,\n    quadkey as quadkey,\n    sum_fact_km\nFROM\n    `//tmp/dpanoUqSw2dhvg`\nWHERE \n    1 = 1\n    AND {{ filter.ts('ts_1_min') }}\n    AND {{ filter.quadkey() }}\n    AND {{ filter.city() }}\n    AND {{ filter.car_class() }}   \n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "",
    "target": null,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "simple_metric_with_source",
    "absolute": "",
    "agg_func": "SUM",
    "chyt_cluster": "hahn",
    "class_any_exists": false,
    "clique_alias": "*atlas_chyt",
    "color": "#2f10cc",
    "connection_type": "chyt",
    "database": "",
    "db": [
      "pixel",
      "leaderboard"
    ],
    "default": false,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "",
    "divide_by": null,
    "en": "Simple metric with source",
    "formula": null,
    "id": "simple_metric_with_source",
    "ifnull": null,
    "main_class_if_any": false,
    "map": true,
    "metric": "[test] Метрика для тестирования механизма источников",
    "metrics": [
      "<filler>"
    ],
    "monitoring": false,
    "optgroup": "test",
    "optgroup_en": "test",
    "primary": false,
    "protected_edit": false,
    "protected_view_group": null,
    "quadkey_size": 15,
    "relative": false,
    "selection_rules": null,
    "server": 0,
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    sum(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM TimeBucketGrid time_grid\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_SOURCE second_test_source\nselect\n  net_inflow as value,\n  toUnixTimestamp(utc_order_dttm) as ts_1_min,\n  quadkey,\n  city\nFROM\n    {{ sources.second_test_source.tables(params.ts) }}\nwhere\n    {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey('quadkey') }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "",
    "target": null,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "simple_metric_with_unknown_source",
    "absolute": "",
    "agg_func": "SUM",
    "chyt_cluster": "hahn",
    "class_any_exists": false,
    "clique_alias": "*atlas_chyt",
    "color": "#2f10cc",
    "connection_type": "chyt",
    "database": "",
    "db": [
      "pixel",
      "leaderboard"
    ],
    "default": false,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "",
    "divide_by": null,
    "en": "Simple metric with source",
    "formula": null,
    "id": "simple_metric_with_unknown_source",
    "ifnull": null,
    "main_class_if_any": false,
    "map": true,
    "metric": "[test] Метрика для тестирования механизма источников",
    "metrics": [
      "<filler>"
    ],
    "monitoring": false,
    "optgroup": "test",
    "optgroup_en": "test",
    "primary": false,
    "protected_edit": false,
    "protected_view_group": null,
    "quadkey_size": 15,
    "relative": false,
    "selection_rules": null,
    "server": 0,
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    sum(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM TimeBucketGrid time_grid\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_SOURCE unknown_source\nselect\n  net_inflow as value,\n  toUnixTimestamp(utc_order_dttm) as ts_1_min,\n  quadkey,\n  city\nFROM\n    {{ sources.second_test_source.tables(params.ts) }}\nwhere\n    {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey('quadkey') }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "",
    "target": null,
    "var_geohash": null,
    "version": 2
  },
  {
    "_id": "simple_metric_static_source",
    "absolute": "",
    "agg_func": "SUM",
    "chyt_cluster": "hahn",
    "class_any_exists": false,
    "clique_alias": "*atlas_chyt",
    "color": "#2f10cc",
    "database": "",
    "db": [
      "pixel",
      "leaderboard"
    ],
    "default": false,
    "default_leaderboard": false,
    "default_uber": null,
    "desc": "",
    "desc_en": "",
    "divide_by": null,
    "en": "Simple metric with static source",
    "formula": null,
    "id": "simple_metric_static_source",
    "ifnull": null,
    "main_class_if_any": false,
    "map": true,
    "metric": "[test] Метрика для тестирования механизма источников, FROM секция источника не зависит от измерений",
    "metrics": [
      "<filler>"
    ],
    "monitoring": false,
    "optgroup": "test",
    "optgroup_en": "test",
    "primary": false,
    "protected_edit": false,
    "protected_view_group": null,
    "quadkey_size": 15,
    "relative": false,
    "selection_rules": null,
    "server": "clickhouse_cluster_test",
    "signal": "positive",
    "skip_primary_keys": [],
    "sql_query": null,
    "sql_query_raw": "--DEFINE_ATLAS_BLOCK REPORT::PLOT START\nSELECT\n    atlas_ts,\n    sum(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY\n    {{ make_ts_bucket('ts_1_min') }} as atlas_ts\n--DEFINE_ATLAS_BLOCK REPORT::PLOT END\n\n--DEFINE_ATLAS_BLOCK REPORT::MAP START\nSELECT\n    quadkey,\n    SUM(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    {{ quadkey('quadkey') }} as quadkey\n--DEFINE_ATLAS_BLOCK REPORT::MAP END\n\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD START\nSELECT\n    city,\n    SUM(value) as value\nFROM\n    ($ATLAS_BLOCK(QUERY::DATASET))\nGROUP BY \n    city\n--DEFINE_ATLAS_BLOCK REPORT::LEADERBOARD END\n\n--DEFINE_ATLAS_BLOCK QUERY::DATASET START\n--REGISTER_PARAM MultiSelector city\n--REGISTER_PARAM DateRange ts\n--REGISTER_PARAM TimeBucketGrid time_grid\n--REGISTER_PARAM MultiSelector quadkey\n--REGISTER_SOURCE third_test_source\nselect\n  net_inflow as value,\n  toUnixTimestamp(utc_order_dttm) as ts_1_min,\n  quadkey,\n  city\nFROM\n    {{ sources.third_test_source.tables() }}\nwhere\n    {{ filter.ts('ts_1_min') }}\n    AND {{ filter.city() }}\n    AND {{ filter.quadkey('quadkey') }}\n--DEFINE_ATLAS_BLOCK QUERY::DATASET END\n",
    "table": "",
    "target": null,
    "var_geohash": null,
    "version": 2
  }
]
