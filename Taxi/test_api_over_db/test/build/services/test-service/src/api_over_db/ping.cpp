/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

#include <api_over_db/ping.hpp>

namespace {

template <class Cache>
void CheckCacheThrow(const Cache& cache) {
  auto cache_ptr = cache.GetUnsafe();
  if (!cache_ptr)
    throw server::handlers::InternalServerError(
        server::handlers::InternalMessage{std::string("no ptr for cache ") +
                                          Cache::kName});
  if (!(cache_ptr->IsReady()))
    throw server::handlers::InternalServerError(
        server::handlers::InternalMessage{Cache::kName +
                                          std::string(" not ready")});
}

}  // namespace

namespace api_over_db::handlers {

Ping::Ping(const ::components::ComponentConfig& config,
           const ::components::ComponentContext& context)
    : server::handlers::HttpHandlerBase(config, context),
      cache_replica1_(
          context.FindComponent<api_over_db::components::replica1::Cache>()),
      cache_replica2_(
          context.FindComponent<api_over_db::components::replica2::Cache>()),
      cache_replica3_(
          context.FindComponent<api_over_db::components::replica3::Cache>()),
      dummy_(false)
{}

const std::string& Ping::HandlerName() const {
  static const std::string kHandlerName = "ping";
  return kHandlerName;
}

std::string Ping::HandleRequestThrow(
    const server::http::HttpRequest& /*request*/,
    server::request::RequestContext&) const {
  CheckCacheThrow(cache_replica1_);
  CheckCacheThrow(cache_replica2_);
  CheckCacheThrow(cache_replica3_);
  return {};
}

}
