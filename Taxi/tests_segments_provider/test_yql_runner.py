import datetime as dt
import enum
from typing import Any
from typing import Dict
from typing import Optional

import pytest
import pytz

from tests_segments_provider import common_tools
from tests_segments_provider import launch_tools
from tests_segments_provider import shipment_tools
from tests_segments_provider import yql_tools
from tests_segments_provider import yt_tools

_TZ_MOSCOW = pytz.timezone('Europe/Moscow')

_NOW_MINUS_5_MIN = dt.datetime(2021, 12, 14, 14, 55, 5).astimezone(_TZ_MOSCOW)
_NOW = dt.datetime(2021, 12, 14, 15, 0, 5).astimezone(_TZ_MOSCOW)

_CURRENT_LAUNCH_UUID = 'fd30171401ea49fb8c3651c8679369fc'
_PREV_LAUNCH_UUID = '63c060c454614aa7b93e37ab0adf3dbf'

_APPEND_PATH = (
    '//home/taxi/production/features/segments-provider/snapshots/tags/'
    f'shipment_name_append_{_CURRENT_LAUNCH_UUID}'
)
_ENTITY_TYPES_PATH = (
    '//home/taxi/production/features/segments-provider/snapshots/tags/'
    f'shipment_name_entity_types_{_CURRENT_LAUNCH_UUID}'
)
_REMOVE_PATH = (
    '//home/taxi/production/features/segments-provider/snapshots/tags/'
    f'shipment_name_remove_{_CURRENT_LAUNCH_UUID}'
)
_SNAPSHOT_PATH = (
    '//home/taxi/production/features/segments-provider/snapshots/tags/'
    f'shipment_name_snapshot_{_CURRENT_LAUNCH_UUID}'
)
_TAG_NAMES_PATH = (
    '//home/taxi/production/features/segments-provider/snapshots/tags/'
    f'shipment_name_tag_names_{_CURRENT_LAUNCH_UUID}'
)

_APPEND_TABLE = yt_tools.YtTable(
    launch_uuid=_CURRENT_LAUNCH_UUID,
    alias='append',
    path=_APPEND_PATH,
    lifespan='till_end_of_launch',
    is_marked_for_deletion=False,
)
_ENTITY_TYPES_TABLE = yt_tools.YtTable(
    launch_uuid=_CURRENT_LAUNCH_UUID,
    alias='entity_types',
    path=_ENTITY_TYPES_PATH,
    lifespan='till_end_of_launch',
    is_marked_for_deletion=False,
)
_REMOVE_TABLE = yt_tools.YtTable(
    launch_uuid=_CURRENT_LAUNCH_UUID,
    alias='remove',
    path=_REMOVE_PATH,
    lifespan='till_end_of_launch',
    is_marked_for_deletion=False,
)
_SNAPSHOT_TABLE = yt_tools.YtTable(
    launch_uuid=_CURRENT_LAUNCH_UUID,
    alias='snapshot',
    path=_SNAPSHOT_PATH,
    lifespan='persistent',
    is_marked_for_deletion=False,
)
_TAG_NAMES_TABLE = yt_tools.YtTable(
    launch_uuid=_CURRENT_LAUNCH_UUID,
    alias='tag_names',
    path=_TAG_NAMES_PATH,
    lifespan='till_end_of_launch',
    is_marked_for_deletion=False,
)

_YQL_TEXT_1 = (
    '\n'
    '\n'
    '--------------------------------------------------------\n'
    '-- THIS CODE WAS GENERATED BY SEGMENTS-PROVIDER SERVICE\n'
    f'INSERT INTO `{_SNAPSHOT_PATH}` WITH TRUNCATE\n'
    '--------------------------------------------------------\n'
    '\n'
    '\n'
    'SELECT 1 FROM (SELECT * from range("dummy", "", "") WITH SCHEMA '
    'Struct<tag:string,ttl:string,entity_value:string,entity_type:string>);\n'
    '\n'
    '\n'
    '--------------------------------------------------------\n'
    '-- THIS CODE WAS GENERATED BY SEGMENTS-PROVIDER SERVICE\n'
    ';\n'
    'COMMIT;\n'
    'INSERT INTO '
    f'`{_TAG_NAMES_PATH}` WITH TRUNCATE SELECT DISTINCT tag FROM '
    f'`{_SNAPSHOT_PATH}`;\n'
    ';\n'
    f'INSERT INTO `{_ENTITY_TYPES_PATH}` '
    'WITH TRUNCATE SELECT DISTINCT entity_type FROM '
    f'`{_SNAPSHOT_PATH}`;\n'
    ';\n'
    f'INSERT INTO `{_APPEND_PATH}` '
    'WITH TRUNCATE SELECT tag, entity_value, entity_type, '
    '(WeakField(ttl, string) ?? \'infinity\') AS ttl FROM '
    f'`{_SNAPSHOT_PATH}`\n'
    ';\n'
    f'INSERT INTO `{_REMOVE_PATH}` '
    'WITH TRUNCATE SELECT tag, entity_value, entity_type FROM ((SELECT '
    '* from range("dummy", "", "") WITH SCHEMA '
    'Struct<tag:string,ttl:string,entity_value:string,'
    'entity_type:string>));\n'
    ';\n'
)
_YQL_TEXT_2 = (
    '\n'
    '\n'
    '--------------------------------------------------------\n'
    '-- THIS CODE WAS GENERATED BY SEGMENTS-PROVIDER SERVICE\n'
    f'INSERT INTO `{_SNAPSHOT_PATH}` WITH TRUNCATE\n'
    '--------------------------------------------------------\n'
    '\n'
    '\n'
    'SELECT 1 FROM `//old_snapshot_path`;\n'
    '\n'
    '\n'
    '--------------------------------------------------------\n'
    '-- THIS CODE WAS GENERATED BY SEGMENTS-PROVIDER SERVICE\n'
    ';\n'
    'COMMIT;\n'
    f'INSERT INTO `{_TAG_NAMES_PATH}` WITH TRUNCATE SELECT DISTINCT tag FROM '
    f'`{_SNAPSHOT_PATH}`;\n'
    ';\n'
    f'INSERT INTO `{_ENTITY_TYPES_PATH}` '
    f'WITH TRUNCATE SELECT DISTINCT entity_type FROM `{_SNAPSHOT_PATH}`;\n'
    ';\n'
    f'INSERT INTO `{_APPEND_PATH}` '
    'WITH TRUNCATE SELECT a.tag AS tag, a.entity_value AS '
    'entity_value, a.entity_type AS entity_type, (WeakField(a.ttl, '
    'string) ?? \'infinity\') AS ttl FROM '
    f'`{_SNAPSHOT_PATH}` '
    'AS a LEFT ONLY JOIN `//old_snapshot_path` AS b ON a.tag = b.tag '
    'AND a.entity_value = b.entity_value AND a.entity_type = '
    'b.entity_type AND (WeakField(a.ttl, string) ?? \'infinity\') = '
    '(WeakField(b.ttl, string) ?? \'infinity\');\n'
    ';\n'
    f'INSERT INTO `{_REMOVE_PATH}` '
    'WITH TRUNCATE SELECT a.tag AS tag, a.entity_value AS '
    'entity_value, a.entity_type AS entity_type FROM '
    '`//old_snapshot_path` AS a LEFT ONLY JOIN '
    f'`{_SNAPSHOT_PATH}` '
    'AS b ON a.tag = b.tag AND a.entity_value = b.entity_value AND '
    'a.entity_type = b.entity_type;\n'
    ';\n'
)


class ExpectedErrorType(enum.Enum):
    NO_ERROR = 'no_error'
    WORKER_ERROR = 'worker_error'
    FAILED_LAUNCH = 'failed_launch'


@pytest.mark.now(_NOW.isoformat())
@pytest.mark.config(
    SEGMENTS_PROVIDER_YQL_WORKER_SETTINGS={'is_enabled': True},
    TAGS_YQL_EXTRA_MAINTAINERS={'logins': ['test_maintainer']},
)
@pytest.mark.pgsql(
    'segments_provider',
    queries=[
        shipment_tools.get_shipment_insert_query(
            'tags',
            shipment_tools.DbShipment(
                name='shipment_name',
                ticket='A-1',
                maintainers=['loginef'],
                is_enabled=True,
                labels=[],
                schedule=shipment_tools.Schedule(
                    _NOW, shipment_tools.UnitOfTime.SECONDS, 60,
                ),
                source=shipment_tools.YqlQuery(
                    shipment_tools.YqlSyntax.SQLv1,
                    '[_INSERT_HERE_]SELECT 1 FROM [_LAST_RUN_RESULT_];',
                ),
                consumer=shipment_tools.TagsConsumerSettings(
                    allowed_tag_names=['tag1'], entity_type='udid',
                ),
                created_at=_NOW,
                updated_at=_NOW,
                status=shipment_tools.Status.RUNNING,
            ),
        ),
        launch_tools.get_launch_insert_query(
            'tags',
            'shipment_name',
            launch_tools.Launch(
                uuid=_CURRENT_LAUNCH_UUID,
                started_at=_NOW,
                is_failed=False,
                status='executing_source',
                errors=[],
                snapshot_status='preparing',
                record_counts=None,
            ),
        ),
        yql_tools.get_insert_yql_task_query(
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='new',
                started_at=_NOW,
                error_messages=[],
            ),
        ),
    ],
)
@pytest.mark.parametrize(
    'fail_yql_call, expected_error, expected_error_message, expect_yql_call, '
    'expected_query_text',
    [
        pytest.param(
            False,
            ExpectedErrorType.NO_ERROR,
            None,
            True,
            _YQL_TEXT_1,
            id='simple_query_first_snapshot_first_run',
        ),
        pytest.param(
            False,
            ExpectedErrorType.NO_ERROR,
            None,
            True,
            _YQL_TEXT_1,
            marks=[
                pytest.mark.pgsql(
                    'segments_provider',
                    queries=[
                        launch_tools.get_launch_insert_query(
                            'tags',
                            'shipment_name',
                            launch_tools.Launch(
                                uuid=_PREV_LAUNCH_UUID,
                                started_at=_NOW_MINUS_5_MIN,
                                is_failed=True,
                                status='finished',
                                errors=[],
                                snapshot_status='outdated',
                                record_counts=None,
                            ),
                        ),
                    ],
                ),
            ],
            id='simple_query_first_snapshot_second_run',
        ),
        pytest.param(
            False,
            ExpectedErrorType.NO_ERROR,
            None,
            True,
            _YQL_TEXT_2,
            marks=[
                pytest.mark.pgsql(
                    'segments_provider',
                    queries=[
                        launch_tools.get_launch_insert_query(
                            'tags',
                            'shipment_name',
                            launch_tools.Launch(
                                uuid=_PREV_LAUNCH_UUID,
                                started_at=_NOW_MINUS_5_MIN,
                                is_failed=False,
                                status='finished',
                                errors=[],
                                snapshot_status='fully_applied',
                                record_counts=None,
                            ),
                        ),
                        yt_tools.get_insert_yt_table_query(
                            yt_tools.YtTable(
                                _PREV_LAUNCH_UUID,
                                'snapshot',
                                '//old_snapshot_path',
                                'persistent',
                                False,
                            ),
                        ),
                    ],
                ),
            ],
            id='simple_query_second_snapshot',
        ),
        pytest.param(
            False,
            ExpectedErrorType.NO_ERROR,
            None,
            True,
            _YQL_TEXT_1,
            marks=[
                pytest.mark.pgsql(
                    'segments_provider',
                    queries=[
                        launch_tools.get_launch_insert_query(
                            'tags',
                            'shipment_name',
                            launch_tools.Launch(
                                uuid=_PREV_LAUNCH_UUID,
                                started_at=_NOW_MINUS_5_MIN,
                                is_failed=False,
                                status='finished',
                                errors=[],
                                snapshot_status='outdated',
                                record_counts=None,
                            ),
                        ),
                        yt_tools.get_insert_yt_table_query(
                            yt_tools.YtTable(
                                _PREV_LAUNCH_UUID,
                                'snapshot',
                                '//old_snapshot_path',
                                'persistent',
                                False,
                            ),
                        ),
                    ],
                ),
            ],
            id='simple_query_second_snapshot_after_reenabling',
        ),
        pytest.param(
            False,
            ExpectedErrorType.FAILED_LAUNCH,
            'Failed to transform query: '
            'Query doesn\'t contain placeholder [_INSERT_HERE_]',
            False,
            None,
            marks=[
                pytest.mark.pgsql(
                    'segments_provider',
                    queries=[
                        launch_tools.get_launch_insert_query(
                            'tags',
                            'shipment_name',
                            launch_tools.Launch(
                                uuid=_PREV_LAUNCH_UUID,
                                started_at=_NOW_MINUS_5_MIN,
                                is_failed=False,
                                status='finished',
                                errors=[],
                                snapshot_status='prepared',
                                record_counts=None,
                            ),
                        ),
                        shipment_tools.get_update_yql_query(
                            'tags',
                            'shipment_name',
                            shipment_tools.YqlQuery(
                                syntax=shipment_tools.YqlSyntax.SQLv1,
                                query='no_insert_here',
                            ),
                        ),
                    ],
                ),
            ],
            id='transformation_error',
        ),
        pytest.param(
            True,
            ExpectedErrorType.WORKER_ERROR,
            None,
            True,
            _YQL_TEXT_2,
            marks=[
                pytest.mark.pgsql(
                    'segments_provider',
                    queries=[
                        launch_tools.get_launch_insert_query(
                            'tags',
                            'shipment_name',
                            launch_tools.Launch(
                                uuid=_PREV_LAUNCH_UUID,
                                started_at=_NOW_MINUS_5_MIN,
                                is_failed=False,
                                status='finished',
                                errors=[],
                                snapshot_status='fully_applied',
                                record_counts=None,
                            ),
                        ),
                        yt_tools.get_insert_yt_table_query(
                            yt_tools.YtTable(
                                _PREV_LAUNCH_UUID,
                                'snapshot',
                                '//old_snapshot_path',
                                'persistent',
                                False,
                            ),
                        ),
                    ],
                ),
            ],
            id='yql_http_error',
        ),
    ],
)
async def test_yql_task_new(
        taxi_segments_provider,
        taxi_segments_provider_monitor,
        testpoint,
        mockserver,
        pgsql,
        fail_yql_call: bool,
        expected_error: ExpectedErrorType,
        expected_error_message: Optional[str],
        expect_yql_call: bool,
        expected_query_text: Optional[str],
):
    @mockserver.json_handler('/yql/api/v2/operations')
    def v2_operations(request):
        if fail_yql_call:
            raise mockserver.TimeoutError()

        response_yql = (
            '{{"id": "operation_id_{}", "status":' '"IDLE"}}'
        ).format(v2_operations.times_called)
        return mockserver.make_response(response_yql, 200)

    testpoint_handler = common_tools.WorkerTestpointWithMetrics(
        testpoint, taxi_segments_provider_monitor, 'yql-runner',
    )

    async with taxi_segments_provider.spawn_task('yql-runner'):
        await testpoint_handler.worker_finished.wait_call()

    assert v2_operations.has_calls == expect_yql_call
    if expect_yql_call:
        prepare_operation_request = v2_operations.next_call()['request']
        assert prepare_operation_request.json == {
            'action': 'SAVE',
            'content': expected_query_text,
            'type': 'SQLv1',
            'acl': {
                'canRead': ['test_maintainer', 'loginef'],
                'canUpdate': ['test_maintainer', 'loginef'],
            },
        }

    yql_task = yql_tools.find_yql_task(pgsql, _CURRENT_LAUNCH_UUID)
    yt_tables = yt_tools.find_yt_tables(pgsql, _CURRENT_LAUNCH_UUID)

    if expected_error == ExpectedErrorType.NO_ERROR:
        assert yql_task == yql_tools.YqlTask(
            launch_uuid=_CURRENT_LAUNCH_UUID,
            status='running',
            started_at=_NOW,
            error_messages=[],
            operation_id='operation_id_0',
            operation_started_at=_NOW,
        )

        assert yt_tables == [
            _APPEND_TABLE,
            _ENTITY_TYPES_TABLE,
            _REMOVE_TABLE,
            _SNAPSHOT_TABLE,
            _TAG_NAMES_TABLE,
        ]
    elif expected_error == ExpectedErrorType.FAILED_LAUNCH:
        assert expected_error_message
        assert yql_task == yql_tools.YqlTask(
            launch_uuid=_CURRENT_LAUNCH_UUID,
            status='finished',
            started_at=_NOW,
            error_messages=[expected_error_message],
            operation_id=None,
            operation_started_at=None,
            is_failed=True,
        )
        assert yt_tables == []
    else:
        assert yql_task == yql_tools.YqlTask(
            launch_uuid=_CURRENT_LAUNCH_UUID,
            status='new',
            started_at=_NOW,
            error_messages=[],
            operation_id=None,
            operation_started_at=None,
            is_failed=False,
        )
        assert yt_tables == []

    assert testpoint_handler.metrics == {
        'processed-tasks': {
            'no-error': (
                0 if expected_error == ExpectedErrorType.WORKER_ERROR else 1
            ),
            'with-error': (
                1 if expected_error == ExpectedErrorType.WORKER_ERROR else 0
            ),
        },
    }


@pytest.mark.now(_NOW.isoformat())
@pytest.mark.config(SEGMENTS_PROVIDER_YQL_WORKER_SETTINGS={'is_enabled': True})
@pytest.mark.pgsql(
    'segments_provider',
    queries=[
        shipment_tools.get_shipment_insert_query(
            'tags',
            shipment_tools.DbShipment(
                name='shipment_name',
                ticket='A-1',
                maintainers=['loginef'],
                is_enabled=True,
                labels=[],
                schedule=shipment_tools.Schedule(
                    _NOW, shipment_tools.UnitOfTime.SECONDS, 60,
                ),
                source=shipment_tools.YqlQuery(
                    shipment_tools.YqlSyntax.SQLv1, '[_INSERT_HERE_]SELECT 1;',
                ),
                consumer=shipment_tools.TagsConsumerSettings(
                    allowed_tag_names=['tag1'], entity_type='udid',
                ),
                created_at=_NOW,
                updated_at=_NOW,
                status=shipment_tools.Status.RUNNING,
            ),
        ),
        launch_tools.get_launch_insert_query(
            'tags',
            'shipment_name',
            launch_tools.Launch(
                uuid=_CURRENT_LAUNCH_UUID,
                started_at=_NOW,
                is_failed=False,
                status='executing_source',
                errors=[],
                snapshot_status='preparing',
                record_counts=None,
            ),
        ),
        yql_tools.get_insert_yql_task_query(
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='running',
                started_at=_NOW,
                error_messages=[],
                operation_id='operation_id_0',
                operation_started_at=_NOW,
            ),
        ),
        yt_tools.get_insert_yt_table_query(_APPEND_TABLE),
        yt_tools.get_insert_yt_table_query(_ENTITY_TYPES_TABLE),
        yt_tools.get_insert_yt_table_query(_REMOVE_TABLE),
        yt_tools.get_insert_yt_table_query(_SNAPSHOT_TABLE),
        yt_tools.get_insert_yt_table_query(_TAG_NAMES_TABLE),
    ],
)
@pytest.mark.parametrize(
    'yql_results_response, expected_yql_task',
    [
        pytest.param(
            {
                'id': 'operation_id_0',
                'username': 'loginef',
                'status': 'COMPLETED',
            },
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='finished',
                started_at=_NOW,
                is_failed=False,
                error_messages=[],
                operation_id='operation_id_0',
                operation_started_at=_NOW,
            ),
            id='completed',
        ),
        pytest.param(
            {
                'id': 'operation_id_0',
                'username': 'loginef',
                'status': 'RUNNING',
            },
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='running',
                started_at=_NOW,
                is_failed=False,
                error_messages=[],
                operation_id='operation_id_0',
                operation_started_at=_NOW,
            ),
            id='running',
        ),
        pytest.param(
            {
                'id': 'operation_id_0',
                'username': 'loginef',
                'status': 'PENDING',
            },
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='running',
                started_at=_NOW,
                is_failed=False,
                error_messages=[],
                operation_id='operation_id_0',
                operation_started_at=_NOW,
            ),
            id='pending',
        ),
        pytest.param(
            {
                'id': 'operation_id_0',
                'username': 'loginef',
                'status': 'ABORTING',
            },
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='running',
                started_at=_NOW,
                is_failed=False,
                error_messages=[],
                operation_id='operation_id_0',
                operation_started_at=_NOW,
            ),
            id='aborting',
        ),
        pytest.param(
            {
                'id': 'operation_id_0',
                'username': 'loginef',
                'status': 'ERROR',
                'issues': [
                    {
                        'code': 1030,
                        'column': 0,
                        'file': '<main>',
                        'issues': [
                            {
                                'code': 0,
                                'column': 1,
                                'file': '<main>',
                                'issues': [
                                    {
                                        'code': 3004,
                                        'column': 1,
                                        'file': '<main>',
                                        'issues': [],
                                        'message': (
                                            'Root cause error: '
                                            'last token was <append=false>'
                                        ),
                                        'row': 3,
                                        'severity': 'S_ERROR',
                                    },
                                ],
                                'message': 'Error message',
                                'row': 3,
                                'severity': 'S_ERROR',
                            },
                        ],
                        'message': 'Error message',
                    },
                ],
            },
            yql_tools.YqlTask(
                launch_uuid=_CURRENT_LAUNCH_UUID,
                status='finished',
                started_at=_NOW,
                is_failed=True,
                error_messages=[
                    'Root cause error: last token was <append=false>',
                ],
                operation_id='operation_id_0',
                operation_started_at=_NOW,
            ),
            id='error',
        ),
    ],
)
async def test_yql_task_running(
        taxi_segments_provider,
        testpoint,
        mockserver,
        pgsql,
        yql_results_response: Dict[str, Any],
        expected_yql_task: yql_tools.YqlTask,
):
    @testpoint('yql-runner-finished')
    def yql_runner_finished(data):
        pass

    @mockserver.json_handler('/yql/api/v2/operations/operation_id_0/results')
    def v2_operations(request):
        return yql_results_response

    async with taxi_segments_provider.spawn_task('yql-runner'):
        await yql_runner_finished.wait_call()

    assert v2_operations.has_calls

    yql_task = yql_tools.find_yql_task(pgsql, _CURRENT_LAUNCH_UUID)
    assert yql_task == expected_yql_task
