import pytest

from taxi.clients import support_chat

from taxi_protocol import chat_types
from taxi_protocol import config


YANDEX_UID_HEADER = 'X-Yandex-UID'
USER_ID_HEADER = 'X-YaTaxi-UserId'
FLAGS_HEADER = 'X-YTX-Pass-Flags'
USER_HEADER = 'X-YaTaxi-User'
LAVKA_STORAGE_HEADER = 'X-Taxi-Storage-Id'
WEBSITE_SESSION_HEADER = 'X-Eats-Session'
RESTAPP_HEADER = 'X-YaEda-PartnerId'

USER_ID = 'user_id'
PHONE_ID = 'phone_id'
YANDEX_UID = 'yandex_uid'
EATS_USER_UID = 'eats_user_id'
LAVKA_STORAGE_ID = 'lavka_storage_id'
WEBSITE_USER_ID = 'website_user_id'
RESTAPP_PARTNER_ID = 'restapp_partner_id'

YANDEX_HELP_APPLICATION = 'help_yandex'
LABS_ADMIN_YANDEX_APPLICATION = 'labs_admin_yandex'
NATIVE_EATS_APPLICATION = 'eats_app'
SCOUTS_APPLICATION = 'scouts_app'
LAVKA_STORAGE_APPLICATION = 'lavka_storages_app'
WEBSITE_APPLICATION = 'website'
RESTAPP_APPLICATION = 'restapp'
MARKET_APPLICATION = 'market_app'

SUPPORT_CHAT_PREFIX = 'support_chat'
LABS_PREFIX = 'lab/support_chat'

HANDLER_TYPE_REGULAR = 'regular'
HANDLER_TYPE_REALTIME = 'realtime'

HANDLER_SERVICE_TAXI = 'taxi'
HANDLER_SAFETY_CENTER = 'safety_center'
HANDLER_SERVICE_EATS = 'eats'
HANDLER_SERVICE_EATS_APP = 'eats_app'
HANDLER_SERVICE_HELP_YANDEX = 'help_yandex_ru'
HANDLER_SERVICE_LABS_ADMIN_YANDEX = 'labs_admin_yandex_ru'
HANDLER_SERVICE_DRIVE = 'drive'
HANDLER_SERVICE_SCOUTS = 'scouts'
HANDLER_SERVICE_LAVKA_STORAGE = 'lavka_storages'
HANDLER_SERVICE_WEBSITE = 'website'
HANDLER_SERVICE_RESTAPP = 'restapp'
HANDLER_SERVICE_MARKET = 'market'

ALLOWED_HANDLER_SERVICES = [
    HANDLER_SERVICE_TAXI,
    HANDLER_SERVICE_EATS,
    HANDLER_SERVICE_EATS_APP,
    HANDLER_SAFETY_CENTER,
    HANDLER_SERVICE_HELP_YANDEX,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX,
    HANDLER_SERVICE_DRIVE,
    HANDLER_SERVICE_SCOUTS,
    HANDLER_SERVICE_LAVKA_STORAGE,
    HANDLER_SERVICE_WEBSITE,
    HANDLER_SERVICE_RESTAPP,
    HANDLER_SERVICE_MARKET,
]

SERVICE_PREFIX_MAPPING = {
    HANDLER_SERVICE_TAXI: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_EATS: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_EATS_APP: SUPPORT_CHAT_PREFIX,
    HANDLER_SAFETY_CENTER: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_HELP_YANDEX: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: LABS_PREFIX,
    HANDLER_SERVICE_DRIVE: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_SCOUTS: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_LAVKA_STORAGE: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_WEBSITE: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_RESTAPP: SUPPORT_CHAT_PREFIX,
    HANDLER_SERVICE_MARKET: SUPPORT_CHAT_PREFIX,
}

SERVICES_WITHOUT_USER = [
    HANDLER_SERVICE_HELP_YANDEX,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX,
    HANDLER_SERVICE_EATS_APP,
    HANDLER_SERVICE_SCOUTS,
    HANDLER_SERVICE_LAVKA_STORAGE,
    HANDLER_SERVICE_WEBSITE,
    HANDLER_SERVICE_RESTAPP,
    HANDLER_SERVICE_MARKET,
]

HEADER_TO_AUTH_FIELD = {
    YANDEX_UID_HEADER: YANDEX_UID,
    USER_ID_HEADER: USER_ID,
    USER_HEADER: EATS_USER_UID,
    LAVKA_STORAGE_HEADER: LAVKA_STORAGE_ID,
    WEBSITE_SESSION_HEADER: WEBSITE_USER_ID,
    RESTAPP_HEADER: RESTAPP_PARTNER_ID,
}
SERVICE_AUTH_HEADER_NAME = {
    HANDLER_SERVICE_EATS: USER_ID_HEADER,
    HANDLER_SERVICE_EATS_APP: USER_HEADER,
    HANDLER_SERVICE_TAXI: USER_ID_HEADER,
    HANDLER_SAFETY_CENTER: USER_ID_HEADER,
    HANDLER_SERVICE_HELP_YANDEX: YANDEX_UID_HEADER,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: YANDEX_UID_HEADER,
    HANDLER_SERVICE_DRIVE: YANDEX_UID_HEADER,
    HANDLER_SERVICE_SCOUTS: YANDEX_UID_HEADER,
    HANDLER_SERVICE_LAVKA_STORAGE: LAVKA_STORAGE_HEADER,
    HANDLER_SERVICE_WEBSITE: WEBSITE_SESSION_HEADER,
    HANDLER_SERVICE_RESTAPP: RESTAPP_HEADER,
    HANDLER_SERVICE_MARKET: YANDEX_UID_HEADER,
}

SERVICE_OWNER_IDENTIFIER = {
    HANDLER_SERVICE_EATS: YANDEX_UID,
    HANDLER_SERVICE_EATS_APP: EATS_USER_UID,
    HANDLER_SERVICE_TAXI: PHONE_ID,
    HANDLER_SAFETY_CENTER: YANDEX_UID,
    HANDLER_SERVICE_HELP_YANDEX: YANDEX_UID,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: YANDEX_UID,
    HANDLER_SERVICE_DRIVE: YANDEX_UID,
    HANDLER_SERVICE_SCOUTS: YANDEX_UID,
    HANDLER_SERVICE_LAVKA_STORAGE: LAVKA_STORAGE_ID,
    HANDLER_SERVICE_WEBSITE: WEBSITE_USER_ID,
    HANDLER_SERVICE_RESTAPP: RESTAPP_PARTNER_ID,
    HANDLER_SERVICE_MARKET: YANDEX_UID,
}

SERVICE_OWNER_ROLE = {
    HANDLER_SERVICE_EATS: support_chat.SENDER_ROLE_EATS_CLIENT,
    HANDLER_SERVICE_EATS_APP: (support_chat.SENDER_ROLE_EATS_APP_CLIENT),
    HANDLER_SERVICE_TAXI: support_chat.SENDER_ROLE_CLIENT,
    HANDLER_SAFETY_CENTER: support_chat.SAFETY_CENTER_CLIENT_ROLE,
    HANDLER_SERVICE_HELP_YANDEX: support_chat.HELP_YANDEX_CLIENT,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: (support_chat.LABS_ADMIN_YANDEX_CLIENT),
    HANDLER_SERVICE_DRIVE: (support_chat.SENDER_ROLE_CARSHARING_CLIENT),
    HANDLER_SERVICE_SCOUTS: support_chat.SENDER_ROLE_SCOUTS_CLIENT,
    HANDLER_SERVICE_LAVKA_STORAGE: (
        support_chat.SENDER_ROLE_LAVKA_STORAGES_CLIENT
    ),
    HANDLER_SERVICE_WEBSITE: support_chat.SENDER_ROLE_WEBSITE_CLIENT,
    HANDLER_SERVICE_RESTAPP: support_chat.SENDER_ROLE_RESTAPP_CLIENT,
    HANDLER_SERVICE_MARKET: support_chat.SENDER_ROLE_MARKET_CLIENT,
}

SERVICE_HANDLER_TYPE = {
    HANDLER_SERVICE_EATS: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_EATS_APP: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_TAXI: HANDLER_TYPE_REGULAR,
    HANDLER_SAFETY_CENTER: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_HELP_YANDEX: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_DRIVE: HANDLER_TYPE_REGULAR,
    HANDLER_SERVICE_SCOUTS: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_LAVKA_STORAGE: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_WEBSITE: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_RESTAPP: HANDLER_TYPE_REALTIME,
    HANDLER_SERVICE_MARKET: HANDLER_TYPE_REALTIME,
}

SERVICE_APPLICATION_MAPPING = {
    HANDLER_SERVICE_HELP_YANDEX: YANDEX_HELP_APPLICATION,
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: LABS_ADMIN_YANDEX_APPLICATION,
    HANDLER_SERVICE_EATS_APP: NATIVE_EATS_APPLICATION,
    HANDLER_SERVICE_SCOUTS: SCOUTS_APPLICATION,
    HANDLER_SERVICE_LAVKA_STORAGE: LAVKA_STORAGE_APPLICATION,
    HANDLER_SERVICE_WEBSITE: WEBSITE_APPLICATION,
    HANDLER_SERVICE_RESTAPP: RESTAPP_APPLICATION,
    HANDLER_SERVICE_MARKET: MARKET_APPLICATION,
}

SERVICE_APPLICATION_VERSION_MAPPING = {
    HANDLER_SERVICE_HELP_YANDEX: '0.0',
    HANDLER_SERVICE_LABS_ADMIN_YANDEX: '0.0',
    HANDLER_SERVICE_EATS_APP: '0.0',
    HANDLER_SERVICE_SCOUTS: '0.0',
    HANDLER_SERVICE_LAVKA_STORAGE: '0.0',
    HANDLER_SERVICE_WEBSITE: '0.0',
    HANDLER_SERVICE_RESTAPP: '0.0',
    HANDLER_SERVICE_MARKET: '0.0',
}


@pytest.mark.parametrize('service', SERVICE_PREFIX_MAPPING.keys())
def test_prefixes(service):
    prefix = chat_types.get_service_prefix(service)
    assert SERVICE_PREFIX_MAPPING[service] == prefix


@pytest.mark.parametrize('service', ALLOWED_HANDLER_SERVICES)
def test_without_taxi_user(service):
    conf = config.Config()
    service_without_user = chat_types.is_service_without_taxi_user(
        service, conf,
    )
    assert (service in SERVICES_WITHOUT_USER) == service_without_user


@pytest.mark.parametrize('service', ALLOWED_HANDLER_SERVICES)
def test_allowed_handlers(service):
    conf = config.Config()
    assert chat_types.is_allowed_handler_service(service, conf)


@pytest.mark.parametrize(
    'service',
    [
        'driver',
        'selfreg_driver',
        'facebook',
        'sms',
        'opteum',
        'corp_cabinet',
        'google_play',
    ],
)
def test_not_allowed_handlers(service):
    conf = config.Config()
    assert not chat_types.is_allowed_handler_service(service, conf)


@pytest.mark.parametrize('service', ALLOWED_HANDLER_SERVICES)
def test_auth_fields(service):
    conf = config.Config()
    header_name, auth_key = chat_types.get_auth_fields(service, conf)
    assert SERVICE_AUTH_HEADER_NAME.get(service) == header_name
    assert HEADER_TO_AUTH_FIELD.get(header_name) == auth_key


@pytest.mark.parametrize('service', ALLOWED_HANDLER_SERVICES)
def test_owner(service):
    conf = config.Config()
    owner_role = chat_types.get_client_role(service, conf)
    owner_identifier = chat_types.get_owner_identifier(service, conf)

    assert SERVICE_OWNER_ROLE[service] == owner_role
    assert SERVICE_OWNER_IDENTIFIER[service] == owner_identifier


@pytest.mark.parametrize('service', SERVICES_WITHOUT_USER)
def test_service_application(service):
    conf = config.Config()
    app = chat_types.get_service_application(service, conf)
    app_name = SERVICE_APPLICATION_MAPPING[service]
    app_version = SERVICE_APPLICATION_VERSION_MAPPING[service]
    assert app_name == app['application']
    assert app_version == app['application_version']
