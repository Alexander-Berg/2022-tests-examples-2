import pytest

from test_workforce_management_bot import conftest
from test_workforce_management_bot import data
from workforce_management_bot.commands import commands
from workforce_management_bot.commands import utils


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.config(
    WORKFORCE_MANAGEMENT_BOT_EMOJIES={
        'emoji_sad': 'pensive face',
        'emoji_heart': 'heavy black heart',
        'emoji_calendar': 'calendar',
        'emoji_coffee': 'hot beverage',
        'emoji_lunch': 'fork and knife',
    },
)
@pytest.mark.parametrize(
    'tst_request, wfm_status, wfm_data, expected_answer',
    [
        (
            {
                'message': {
                    'chat': {'id': 1},
                    'from': {'username': 'roma'},
                    'text': '/start',
                },
            },
            200,
            None,
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞—é –º–µ–Ω—é ‚ù§!',
        ),
        (
            {
                'message': {
                    'chat': {'id': 1},
                    'from': {'username': 'roma'},
                    'text': '/start',
                },
            },
            404,
            None,
            None,
        ),
        (
            {
                'message': {
                    'chat': {'id': 1},
                    'from': {'username': 'roma'},
                    'text': 'random text',
                },
            },
            200,
            None,
            None,
        ),
        (
            {
                'message': {
                    'chat': {'id': 1},
                    'from': {'username': 'roma'},
                    'text': '/start',
                },
            },
            500,
            {
                'code': 'too_many_operators',
                'message': '',
                'details': {
                    'matched_operators': [
                        {'yandex_uid': 'uid1', 'domain': 'taxi'},
                        {'yandex_uid': 'uid1', 'domain': 'eats'},
                    ],
                },
            },
            '–ö —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –ø—Ä–∏–≤—è–∑–∞–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
        ),
        (
            {
                'message': {
                    'chat': {'id': 1},
                    'from': {'username': 'roma'},
                    'text': '–î–æ–º–µ–Ω eats',
                },
            },
            200,
            None,
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞—é –º–µ–Ω—é ‚ù§!',
        ),
    ],
)
async def test_webhook(
        web_app_client,
        mock_bot_class,
        mock_wfm,
        tst_request,
        wfm_status,
        wfm_data,
        expected_answer,
):
    mock_wfm(
        statuses={conftest.OPERATORS_CHECK: wfm_status},
        bodies={conftest.OPERATORS_CHECK: wfm_data},
    )

    await web_app_client.post('/v1/webhook', json=tst_request)
    send_messages = mock_bot_class.calls['send_message']
    if not expected_answer:
        assert not send_messages
        return

    assert send_messages[0]['kwargs']['text'] == expected_answer


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.config(
    WORKFORCE_MANAGEMENT_BOT_EMOJIES={
        'emoji_sad': 'pensive face',
        'emoji_heart': 'heavy black heart',
        'emoji_calendar': 'calendar',
        'emoji_coffee': 'hot beverage',
        'emoji_lunch': 'fork and knife',
    },
)
async def test_shifts(
        web_app_client, mock_bot_class, mock_wfm, registered_operator,
):
    mock_wfm()
    await web_app_client.post(
        '/v1/webhook',
        json={
            'message': {
                'chat': {'id': 1},
                'from': {'username': 'roma'},
                'text': '—Å–º–µ–Ω—ã',
            },
        },
    )
    assert (
        mock_bot_class.calls['send_message'][0]['kwargs']['text']
        == '–ë–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã: üìÖ –°–º–µ–Ω–∞ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30'
        ' –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ —Å–º–µ–Ω—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: '
        '–•–∏–º–∏–æ—Ç–µ—Ä–∞–ø–∏—è 03 –∞–ø—Ä–µ–ª—è (—Å–±) 23:00 - 04 –∞–ø—Ä–µ–ª—è (–≤—Å) '
        '00:00'
    )


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.parametrize(
    'text, result',
    (
        (
            '\U00002615 –ú–æ–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã',
            '–°–º–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30:'
            ' ‚òï –ü–µ—Ä–µ—Ä—ã–≤ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 08:45 - 09:00',
        ),
        (
            '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –¥–≤–∞ –∫–∏–ª–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤, –∂–µ–ª–µ–∑—è–∫–∞',
            '–°–º–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30:'
            ' ‚òï –ü–µ—Ä–µ—Ä—ã–≤ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 08:45 - 09:00',
        ),
        (
            '–ü–ï–†–ï–†–´–í–´ –ñ–ï',
            '–°–º–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30:'
            ' ‚òï –ü–µ—Ä–µ—Ä—ã–≤ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 08:45 - 09:00',
        ),
    ),
)
@pytest.mark.now('2021-04-01T08:30:40')
@pytest.mark.config(
    WORKFORCE_MANAGEMENT_BOT_EMOJIES={
        'emoji_sad': 'pensive face',
        'emoji_heart': 'heavy black heart',
        'emoji_calendar': 'calendar',
        'emoji_coffee': 'hot beverage',
        'emoji_lunch': 'fork and knife',
    },
)
async def test_breaks(
        web_app_client,
        mock_bot_class,
        mock_wfm,
        registered_operator,
        text,
        result,
):
    mock_wfm()
    await web_app_client.post(
        '/v1/webhook',
        json={
            'message': {
                'chat': {'id': 1},
                'from': {'username': 'roma'},
                'text': text,
            },
        },
    )
    assert mock_bot_class.calls['send_message'][0]['kwargs']['text'] == result


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.now('2021-03-31T08:30:40')
async def test_breaks_next_shift(
        web_app_client, mock_bot_class, mock_wfm, registered_operator,
):
    mock_wfm()

    await web_app_client.post(
        '/v1/webhook',
        json={
            'message': {
                'chat': {'id': 1},
                'from': {'username': 'roma'},
                'text': '\U00002615 –ú–æ–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã',
            },
        },
    )
    assert (
        mock_bot_class.calls['send_message'][0]['kwargs']['text']
        == '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç —Å–º–µ–Ω—ã. '
        '–ë–ª–∏–∂–∞–π—à–∞—è —Å–º–µ–Ω–∞ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30'
    )


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.parametrize(
    'bodies, result',
    [
        pytest.param(
            {
                conftest.ADDITIONAL_SHIFTS_JOBS_VALUES: (
                    data.ADDITIONAL_SHIFTS_JOBS
                ),
            },
            '–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –¥–æ–ø. —Å–º–µ–Ω—ã:',
            id='at_most_one_job_exists',
        ),
        pytest.param(
            {conftest.ADDITIONAL_SHIFTS_JOBS_VALUES: ({'jobs': []})},
            '–í–∞–º –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –¥–æ–ø. —Å–º–µ–Ω—ã',
            id='no_jobs',
        ),
    ],
)
async def test_additional_shift_offers(
        web_app_client,
        mock_bot_class,
        mock_wfm,
        registered_operator,
        bodies,
        result,
):
    mock_wfm(bodies=bodies)

    await web_app_client.post(
        '/v1/webhook',
        json={
            'message': {
                'chat': {'id': 1},
                'from': {'username': 'roma'},
                'text': '\U0001F4C5 –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ–ø. —Å–º–µ–Ω',
            },
        },
    )

    assert mock_bot_class.calls['send_message'][0]['kwargs']['text'] == result


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
async def test_confirm_additional_shift_request(
        web_app_client, mock_bot_class, mock_wfm, registered_operator,
):
    mock_wfm()

    await web_app_client.post(
        '/v1/webhook',
        json={
            'callback_query': {
                'id': '345',
                'data': '{"job_id": 1, "type": "ShiftOfferButtonText"}',
                'from': {'username': 'roma'},
                'message': {
                    'message_id': 1,
                    'chat': {'id': 1},
                    'from': {'username': 'bot'},
                    'text': (
                        '{emoji_calendar} –°–º–µ–Ω–∞ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30'
                    ),
                },
            },
        },
    )

    assert (
        mock_bot_class.calls['edit_message_text'][0]['kwargs']['text']
        == '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –≤ –¥–∞–Ω–Ω—É—é —Å–º–µ–Ω—É?'
    )


@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.parametrize(
    'text, handler_response, handler_status, result',
    [
        pytest.param(
            commands.ACCEPT_TK,
            {},
            200,
            '–î–æ–ø. —Å–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
            id='shift_accept_succeed',
        ),
        pytest.param(
            commands.ACCEPT_TK,
            data.ACCEPT_SHIFT_ERRORS[0],
            404,
            '–¢–∞–∫–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –¥–æ–ø. —Å–º–µ–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω',
            id='candidate_not_found',
        ),
        pytest.param(
            commands.ACCEPT_TK,
            data.ACCEPT_SHIFT_ERRORS[1],
            400,
            '–£ –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å–º–µ–Ω—ã –≤ –ø–µ—Ä–∏–æ–¥ –¥–æ–ø. —Å–º–µ–Ω—ã',
            id='busy_operator',
        ),
        pytest.param(
            commands.ACCEPT_TK,
            data.ACCEPT_SHIFT_ERRORS[2],
            400,
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ø. —Å–º–µ–Ω—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
            id='all_shifts_distributed',
        ),
        pytest.param(
            commands.ACCEPT_TK,
            data.ACCEPT_SHIFT_ERRORS[3],
            400,
            '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã',
            id='breaks_build_failed',
        ),
        pytest.param(
            commands.ACCEPT_TK,
            data.ACCEPT_SHIFT_ERRORS[4],
            500,
            '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            id='server_error',
        ),
        pytest.param(
            commands.REJECT_TK,
            {},
            200,
            '–í–∞—à –≤—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω',
            id='user_pressed_no',
        ),
    ],
)
async def test_confirm_additional_shift(
        web_app_client,
        mock_bot_class,
        mock_wfm,
        registered_operator,
        text,
        handler_response,
        handler_status,
        result,
):
    mock_wfm(
        statuses={conftest.ADDITIONAL_SHIFT_ACCEPT: handler_status},
        bodies={conftest.ADDITIONAL_SHIFT_ACCEPT: handler_response},
    )

    await web_app_client.post(
        '/v1/webhook',
        json={
            'callback_query': {
                'id': '345',
                'from': {'username': 'roma'},
                'message': {
                    'chat': {'id': 1},
                    'from': {'username': 'bot'},
                    'text': text,
                },
                'data': utils.make_callback_data(
                    utils.add_command_to_data({'job_id': 1}, text),
                ),
            },
        },
    )

    assert (
        mock_bot_class.calls['answer_callback_query'][0]['kwargs']['text']
        == result
    )


@pytest.mark.filldb()
@pytest.mark.translations(wfm_backend_tg_bot=data.DEFAULT_TRANSLATION)
@pytest.mark.parametrize(
    'tst_request, wfm_status, wfm_data, expected_answer',
    [
        pytest.param(
            {
                'message': {
                    'chat': {'id': 222},
                    'from': {'username': 'neroma', 'language_code': 'ru'},
                    'text': '—Å–º–µ–Ω—ã',
                },
            },
            200,
            {'yandex_uid': '1234', 'state': 'ready', 'domain': 'taxi'},
            '–ë–ª–∏–∂–∞–π—à–∏–µ —Å–º–µ–Ω—ã:  –°–º–µ–Ω–∞ 01 –∞–ø—Ä–µ–ª—è (—á—Ç) 06:00 - 12:30 –û–±—Ä–∞—Ç–∏ '
            '–≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞ —Å–º–µ–Ω—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: –•–∏–º–∏–æ—Ç–µ—Ä–∞–ø–∏—è 03 –∞–ø—Ä–µ–ª—è (—Å–±) '
            '23:00 - 04 –∞–ø—Ä–µ–ª—è (–≤—Å) 00:00',
            id='locale_is_changed',
        ),
    ],
)
async def test_locale_change(
        web_app_client,
        mock_bot_class,
        mock_wfm,
        tst_request,
        wfm_status,
        wfm_data,
        expected_answer,
        mongodb,
):
    mock_wfm(
        statuses={conftest.OPERATORS_CHECK: wfm_status},
        bodies={conftest.OPERATORS_CHECK: wfm_data},
    )

    await web_app_client.post('/v1/webhook', json=tst_request)
    send_messages = mock_bot_class.calls['send_message']
    if not expected_answer:
        assert not send_messages
        return

    assert send_messages[0]['kwargs']['text'] == expected_answer

    res = mongodb.workforce_management_bot_operators_bounds.find_one(
        {'yandex_uid': '1234'},
    )

    assert res['locale'] == 'ru'
