/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

#include <userver/storages/postgres/component.hpp>

#include <components/adapter_pg_yt.hpp>

#include <handlers/dependencies.hpp>
#include <userver/components/component.hpp>
#include <userver/components/statistics_storage.hpp>
#include <userver/concurrent/background_task_storage.hpp>
#include <userver/dynamic_config/fwd.hpp>
#include <userver/dynamic_config/storage/component.hpp>

namespace handlers {

DependenciesFactory::DependenciesFactory(
    [[maybe_unused]] const components::ComponentConfig& config,
    const components::ComponentContext& context)
    : config_source_(
          context.FindComponent<components::DynamicConfig>().GetSource()),
      metrics_storage_(context.FindComponent<components::StatisticsStorage>()
                           .GetMetricsStorage()),
      bts_(),
      custom_dependencies_(config, context),
      adapter_pg_yt_(
          context.FindComponent<components::adapter_pg_yt::AdapterMaster>())

{
  pg_random_ = context.FindComponent<components::Postgres>("postgresql-random")
                   .GetDatabase();
  pg_random2_ =
      context.FindComponent<components::Postgres>("postgresql-random2")
          .GetDatabase();
}

DependenciesFactory::~DependenciesFactory() { bts_->CancelAndWait(); }

Dependencies DependenciesFactory::GetDependencies() const {
  return Dependencies{
      config_source_.GetSnapshot(),
      metrics_storage_,
      *bts_,
      custom_dependencies_.GetExtra(),
      pg_random_,
      pg_random2_,
      adapter_pg_yt_,
  };
}

}  // namespace handlers
