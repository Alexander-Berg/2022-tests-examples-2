[
  {
    "global_scope": {
      "source_code": "function getPerformer(request) {\n  let k_performer = 'performer';\n  let performer = null;\n  if (Array.isArray(request.subject.linked_subjects)) {\n    for (let i = 0; i < request.subject.linked_subjects.length; i++) {\n      if (request.subject.linked_subjects[i].type === k_performer) {\n        performer = request.subject.linked_subjects[i];\n        break;\n      }\n    }\n  }\n  return performer;\n}\n\nfunction getFactorValue(request) {\n  if (request == undefined) {\n    return null;\n  } else {\n    return request.value;\n  }\n}\n\nfunction getString(request) {\n  if (isNaN(request)) {\n    return null;\n  } else {\n    return request;\n  }\n}\n\nfunction getInt(request) {\n  let value = parseInt(request);\n  if (isNaN(value)) {\n    return null;\n  } else {\n    return value;\n  }\n}\n\nfunction getFloat(request) {\n  let value = parseFloat(request);\n  if (isNaN(value)) {\n    return null;\n  } else {\n    return value;\n  }\n}\n\nfunction getDateTime(request) {\n  let value = Date.parse(request);\n  if (isNaN(value)) {\n    return null;\n  } else {\n    return value;\n  }\n}\nfunction padStr(i) {\n    return (i < 10) ? '0' + i : '' + i;\n}\nfunction timeToString(request, tz = 'UTC') {\n    if (tz === null || tz === '') {\n        tz = 'UTC';\n    }\n    request = new Date(request);\n    var request_tz = new Date(request.toLocaleString('en-US', {timeZone: tz}));\n    var diff = request.getTime() - request_tz.getTime();\n    request = new Date(request.getTime() - diff);\n    \n    let offset = diff / (1000 * 60) + request.getTimezoneOffset();\n    var offset_str = '';\n    if (offset > 0) {\n        offset_str = '-';\n    } else {\n        offset_str = '+';\n        offset = -offset;\n    }\n    offset_str += padStr(Math.floor(offset / 60)) + ':' + padStr(Math.floor(offset % 60));\n\n    var out = padStr(request.getFullYear()) + '-' +\n              padStr(1 + request.getMonth()) + '-' +\n              padStr(request.getDate()) + 'T' +\n              padStr(request.getHours()) + ':' +\n              padStr(request.getMinutes()) + ':' +\n              padStr(request.getSeconds()) + \n              offset_str;\n              \n    return out;\n}\nfunction dateToString(request) {\n  request = new Date(request);\n  return padStr(request.getFullYear()) + '-' +\n         padStr(1 + request.getMonth()) + '-' +\n         padStr(request.getDate());\n}\nfunction dateFromDatetime(request) {\n  request = new Date(request);\n  return new Date(request.getFullYear(), request.getMonth(), request.getDate());\n}\n\nfunction zeros() {\n  var output = {};\n\n  output.success = false;\n  output.courier_id = '';\n  output.shift_id = '';\n  output.region_id = '';\n  output.country_id = '';\n\n  output.fine_thresh_late = 0;\n  output.fine_thresh_early = 0;\n  output.max_missed_time = 0;\n  output.per_hour_guarantee = 0.0;\n\n  output.fine_amount = 0.0;\n  output.fine_explanations = [];\n\n  output.is_guarantee = true;\n  output.is_self_employed = true;\n  output.guarantee_loss_reasons = [];\n\n  output.salary_before_deductions = 0.0;\n  output.salary_missed = 0.0;\n  output.salary_on_hands = 0.0;\n\n  output.planned_start_at = '';\n  output.actual_start_at = '';\n  output.late_start_min = 0.0;\n\n  output.planned_end_at = '';\n  output.actual_end_at = '';\n  output.early_end_min = 0.0;\n\n  output.is_newbie = false;\n  output.fraud_on_start = false;\n\n  output.missed_time = 0;\n\n  output.salary_before_deductions = 0.0;\n  output.salary_on_hands = 0.0;\n  output.salary_missed = 0.0;\n\n  output.courier_name = '';\n  output.region_name = '';\n  output.courier_type = '';\n  output.date = '';\n  output.planned_start_at_local_tz = '';\n  output.actual_start_at_local_tz = '';\n  output.planned_end_at_local_tz = '';\n  output.actual_end_at_local_tz = '';\n  output.offline_time = 0.0;\n  output.count_no_show_shifts = 0;\n  output.missed_hours = 0.0;\n  output.per_km_to_client = 0.0;\n  output.weight_part = 0.0;\n  output.self_employed_tax_sum = 0.0;\n  output.calculation_schema = '';\n  output.orders = [];\n  output.unaccepted_orders = 0;\n  output.pickup_part = 0.0;\n  output.cancelled_dropoff = 0.0;\n  output.delivery_fee = 0.0;\n  output.late_pickup = 0;\n  output.payment_to_cour_service = 0.0;\n  output.number_of_orders = 0;\n  output.number_of_orders_with_fines = 0;\n  output.shift_type = '';\n  output.distance_to_place = 0.0;\n  output.courier_service_name = '';\n  output.per_pickup = 0.0;\n  output.share_offline = 0.0;\n  output.pause_time = 0.0;\n  output.to_rest_payable = 0;\n  output.dropoff_part = 0;\n  output.km_to_client_part = 0.0;\n  output.surge_bonus = 0.0;\n  output.late_dropoff = 0;\n  output.salary_adjustments = 0.0;\n  output.distance_to_customer = 0;\n  output.planned_hours = 0.0;\n  output.actual_hours = 0.0;\n  output.per_surge_order = 0.0;\n  output.long_to_rest_part = 0.0;\n  output.late_return_lavka = 0;\n  output.number_of_multiorders = 0;\n  output.number_of_surged_orders = 0;\n  output.courier_service_commission = 0.0;\n  output.per_dropoff = 0.0;\n  output.per_fraud_status = 0.0;\n  output.min_number_of_orders_for_guarantee = 0;\n  output.number_of_fake_gps_orders = 0;\n  output.tips = 0.0;\n  output.courier_service_id = 0;\n  output.per_long_to_rest = 0.0;\n  output.online_time = 0.0;\n  output.long_to_rest_thresh_m = 0.0;\n  output.pool_name = '';\n  output.number_of_fraud_orders = 0;\n  output.number_of_too_long_in_rest_orders = 0;\n  output.number_of_lavka_orders = 0;\n  output.self_employed_tax_rate = 0;\n  output.cancelled_pickup = 0;\n  output.country_code = '';\n  output.timezone = '';\n  output.guarantee = 0.0;\n  output.km_to_clients = 0.0;\n  output.km_to_rests = 0.0;\n  output.orders_part = 0.0;\n\n  return output;\n}\n\nfunction round(value, p) {\n  return Math.round(value * (10 ** p)) / (10 ** p);\n}\n\nlet sec_to_ms_cf = 1000.0;\nlet min_to_ms_cf = 60.0 * sec_to_ms_cf;\nlet hour_to_ms_cf = 60.0 * min_to_ms_cf;\n"
    },
    "name": "calculate_pickers_salary",
    "stages": [
      {
        "conditions": [],
        "in_bindings": [
          {
            "domain": "input",
            "optional": false,
            "query": {
              "operations": [
                {
                  "property_name": "request"
                }
              ]
            }
          }
        ],
        "name": "calculation",
        "optional": false,
        "out_bindings": [
          {
            "alias": "results",
            "query": "results"
          }
        ],
        "source_code": "var output = { results: zeros()};\n\n// Заполняем стандартные значения\nvar performer = getPerformer(request);\nif (!performer) { return output; }\n\noutput.results.courier_id = getString(performer.external_id);\noutput.results.shift_id = getString(request.subject.external_id);\noutput.results.region_id = getFactorValue(request.subject.factors.eats_region_id);\noutput.results.timezone = getFactorValue(performer.factors.timezone);\nif (output.results.timezone === null) { output.results.timezone = ''; }\n\noutput.results.fine_thresh_late = getInt(request.coefficients_values.fine_thresh_late);\noutput.results.fine_thresh_early = getInt(request.coefficients_values.fine_thresh_early);\noutput.results.max_missed_time = getInt(request.coefficients_values.max_missed_time);\noutput.results.per_hour_guarantee = getFloat(getFactorValue(request.subject.factors.guarantee));\nif (!output.results.per_hour_guarantee) {\n  output.results.per_hour_guarantee = getFloat(request.coefficients_values.per_hour_guarantee);\n}\n\nif (!output.results.fine_thresh_late || !output.results.fine_thresh_early ||\n    !output.results.max_missed_time || !output.results.per_hour_guarantee) {\n  log.error('Not enough ciefficients');\n  return output;\n}\n\nlet planned_start_at = getDateTime(getFactorValue(request.subject.factors.planned_start_at));\noutput.results.planned_start_at = timeToString(planned_start_at);\noutput.results.planned_start_at_local_tz = timeToString(planned_start_at, output.results.timezone);\n\nlet actual_start_at = getDateTime(getFactorValue(request.subject.factors.actual_start_at));\noutput.results.actual_start_at = timeToString(actual_start_at);\noutput.results.actual_start_at_local_tz = timeToString(actual_start_at, output.results.timezone);\n\nlet planned_end_at = getDateTime(getFactorValue(request.subject.factors.planned_end_at));\noutput.results.planned_end_at = timeToString(planned_end_at);\noutput.results.planned_end_at_local_tz = timeToString(planned_end_at, output.results.timezone);\n\nlet actual_end_at = getDateTime(getFactorValue(request.subject.factors.actual_end_at));\noutput.results.actual_end_at = timeToString(actual_end_at);\noutput.results.actual_end_at_local_tz = timeToString(actual_end_at, output.results.timezone);\n\nif (!output.results.planned_end_at_local_tz || !output.results.actual_end_at_local_tz) {\n  output.results.actual_start_at = '';\n  output.results.actual_end_at = '';\n  output.results.actual_start_at_local_tz = '';\n  output.results.actual_end_at_local_tz = '';\n  output.results.is_guarantee = false;\n  output.results.guarantee_loss_reasons.push('missed_shift');\n  log.info('Missed shift');\n} else {\n  // Проверка условия: не опаздывать на слот\n  output.results.late_start_min = Math.max(0, round((actual_start_at - planned_start_at) / min_to_ms_cf, 2));\n  if (output.results.late_start_min >= output.results.fine_thresh_late) {\n    output.results.is_guarantee = false;\n    output.results.guarantee_loss_reasons.push('shift_late');\n  }\n\n  // Проверка условия: не уходить со слота раньше\n  output.results.early_end_min = Math.max(0, round((planned_end_at - actual_end_at) / min_to_ms_cf, 2));\n  if (output.results.early_end_min >= output.results.fine_thresh_early) {\n    output.results.is_guarantee = false;\n    output.results.guarantee_loss_reasons.push('shift_early');\n  }\n\n  // Проверка условия: не использовать Fake GPS при старте слота (кроме новичков)\n  output.results.is_newbie = getFactorValue(request.subject.factors.is_newbie) > 0;\n  output.results.fraud_on_start = getFactorValue(request.subject.factors.fraud_on_start) > 0;\n  if (output.results.fraud_on_start && !output.results.is_newbie) {\n    output.results.is_guarantee = false;\n    output.results.guarantee_loss_reasons.push('shift_fraud');\n  }\n}\n\n// Проверка условия: общее пропущенное время не больше max_missed_time (кроме новичков)\noutput.results.missed_time = getFloat(getFactorValue(request.subject.factors.missed_time));\nif (output.results.missed_time >= output.results.max_missed_time && !output.results.is_newbie) {\n  output.results.fine_amount += round(output.results.per_hour_guarantee * (output.results.missed_time / 60.0), 2);\n  output.results.fine_explanations.push({'reason': 'shift_missed_time', 'fine': 0});\n}\n\n// Подводим итоги\noutput.results.salary_before_deductions = Math.max(round((planned_end_at - planned_start_at) / hour_to_ms_cf, 2) * output.results.per_hour_guarantee, 0.0);\nif (output.results.is_guarantee) {\n  output.results.salary_on_hands = output.results.salary_before_deductions;\n}\noutput.results.salary_missed = output.results.salary_before_deductions - output.results.salary_on_hands;\n\noutput.results.courier_name = getFactorValue(performer.factors.username);\noutput.results.date = dateToString(dateFromDatetime(planned_start_at));\noutput.results.courier_type = getFactorValue(request.subject.factors.travel_type);\noutput.results.post = getFactorValue(request.subject.factors.post);\noutput.results.missed_hours = round(output.results.missed_time / 60.0, 2);\noutput.results.shift_type = getFactorValue(request.subject.factors.type);\nif (!output.results.shift_type) {\n  output.results.shift_type = '';\n}\noutput.results.planned_hours = round((planned_end_at - planned_start_at) / hour_to_ms_cf, 2);\noutput.results.actual_hours = round((actual_end_at - actual_start_at) / hour_to_ms_cf, 2);\noutput.results.pool_name = getFactorValue(performer.factors.pool);\noutput.results.success = true;\n\nreturn output;"
      }
    ]
  }
]
