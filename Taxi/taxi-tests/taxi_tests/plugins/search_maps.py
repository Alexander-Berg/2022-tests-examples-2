"""
This module represents reverse geosearch controller. In general, idea is that
all of the data generated by this module, and a mock located in mock-server
does a very simple pattern-matching.

GeoSearch module is used in the following scenarios (the list is not
full and should be updated periodically):
 - order draft: TranslateRoutePoint,
 - order draft: ExtractRoute -> DetectExact.

`register_company` is a most generic function, for registering a company in the
    geosearch. It adds the company to the (geo,biz) dictionary and for reverse
    geosearch.

"""

import random

import pytest

from taxi_tests.utils import log_requests


SEARCH_MAPS_HOST = 'http://addrs.yandex.net'
SUPPORTED_LANGS = ['ru', 'en']
CITIES = [
    {
        'tlbr': [[0.0, 0.0], [90.0, 90.0]],
        'CountryName': dict(zip(SUPPORTED_LANGS, ['Россия', 'Russia'])),
        'AdministrativeArea': dict(zip(SUPPORTED_LANGS, ['Москва', 'Moscow'])),
    },
]


class Company:
    def __init__(self, coordinates, text, name='', address=''):
        self._oid = str(random.randrange(0, 10 ** 9))
        self._coordinates = coordinates
        self._text = text
        self._city = Company.get_city_by_coordinates(coordinates)
        self._address = address
        self._name = name

    def geo_object(self, lang):
        country_name = self._city['CountryName'][lang]
        city_name = self._city['AdministrativeArea'][lang]
        data = {
            'business': {
                'name': self._name,
                'id': self._oid,
                'address': {
                    'formatted_address': self._address,
                    'country': country_name,
                    'locality': city_name,
                },
            },
            'geometry': self._coordinates,
        }
        return data

    @property
    def obj(self):
        return {
            'short_text': 'short_text',
            'description': 'description',
            'use_geopoint': True,
            'exact': True,
            'thoroughfare': 'thoroughfare',
            'type': 'address',
            'object_type': 'другое',
            'oid': self._oid,
            'premisenumber': 'premisenumber',
            'fullname': 'fullname',
            'country': self.country('ru'),
            'locality': self.city('ru'),
            'geopoint': self.coordinates,
        }

    @property
    def oid(self):
        return self._oid

    @property
    def coordinates(self):
        return list(self._coordinates)

    @property
    def text(self):
        return self._text

    @property
    def name(self):
        return self._name

    @property
    def address(self):
        return self._address

    def country(self, lang):
        return self._city['CountryName'][lang]

    def city(self, lang):
        return self._city['AdministrativeArea'][lang]

    @staticmethod
    def get_city_by_coordinates(coordinates):
        city = [
            c
            for c in CITIES
            if (
                c['tlbr'][0][0] < coordinates[0] < c['tlbr'][1][0]
                and c['tlbr'][0][1] < coordinates[1] < c['tlbr'][1][1]
            )
        ]
        assert len(city) == 1
        return city[0]


class SearchMaps:
    @staticmethod
    def register_company(*args, **kwargs):
        company = Company(*args, **kwargs)
        for lang in SUPPORTED_LANGS:
            response = log_requests.post(
                SEARCH_MAPS_HOST + '/control/register_reverse_geosearch',
                json={
                    'data': company.geo_object(lang),
                    'lang': lang,
                    'type': 'geo,biz',
                    'text': company.text,
                    'name': company.name,
                    'address': company.address,
                },
            )
            response.raise_for_status()

        return company


@pytest.fixture
def search_maps():
    return SearchMaps()
