/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

#include <js-pipeline/generated/consumers.hpp>

#include <js-pipeline/models/serialization/json/schema.hpp>

namespace js_pipeline::generated {

using ProviderBase = fetching::schema::Provider;
using Registry = fetching::schema::ConsumerRegistry<consumers::GlobalTag>;

void RegisterGlobalTestTypedResourceResource() {
  struct ParamsProvider final: public ProviderBase {
    models::SchemaCPtr schema;

    ParamsProvider()
        : schema(formats::json::FromString(R""({
  "additionalProperties": false,
  "properties": {
    "array_self_ref": {
      "additionalProperties": false,
      "properties": {
        "others": {
          "items": {
            "$upstack": 2
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "big_upstack_ref": {
      "additionalProperties": false,
      "properties": {
        "field": {
          "additionalProperties": false,
          "properties": {
            "others": {
              "items": {
                "$upstack": 3
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "dict_self_ref": {
      "additionalProperties": {
        "$upstack": 1
      },
      "type": "object"
    },
    "self_ref": {
      "additionalProperties": false,
      "properties": {
        "next": {
          "$upstack": 1
        }
      },
      "type": "object"
    },
    "type_field": {
      "additionalProperties": false,
      "properties": {
        "field": {
          "additionalProperties": false,
          "properties": {
            "others": {
              "items": {
                "$upstack": 3
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "type": "object"
      },
      "type": "object"
    }
  },
  "type": "object"
})"")
                     .As<models::SchemaCPtr>())
    {}
    models::SchemaCPtr Get() const override { return schema; }
  };

  struct InstanceProvider final: public ProviderBase {
    models::SchemaCPtr schema;

    InstanceProvider()
        : schema(nullptr)
    {}

    models::SchemaCPtr Get() const override { return schema; }
  };

  Registry::Get().RegisterResource("test_typed_resource", std::nullopt,
                                   std::make_unique<ParamsProvider>(),
                                   std::make_unique<InstanceProvider>());
}

}  // namespace js_pipeline::generated
