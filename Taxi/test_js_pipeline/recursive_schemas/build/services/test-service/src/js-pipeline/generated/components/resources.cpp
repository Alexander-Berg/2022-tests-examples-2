/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

#include "resources.hpp"

#include <resources/test_resource/resource.hpp>
#include <resources/test_typed_resource/resource.hpp>

#include <js-pipeline/generated/consumers.hpp>

namespace js_pipeline::generated::components {

namespace {
namespace schema = fetching::schema;
using ResourceSchemas = schema::Registry::ResourceSchemas;

template <typename Consumer>
const ResourceSchemas& Schemas(const std::string& resource_name) {
  return schema::ConsumerRegistry<Consumer>::Get().GetResource(resource_name);
}

}  // namespace

Resources::Resources(const ::components::ComponentConfig& config,
                     const ::components::ComponentContext& context)
    : Base(config, context)
{
  RegisterResource(std::make_unique<resources::test_resource::Resource>(
      context, config,
      ResourceMetadata{
          true,   // is_blocking_fetch
          false,  // is_prefetch_only
          Schemas<consumers::GlobalTag>("test_resource").GetParamsSchema(),
          Schemas<consumers::GlobalTag>("test_resource").GetInstanceSchema(),
      }));
  RegisterResource(std::make_unique<resources::test_typed_resource::Resource>(
      context, config,
      ResourceMetadata{
          true,   // is_blocking_fetch
          false,  // is_prefetch_only
          Schemas<consumers::GlobalTag>("test_typed_resource")
              .GetParamsSchema(),
          Schemas<consumers::GlobalTag>("test_typed_resource")
              .GetInstanceSchema(),
      }));
}
}  // namespace js_pipeline::generated::components
