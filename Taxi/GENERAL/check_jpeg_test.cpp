#include "check_jpeg.hpp"

#include <gtest/gtest.h>
#include <memory>

#include <utils/memory_buffer_file.hpp>

#include <helpers/check_jpeg.hpp>

const std::vector<unsigned char> valid_jpeg = {
    255, 216, 255, 224, 0,   16,  74,  70,  73,  70,  0,   1,   1,   0,   0,
    1,   0,   1,   0,   0,   255, 219, 0,   67,  0,   19,  13,  15,  17,  15,
    12,  19,  17,  16,  17,  22,  21,  19,  23,  29,  48,  31,  29,  27,  27,
    29,  59,  42,  45,  35,  48,  70,  62,  74,  73,  69,  62,  68,  67,  77,
    87,  111, 94,  77,  82,  105, 83,  67,  68,  97,  132, 98,  105, 115, 119,
    125, 126, 125, 75,  93,  137, 146, 136, 121, 145, 111, 122, 125, 120, 255,
    219, 0,   67,  1,   21,  22,  22,  29,  25,  29,  57,  31,  31,  57,  120,
    80,  68,  80,  120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
    120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
    120, 120, 120, 120, 120, 120, 120, 120, 255, 192, 0,   17,  8,   0,   48,
    0,   80,  3,   1,   34,  0,   2,   17,  1,   3,   17,  1,   255, 196, 0,
    31,  0,   0,   1,   5,   1,   1,   1,   1,   1,   1,   0,   0,   0,   0,
    0,   0,   0,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,   10,  11,
    255, 196, 0,   181, 16,  0,   2,   1,   3,   3,   2,   4,   3,   5,   5,
    4,   4,   0,   0,   1,   125, 1,   2,   3,   0,   4,   17,  5,   18,  33,
    49,  65,  6,   19,  81,  97,  7,   34,  113, 20,  50,  129, 145, 161, 8,
    35,  66,  177, 193, 21,  82,  209, 240, 36,  51,  98,  114, 130, 9,   10,
    22,  23,  24,  25,  26,  37,  38,  39,  40,  41,  42,  52,  53,  54,  55,
    56,  57,  58,  67,  68,  69,  70,  71,  72,  73,  74,  83,  84,  85,  86,
    87,  88,  89,  90,  99,  100, 101, 102, 103, 104, 105, 106, 115, 116, 117,
    118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147,
    148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169,
    170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198,
    199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226,
    227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247,
    248, 249, 250, 255, 196, 0,   31,  1,   0,   3,   1,   1,   1,   1,   1,
    1,   1,   1,   1,   0,   0,   0,   0,   0,   0,   1,   2,   3,   4,   5,
    6,   7,   8,   9,   10,  11,  255, 196, 0,   181, 17,  0,   2,   1,   2,
    4,   4,   3,   4,   7,   5,   4,   4,   0,   1,   2,   119, 0,   1,   2,
    3,   17,  4,   5,   33,  49,  6,   18,  65,  81,  7,   97,  113, 19,  34,
    50,  129, 8,   20,  66,  145, 161, 177, 193, 9,   35,  51,  82,  240, 21,
    98,  114, 209, 10,  22,  36,  52,  225, 37,  241, 23,  24,  25,  26,  38,
    39,  40,  41,  42,  53,  54,  55,  56,  57,  58,  67,  68,  69,  70,  71,
    72,  73,  74,  83,  84,  85,  86,  87,  88,  89,  90,  99,  100, 101, 102,
    103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132,
    133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154,
    162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183,
    184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212,
    213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234,
    242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 0,   12,  3,   1,
    0,   2,   17,  3,   17,  0,   63,  0,   197, 40,  164, 231, 191, 173, 104,
    91,  234, 151, 214, 240, 52,  34,  95,  50,  50,  48,  3,   245, 31,  67,
    89,  130, 65,  158, 120, 250, 212, 251, 242, 56,  57,  173, 46,  136, 43,
    205, 102, 210, 230, 64,  48,  79,  56,  170, 146, 70,  241, 161, 86,  21,
    178, 210, 5,   84,  25,  231, 109, 35,  148, 117, 228, 3,   74,  201, 129,
    143, 108, 238, 146, 174, 220, 231, 61,  43,  185, 208, 111, 35,  127, 221,
    92,  170, 121, 140, 54,  130, 71,  44,  9,   251, 190, 245, 205, 74,  145,
    160, 87,  218, 1,   80,  57,  197, 105, 105, 38,  52,  72,  167, 123, 105,
    46,  164, 118, 253, 216, 81,  128, 128, 117, 36,  212, 222, 204, 124, 189,
    71,  248, 214, 215, 202, 138, 210, 59,  88,  85,  97,  1,   151, 106, 96,
    96,  245, 233, 92,  180, 113, 186, 43,  7,   82,  189, 249, 21,  232, 218,
    173, 197, 172, 16,  121, 107, 53,  164, 51,  145, 144, 146, 129, 131, 245,
    174, 67,  91,  181, 146, 209, 227, 220, 0,   14,  50,  64,  201, 0,   247,
    28,  255, 0,   158, 104, 214, 227, 178, 176, 219, 125, 73,  230, 208, 155,
    77,  100, 226, 32,  92,  62,  122, 140, 142, 63,  83,  81,  13,  74,  237,
    116, 239, 178, 44,  197, 96,  0,   141, 160, 14,  65,  170, 214, 103, 15,
    40,  236, 98,  97,  250, 103, 250, 83,  1,   253, 221, 85,  197, 98,  126,
    244, 252, 15,  74,  137, 67,  57,  253, 218, 187, 31,  101, 171, 73,  103,
    118, 224, 109, 129, 255, 0,   30,  42,  28,  146, 220, 98,  201, 141, 168,
    15,  247, 5,   49,  128, 199, 203, 145, 244, 171, 99,  75,  190, 148, 39,
    202, 137, 129, 143, 153, 191, 194, 167, 77,  14,  118, 24,  121, 208, 125,
    23,  53,  46,  172, 87,  80,  51,  39,  97,  192, 118, 224, 129, 142, 122,
    113, 93,  50,  203, 14,  151, 109, 10,  57,  249, 84,  99,  56,  234, 122,
    214, 123, 248, 108, 205, 141, 215, 124, 143, 246, 63,  250, 245, 175, 113,
    20,  110, 141, 27,  168, 101, 198, 8,   52,  163, 36,  245, 69,  94,  250,
    51,  142, 213, 228, 91,  141, 70,  73,  67,  22,  44,  121, 226, 174, 107,
    23,  175, 113, 101, 106, 211, 112, 112, 64,  207, 94,  213, 36,  246, 137,
    12,  165, 0,   37,  122, 171, 49,  207, 225, 86,  23,  78,  77,  74,  217,
    11,  203, 179, 202, 36,  116, 205, 87,  53,  149, 216, 229, 29,  46,  142,
    126, 209, 193, 159, 24,  234, 172, 63,  241, 211, 85,  204, 141, 142, 5,
    116, 111, 163, 91,  90,  15,  59,  237, 68,  237, 237, 129, 223, 138, 68,
    208, 236, 155, 149, 185, 145, 190, 132, 84,  251, 68,  77,  141, 120, 198,
    15,  3,   21,  97,  122, 140, 114, 106, 178, 134, 92,  103, 241, 56,  167,
    44,  129, 79,  31,  49,  254, 85,  203, 100, 93,  139, 156, 231, 238, 230,
    141, 167, 57,  198, 7,   210, 171, 44,  153, 56,  221, 143, 106, 101, 229,
    215, 217, 225, 224, 157, 231, 129, 131, 222, 142, 80,  177, 117, 92,  111,
    40,  0,   224, 103, 62,  149, 12,  131, 126, 69,  85,  211, 60,  207, 178,
    201, 35,  158, 75,  117, 39,  36,  212, 141, 116, 168, 112, 72,  205, 116,
    193, 90,  54,  36,  165, 127, 108, 242, 33,  49,  156, 176, 237, 76,  182,
    177, 103, 183, 49,  204, 229, 73,  108, 252, 166, 172, 203, 112, 137, 203,
    17,  147, 210, 146, 23,  243, 36,  7,   118, 1,   247, 170, 217, 20,  228,
    237, 97,  131, 76,  182, 67,  151, 220, 195, 220, 213, 107, 184, 33,  136,
    129, 28,  57,  92,  242, 3,   96,  138, 177, 115, 168, 199, 30,  99,  4,
    6,   94,  224, 213, 9,   238, 201, 136, 176, 36,  110, 227, 53,  130, 230,
    37,  159, 255, 217};

std::vector<char> Valid() {
  return std::vector<char>(valid_jpeg.begin(), valid_jpeg.end());
}

std::vector<char> InvalidHeader() {
  std::vector<char> res(valid_jpeg.begin(), valid_jpeg.end());
  res[0] = 0;
  return res;
}

std::vector<char> Trimed() {
  return std::vector<char>(valid_jpeg.begin(),
                           valid_jpeg.begin() + valid_jpeg.size() / 2);
}

std::vector<std::string> Check(std::vector<char> buffer) {
  std::unique_ptr<FILE, decltype(&fclose)> image_mem_file(
      utils::FMemOpen(buffer, "r"), &fclose);
  return helpers::CheckJpeg(image_mem_file.get());
}

TEST(CheckJpeg, Ok) { ASSERT_TRUE(Check(Valid()).empty()); }

TEST(CheckJpeg, InvalidHeader) {
  EXPECT_THROW(Check(InvalidHeader()), helpers::CheckJpegException);
}

TEST(CheckJpeg, Trimed) { ASSERT_EQ(Check(Trimed()).size(), 1u); }
