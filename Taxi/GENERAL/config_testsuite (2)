<DaemonConfig>
    CType: testsuite_platform
    AccessLog : /dev/stderr
    IndexLog : /dev/stderr
    LoggerType : /dev/stderr
    LogLevel : 7
    LogRotation : false
    MetricsMaxAge : 10
    MetricsPrefix : Refresh_
    StdErr : console
    StdOut : console
    <Controller>
        ClientTimeout : 200
        ConfigsControl : false
        ConfigsRoot :
        #Log : ${LogDir}/controller
        MaxConnections : 0
        MaxQueue : 0
        Port : ${ControllerPort}
        StartServer : 1
        #StateRoot : ${LogDir}/state
        Threads : 20
        <DMOptions>
            ConnectionTimeout : 100
            CType : prestable
            Enabled : 0
            Host : localhost
            InteractionTimeout : 60000
            Port : 11111
            ServiceType : rtyserver
            Slot : asdasda:12312
            TimeoutS : 45
        </DMOptions>
    </Controller>
</DaemonConfig>
<Server>
    EventLog : /dev/stderr
    UserAgent : logistic-platform (testsuite)
    #<GeobaseConfig>
    #    Path: geobase
    #    Enabled: true
    #    LockMemory: true
    #    Preloading: true
    #</GeobaseConfig>
    <HttpServer>
        Port:${BasePort}
        Threads: 16
        CompressionEnabled: true
        MaxQueueSize: 32
    </HttpServer>

    <OperatorCommandsManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
        </HistoryConfig>
    </OperatorCommandsManager>

    <RequestedActionsManager>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </RequestedActionsManager>
    <PlannedJournal>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </PlannedJournal>
    <NodesManager>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </NodesManager>
    <ResourcesManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
        <PlaceItemsManager>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </PlaceItemsManager>
        <ItemsManager>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </ItemsManager>
        <PlacesManager>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </PlacesManager>
        <PlacesManager>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </PlacesManager>
        <TagsManager>
            <HistoryConfig>
                Deep: 10m
                MaxHistoryDeep: 10m
                EventsStoreInMemDeep: 10m
            </HistoryConfig>
        </TagsManager>
    </ResourcesManager>
    <NodeReservationsManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </NodeReservationsManager>
    <TransfersManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </TransfersManager>
    <OperatorEventsManager>
        Deep: 1h
        MaxHistoryDeep: 1h
        EventsStoreInMemDeep: 1h
    </OperatorEventsManager>

    <Monitoring>
        PushUrl: http://${MockserverHost}:${MockserverPort}/monitoring/push
        #Port: 8802
        Method: push-json
        PushPeriod: 5s
        <Labels>
            application: logistic-platform
        </Labels>
    </Monitoring>

    <RolesManager>
        Type: taxi_config
        # https://tariff-editor.taxi.yandex-team.ru/dev/configs/edit/LOGISTIC_PLATFORM_ROLES
        ConfigName: LOGISTIC_PLATFORM_ROLES
        ConfigApiName: unused
        AutoRefresh: 1
    </RolesManager>

    <PermissionsManager>
        Type: taxi_config
        ConfigName: LOGISTIC_PLATFORM_PERMISSIONS
        AutoRefresh: true
        DefaultUser: default-user
    </PermissionsManager>

    <RequestHandlers>
        <default>
        ThreadsCount: 8
        </default>
        <ds_api>
        ThreadsCount: 2
        </ds_api>
        <trace_handler>
        ThreadsCount: 8
        </trace_handler>
        <b2b_api>
        ThreadsCount: 6
        </b2b_api>
        <market>
        ThreadsCount: 6
        </market>
    </RequestHandlers>

    <RequestProcessing>
    </RequestProcessing>
    
    <BillingManager>
        <AccountsHistory>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </AccountsHistory>
        <LinksHistory>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </LinksHistory>
        <PaymentsHistory>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </PaymentsHistory>
    </BillingManager>

    <ExternalOrdersManager>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </ExternalOrdersManager>

    <OffersManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </OffersManager>

    <ExternalDatabases>
        <main-db>
            Type: Postgres
            ConnectionString: ${SecDistPSQLConn}
            UseBalancing: true
        </main-db>
    </ExternalDatabases>

    <UsersManager>
        DBName: main-db
        Type: db
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </UsersManager>

    <NotifiersManager>
        DBName: main-db
        <History>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </History>
    </NotifiersManager>

    <LocksManager>
        Type: db
        DBName: main-db
    </LocksManager>

    <EventsMonitor>
        Type: db
        DBName: main-db
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </EventsMonitor>

    <EmployersManager>
        <History>
            Deep: 1m
            MaxHistoryDeep: 1m
            EventsStoreInMemDeep: 1m
        </History>
    </EmployersManager>

    <Databases>
        <employer_factors>
           Type: Memory
        </employer_factors>
        <contractor_positions>
            Type: Memory
        </contractor_positions>
        <contractor_estimations>
            Type: Memory
        </contractor_estimations>
    </Databases>

    <AbstractExternalAPI>
        <geoareas>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /geoareas
            Https: false
            <RequestConfig>
                GlobalTimeout: 10000
                MaxAttempts: 2
                TasksCheckIntervalms: 1000
                SendingTimeout: 9000
                ConnectTimeout: 1000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2017889
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </geoareas>
        <lavka>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /lavka
            Https: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 8000
                TimeoutConnectms: 5000
                GlobalTimeout: 5000
                TasksCheckInterval: 5000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2023330
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </lavka>
        <overlord-catalog>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /overlord-catalog
            Https: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 8000
                TimeoutConnectms: 5000
                GlobalTimeout: 5000
                TasksCheckInterval: 5000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2017287
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </overlord-catalog>
        <market1>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /market1
            Https: false
            <RequestConfig>
                GlobalTimeout: 10000
                SendingTimeout: 10000
                MaxAttempts: 1
                TasksCheckIntervalms: 7000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2011680
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </market1>
        <beru-tracing>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /beru-tracing
            Https: false
            <Customization>
                Type: ds_api
                InternalAuthToken: ds_api_token
            </Customization>
            <RequestConfig>
                GlobalTimeout: 10000
                SendingTimeout: 10000
                MaxAttempts: 1
                TasksCheckIntervalms: 7000
            </RequestConfig>
        </beru-tracing>
        <strizh>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /strizh
            Https: false
            <Customization>
                Type: strizh
                Login: yalogistika2021
                Password: testsuite
            </Customization>
            <RequestConfig>
                GlobalTimeout: 30000
                SendingTimeout: 16000ms
                MaxAttempts: 2
                TasksCheckIntervalms: 19000
            </RequestConfig>
        </strizh>
        <top-delivery>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /top-delivery
            Https: false
            <Customization>
                Type: top-delivery
                Login: yandexHolding
                Password: testsuite
                Authorization: Basic dGRzb2FwOnRlc3RzdWl0ZQ==
            </Customization>
            <RequestConfig>
                GlobalTimeout: 30000
                SendingTimeout: 16000ms
                MaxAttempts: 2
                TasksCheckIntervalms: 19000
            </RequestConfig>
        </top-delivery>
        <yd>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /yd
            Https: false
            <Headers>
                Authorization: OAuth yd_auth_token
            </Headers>
            <RequestConfig>
                GlobalTimeout: 41000
                SendingTimeout: 10000
                MaxAttempts: 2
                TasksCheckIntervalms: 20000
            </RequestConfig>
        </yd>
        <yd_new>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /yd_new
            Https: false
            <RequestConfig>
                GlobalTimeout: 21000
                SendingTimeout: 5000
                MaxAttempts: 2
                TasksCheckIntervalms: 5000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2033195
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </yd_new>
        <cargo-payments>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-payments
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2025938
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </cargo-payments>
        <cargo-finance>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-finance
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2028502
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </cargo-finance>
        <cargo-waybill>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-waybill
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2017771
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </cargo-waybill>

        <personal-data>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /personal-data
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2011248
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </personal-data>

        <cargo-pricing>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-pricing
            Https: false
            <RequestConfig>
                GlobalTimeout: 2000
                SendingTimeout: 2000
                MaxAttempts: 2
                TasksCheckIntervalms: 1000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2021524
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </cargo-pricing>
        <billing_report>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /billing_report
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2025938
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </billing_report>
        <platform_market>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /platform_market
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2028266
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </platform_market>
        <b2bgeo_planner>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /b2bgeo_planner
            Https: false
            <RequestConfig>
                GlobalTimeout: 10000
                TimeoutSendingms: 8000
                TimeoutConnectms : 5000
                MaxAttempts: 2
                TasksCheckIntervalms: 7000
            </RequestConfig>
        </b2bgeo_planner>
        <octonode>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /octonode
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
        </octonode>
        <ucommunications>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /ucommunications
            Https: false
            <RequestConfig>
                GlobalTimeout: 5000
                SendingTimeout: 5000
                MaxAttempts: 1
                TasksCheckIntervalms: 500
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2012118
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </ucommunications>
        <taxi-external>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /taxi-external
            Https: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 8000
                TimeoutConnectms: 5000
                GlobalTimeout: 5000
                TasksCheckInterval: 5000
            </RequestConfig>
        </taxi-external>
        <stq_agent>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /stq_agent
            Https: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 8000
                TimeoutConnectms: 5000
                GlobalTimeout: 5000
                TasksCheckInterval: 5000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2013178
                SelfClientId: ${SecDistTVMId}
            </Customization>
        </stq_agent>
        <cargo-c2c>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-c2c
            Https: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 1000
                TimeoutConnectms: 1000
                GlobalTimeout: 1000
                TasksCheckInterval: 1000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2023718
                SelfClientId: ${SecDistTVMId}
            </Customization>
    	</cargo-c2c>
        <cargo-claims>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-claims
            Https: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 1000
                TimeoutConnectms: 1000
                GlobalTimeout: 1000
                TasksCheckInterval: 1000
            </RequestConfig>
            <Customization>
                Type: tvm
                DestinationClientId: 2017985
                SelfClientId: ${SecDistTVMId}
            </Customization>
    	</cargo-claims>
        <robowarehouse>
          ApiHost: ${MockserverHost}
          ApiPort: ${MockserverPort}
          CommonPrefix: /robowarehouse
          Https: false
          <RequestConfig>
              MaxAttempts: 1
              TimeoutSendingms: 8000
              TimeoutConnectms: 5000
              GlobalTimeout: 5000
              TasksCheckInterval: 5000
          </RequestConfig>
          <Customization>
              Type: tvm
              DestinationClientId: 2030451
              SelfClientId: ${SecDistTVMId}
          </Customization>
        </robowarehouse>
        <logistic-platform-replica>
          ApiHost: ${MockserverHost}
          ApiPort: ${MockserverPort}
          CommonPrefix: /logistic-platform-replica
          Https: false
          <RequestConfig>
              GlobalTimeout: 10000
              MaxAttempts: 3
              TasksCheckIntervalms: 1000
              SendingTimeout: 9000
              ConnectTimeout: 1000
          </RequestConfig>
          <Customization>
              Type: tvm
              DestinationClientId: 2033363
              SelfClientId: ${SecDistTVMId}
          </Customization>
        </logistic-platform-replica>
    </AbstractExternalAPI>

    <ExternalAPI>
        <cargo-tracing>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /cargo-tracing
            Https: false
            <RequestConfig>
                GlobalTimeout: 1000
                SendingTimeout: 700ms
                MaxAttempts: 2
                TasksCheckIntervalms: 200
            </RequestConfig>
            DestinationClientId: 2017969
            SelfClientId: ${SecDistTVMId}
        </cargo-tracing>
        <geocoder>
            ApiHost: ${MockserverHost}
            ApiPort: ${MockserverPort}
            CommonPrefix: /geocoder
            Https: false
            RequestTimeout: 1s
            LogEventsGlobal: true
            LogEventsResponse: false
            <RequestConfig>
                MaxAttempts: 1
                TimeoutSendingms: 8000
                TimeoutConnectms: 5000
                GlobalTimeout: 5000
                TasksCheckInterval: 5000
            </RequestConfig>
            DestinationClientId: 2001886
            SelfClientId: ${SecDistTVMId}
        </geocoder>
    </ExternalAPI>

    <WaybillPlannersManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
        <Planners>
            <fake_planner>
                Type: fake
            </fake_planner>
            <b2bgeo_planner>
                Type: b2bgeo
                Quality: low
            </b2bgeo_planner>
            <p2p_group_planner>
                Type: p2p_group
            </p2p_group_planner>
            <express>
                Type: express
            </express>
            <express_external>
                Type: express
                ExpressOnly: false
            </express_external>
            <predefined>
                Type: predefined
            </predefined>
        </Planners>
    </WaybillPlannersManager>

    <RTBackgroundManager>
        DBName: main-db
        PingPeriod: 3s
    </RTBackgroundManager>

    <Settings>
        Type: settings-pack
        Freshness: 1s
        <Segments>
            <default>
                Type: taxi-config
                Freshness: 1s
                SectionName: LOGISTIC_PLATFORM_SETTINGS
            </default>
        </Segments>
    </Settings>

    <AuthModules>
        <fake>
            Type: fake
            DefaultUserId: default-user
        </fake>
        <ds_api>
            Type: ds_api
            InternalUserId: beru
            InternalAuthToken: ds_api_token
        </ds_api>
    </AuthModules>

    <DBLoggers>
        DBName: main-db
        PlannerLogsTable: courier_advice_calculation_log
        PropositionTaxiIdLogsTable: courier_proposition_taxi_id_log
    </DBLoggers>

    DBName: main-db

    <RequestPolicy>
        <rtline>
            GlobalTimeout: 30000
            ConnectTimeout: 100
            TasksCheckIntervalms: 5000
        </rtline>
    </RequestPolicy>
    <RTLineAPIs>
        <junk-kv>
            Host: ${MockserverHost}
            Port: ${MockserverPort}
            ServiceName: junk-kv
            RequestPolicyName: rtline
        </junk-kv>
    </RTLineAPIs>

    <MDSx>
        Host: ${MockserverHost}
        Port: ${MockserverPort}
        Https: false
        AccessSecretKeyPath: dummy
        AccessKeyId: dummy
        RequestTimeout: 60s
        <RequestConfig>
            MaxAttempts: 1
        </RequestConfig>
        PublicBuckets: lp-labels
    </MDSx>

    <StartrekClient>
        Host: ${MockserverHost}
        Port: ${MockserverPort}
        IsHttps: false
        Account: robot-log-platform
        Token: startrek_token
        RequestTimeout: 1s
        <RequestConfig>
                MaxAttempts: 1
        </RequestConfig>
    </StartrekClient>

    <StationsManager>
        <TagsManager>
            <HistoryConfig>
                Deep: 10m
                MaxHistoryDeep: 10m
                EventsStoreInMemDeep: 10m
            </HistoryConfig>
        </TagsManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </StationsManager>

    <ResourcesManager>
    </ResourcesManager>


    <RejectionsManager>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
    </RejectionsManager>

    <RequestsManager>
        <CompilationsManager>
            LogisticPlatformReplicaApiName: logistic-platform-replica
            ThreadsPoolThreadsCount: 8
        </CompilationsManager>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
        <TagsManager>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </TagsManager>
    </RequestsManager>

    <PropositionsManager>
        PropositionsKVStorage: junk-kv
        <HistoryConfig>
            Deep: 6h
            MaxHistoryDeep: 6h
        </HistoryConfig>
    </PropositionsManager>

    <ContractorsManager>
        <PingsWatcherConfig>
            KVServiceName: contractor_positions
        </PingsWatcherConfig>
        <TaskWatcher>
            RTYServiceName: junk-kv
        </TaskWatcher>
        <FeaturesWatcher>
            RTYServiceName: junk-kv
        </FeaturesWatcher>
        <ProfilesManagerConfig>
            <HistoryConfig>
                Deep: 1h
                MaxHistoryDeep: 1h
                EventsStoreInMemDeep: 1h
            </HistoryConfig>
        </ProfilesManagerConfig>
        <HistoryConfig>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </HistoryConfig>
        <Operators>
            <market1>
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: market1
                    YTCluster: hahn
                    YTPath: //home/market/production/combinator/outlets/yt_outlet
                    ExternalOperatorId: market
                </EventsFetcher>
            </market1>
            <lavka>
                OperatorName: Лавка
                Type: lavka
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: lavka
                </EventsFetcher>
            </lavka>
            <robowarehouse>
                OperatorName: Робосклад
                Type: robowarehouse
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: robowarehouse
                </EventsFetcher>
            </robowarehouse>
            <strizh>
                OperatorName: Стриж
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    SettingId: 850
                    AccessKey: fc21405a-2fec-418c-bd2e-e69a61b57f88
                    Type: strizh
                </EventsFetcher>
            </strizh>
            <top-delivery>
                OperatorName: Топ Деливери
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    SettingId: 850
                    AccessKey: fc21405a-2fec-418c-bd2e-e69a61b57f88
                    Type: top-delivery
                </EventsFetcher>
            </top-delivery>
            <taxi-external>
                OperatorName: Яндекс.Такси
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: taxi-external
                    DefaultClass: courier
                    ServiceName: taxi-external
                </EventsFetcher>
            </taxi-external>
            <yd>
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: YD
                    SenderId: 500003913
                    CabinetId: 1058210
                    PartnerId: 75735
                </EventsFetcher>
            </yd>
            <yd_new>
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: yd_new
                    EdgesTable: //home/market/production/indexer/combinator/export/godapter/recent
                    SelfPickupsTablePath: //home/cdc/prod/market/logistics_management_service/yt_outlet
                    SortCentersTablePath: //home/market/production/delivery/logistics4go/snapshots/latest/logistic_points
                    WarehouseAvailabilityTablePath: //home/market/production/delivery/logistics4go/snapshots/latest/warehouse_shipment_availability
                </EventsFetcher>
            </yd_new>
            <external_operator>
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <PingsFetcher>
                    Type: fake
                </PingsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: external_operator
                </EventsFetcher>
            </external_operator>
            <virtual_operator>
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <PingsFetcher>
                    Type: fake
                </PingsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: virtual_operator
                </EventsFetcher>
            </virtual_operator>
            <self_pickup>
                <PositionsFetcher>
                    Type: fake
                </PositionsFetcher>
                <PingsFetcher>
                    Type: fake
                </PingsFetcher>
                <CandidatesFetcher>
                    ClientType: fake
                </CandidatesFetcher>
                <EventsFetcher>
                    Type: self_pickup
                </EventsFetcher>
            </self_pickup>
        </Operators>
    </ContractorsManager>

    <Processors>
        <api/admin/settings/info>
            AuthModuleName: tvm_admin
            ProcessorType: settings_info
        </api/admin/settings/info>
        <api/admin/settings/upsert>
            AuthModuleName: tvm_admin
            ProcessorType: settings_upsert
        </api/admin/settings/upsert>
        <api/admin/settings/remove>
            AuthModuleName: tvm_admin
            ProcessorType: settings_remove
        </api/admin/settings/remove>

        <testsuite/refresh-caches>
            AuthModuleName: fake
            ProcessorType: refresh-caches
        </testsuite/refresh-caches>

        <testsuite/rt-robot-execute>
            AuthModuleName: fake
            ProcessorType: rt-robot-execute
        </testsuite/rt-robot-execute>
    </Processors>

    <TestsuiteClient>
        Type: taxi
        Host: ${MockserverHost}
        Port: ${MockserverPort}
        Https: 0
        RequestTimeout: 10s
    </TestsuiteClient>

    <TaxiConfigClient>
        Type: taxi
        Host: ${MockserverHost}
        Port: ${MockserverPort}
        Https: 0
        Route: configs-service/configs/values
        RequestTimeout: 10s
    </TaxiConfigClient>
    
     <GeoAreas>
        Type: external_areas
        ApiName: geoareas
        DBName: main-db
        AutoRefresh: true
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
        <TagsManager>
            <HistoryConfig>
                Deep: 10m
                MaxHistoryDeep: 10m
                EventsStoreInMemDeep: 10m
            </HistoryConfig>
        </TagsManager>
    </GeoAreas>

    <DBLoggers>
        DBName: main-db
        PlannerLogsTable: courier_advice_calculation_log
        PropositionTaxiIdLogsTable: courier_proposition_taxi_id_log
    </DBLoggers>

    <TagDescriptions>
        DBName: main-db
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </TagDescriptions>

    <SwitchInstructionsManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </SwitchInstructionsManager>

    <InstructionItemsManager>
        <HistoryConfig>
            Deep: 10m
            MaxHistoryDeep: 10m
            EventsStoreInMemDeep: 10m
        </HistoryConfig>
    </InstructionItemsManager>

    <CarriagesManager>
        Deep: 1h
        MaxHistoryDeep: 1h
        EventsStoreInMemDeep: 1h
        <Parcels>
            Deep: 1h
            MaxHistoryDeep: 1h
            EventsStoreInMemDeep: 1h
        </Parcels>
    </CarriagesManager>


</Server>