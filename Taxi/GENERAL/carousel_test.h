#pragma once

#include "id_grouping.h"
#include "id_map.h"

#include <mapreduce/yt/interface/fwd.h>

#include <util/generic/hash_set.h>
#include <util/stream/output.h>

struct TDriversTestSet {
    THashSet<ui32> GoodDrivers;
    THashSet<ui32> BadDrivers;
    THashSet<ui32> FoundDrivers;
    THashSet<ui32> FalsePositiveDrivers;
    bool Initialized = false;

    void Init(const TIdMap& driverIds, bool quiet);
    void Init(const NYT::IClientBasePtr& client, const TString& tableName, const TIdMap& driverIds, bool quiet);

    void MarkFoundDriver(ui32 driver) {
        if (!Initialized)
            return;
        if (GoodDrivers.contains(driver))
            FalsePositiveDrivers.insert(driver);
        else
            FoundDrivers.insert(driver);
    }

    void Dump(const TIdMap& driverIds) {
        if (!Initialized)
            return;
        size_t badNotVerified = 0;
        for (auto driver : FoundDrivers) {
            if (!BadDrivers.contains(driver))
                badNotVerified++;
            BadDrivers.erase(driver);
        }
        Cerr << "BadDrivers found = " << FoundDrivers.size() << " (" << badNotVerified << " not verified)" << Endl;
        Cerr << "BadDrivers not found = " << BadDrivers.size() << " FalsePositives = " << FalsePositiveDrivers.size() << Endl;
        if (BadDrivers.size()) {
            Cerr << "BadDrivers:";
            for (auto driver : BadDrivers)
                Cerr << " " << driverIds.Name(driver);
            Cerr << Endl;
        }
        if (FalsePositiveDrivers.size()) {
            Cerr << "FalsePositives:";
            for (auto driver : FalsePositiveDrivers)
                Cerr << " " << driverIds.Name(driver);
            Cerr << Endl;
        }
    }
};

namespace NCarouselTestData {

const auto BadDrivers = {
    "AA0236656", "AA3317532", "UZAA0164441", "AD217009", "AB031898", "7812650360", "7812680064", "7814701613", "7825701618", "78CE050958", "9812680360",
    "9912680364", "2712200172", "6215361584", "6215361586", "6419522555", "9904037102", "9904529535", "000857509", "0216353556", "3817974966", "9906399660",
    "AF0096145", "2311617922", "23YK584502", "8525803225", "9906288966", "2106472678", "2119472678", "2194472678", "9906833251", "3627886666", "63EE000401",
    "66BC222265", "9911662218", "99YB669922", "38BH335838", "38BH385233", "11KK011187", "21TT711117", "22TT018187", "3111244481", "6612566373", "7724015700",
    "9934724951", "7907179679", "9910757529", "35AA090292", "35TT031146", "34CB076420", "6411050213", "7733898989", "2007287127", "2336260634", "2902528448",
    "4325498681", "7322793375", "9992528448", "3126428901", "4825573108", "1605926292", "1607498111", "9906296938", "2424669996", "6499055200", "3405990290",
    "9905907593", "9901618678", "2307233018", "2307235100", "4825562107", "6419119669", "6499052203", "77OO712887", "9999779868", "3623799994", "5818969662",
    "70CB002454", "2309171662", "2203130126", "2203134126", "2306052218", "6424099420", "9907077529", "MKK412011000978337", "3333662277", "3634239418",
    "SS000830023", "MKK411011000668869", "2606703935", "54HB224015", "9699995266", "3426149806", "4AA009567", "NYAR2704810101", "2424449988", "5206274222",
    "5219525808", "77XX731100", "9912122175", "9912492175", "OO000587918",
    // new portion of markup
    "2631801003", "BI061468", "7812676591", "6419052918", "5019388181", "3427514573", "7334007892", "PB322293", "QQ277293", "6424099022", "9905313746",
    "6321628154", "1467962156", "2344658099", "4670763311", "5577890066", "23YK476530", "0522696236", "4022130758", "AMOA0825201600920001", "G2E48614",
    "B01648468", "6734668394", "2123480486", "2123488485", "I00184305F", "NIS970419881407422012018", "9988089260"
};

const auto GoodDrivers = {
    "7404768729", "7404805559", "7404806499", "7404806588", "7404825583", "7404861660", "7404861734", "7404886271", "7404887254", "7410953374", "7410960268",
    "7411954122", "7411955211", "7411968283", "7413091116", "7413115088", "7413115426", "7413115855", "7413115957", "7417267605", "7417275760", "7417276422",
    "7417277594", "7417277990", "7419018027", "7419020210", "7419020245", "7419021554", "7419022716", "7419022815", "7422012829", "7422017875", "7425368614",
    "7425379274", "7426533077", "7426533410", "7427792203", "7429093099", "7429093724", "7429114234", "7430975797", "7430991303", "7431782510", "7432422502",
    "7432422660", "7433181183", "7433692577", "7433692594", "7433700557", "7435473588", "7436424086", "74AB072756", "74AB073066", "74AB074034", "74AB076099",
    "74AB078188", "74AB078395", "74EP282660", "74EP283115", "74EP283460", "74EP283473", "74EP283839", "74EP301232", "8219782537", "9900330536", "9900330537",
    "9901665851", "9901685786", "9902708887", "9902956434", "9905626603", "9907198658", "9908507523", "9910645012", "9912155879", "AA0661914", "6423036676",
    "ABOU011844021719B", "DIALO011500056784MA", "4903263594", "4907331926", "4914010687", "4921850646", "4926938497", "4926938631", "4933278447",
    "49YM034774", "49YM038427", "5403995846", "BXT487143", "UZAA0431989", "5226091093", "52YX204989", "ESTEV030859", "EV441416", "FIN0106922432",
    "FIN021272149B", "FIN030288229M", "FIN030293257U", "FIN100178279C", "FIN121198645P", "FIN140395305T", "FIN1603630033", "FIN161184233C", "FIN161296315X",
    "FIN210978249Y", "FIN2602942313", "QUAY0501870101", "OPOK0078000117102017",
    // new portion of markup
    "6702448853", "9221337518", "9911148322", "MB854803", "BXX108849", "KXC376795", "POÐ“94584", "BBT124543", "KIA215792", "9911148025", "BHB043064",
    "XOA087214", "BHB085393", "OIA307174", "OIA442777", "BXO660565", "OIA317382", "5226068008", "9911148694", "2118705769", "9905107954", "OG000649988",
    "OG000684610", "AZAC745658", "AZAC643807", "AZAE032651", "SRB000065672", "SRB000029396", "5AI050186", "3834097913", "6331381902", "1211742251",
    "9910733186", "52YX179655", "76XA010152", "7126520433", "5807453616", "1311824348", "21TA052703", "0204613914", "3218556102", "3228507725", "9908069074",
    "3828748181", "5016091350", "7125016616", "9908728146", "9910869328", "LTU00302751", "LTU01101838", "LTUR0831243", "4003569661", "3822428643",
    "AA0551603", "0224156389", "9909417896", "45YH479437", "0280022026053615", "225183772441449", "228582864028369", "340451388349153", "561230780943690",
    "3105435906558706", "3139534168261202", "8192418309124790", "3093392088575561", "7022626", "0502855920855280", "0509796990720505", "0539853703048427",
    "3014114559", "9926573", "5212745514", "MF000623", "RB132655", "RF151586", "0333358297212667", "9910374184", "4AE068477", "0869193", "6840559",
    "8439211", "5216276026", "16TC034528", "7312130836", "4AC023290", "5AE040228", "5AI009539", "5623869667", "4AM012265", "5AI052211", "0375162916588928",
    "7215044", "8324421", "7335003240", "6122622586", "5AI021826", "5AI025728", "5AI048584", "7AB176516", "9901284240", "2331571652", "9904406377"
};

} // NCarouselTestData

inline void TDriversTestSet::Init(const TIdMap& driverIds, bool quiet) {
    for (auto name : NCarouselTestData::GoodDrivers) {
        if (auto it = driverIds.NameToId.find(name))
            GoodDrivers.insert(it->second);
        else if (!quiet)
            Cerr << "Good drivers list: " << name << " is not within input graph" << Endl;
    }
    for (auto name : NCarouselTestData::BadDrivers) {
        if (auto it = driverIds.NameToId.find(name))
            BadDrivers.insert(it->second);
        else if (!quiet)
            Cerr << "Bad drivers list: " << name << " is not within input graph" << Endl;
    }
    Initialized = true;
}
