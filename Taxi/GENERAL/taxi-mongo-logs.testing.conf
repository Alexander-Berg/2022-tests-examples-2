#
# hints for monrun
#   monrun_es_url: http://taxi-elastic-logs.taxi.tst.yandex.net:9200/taxi-infra-*
#   monrun_es_index: taxi-infra-*
#   monrun_log_grep: \t:
#

input {

  file {
    path => "/var/log/mongodb/mongos.log"
    sincedb_path => "/var/cache/logstash/taxi-mongos-log.sincedb"
    start_position => beginning
    ignore_older =>  864000
    discover_interval => 5
    codec => plain {
       charset => "UTF-8"
    }
    add_field => {
        "log_source" => "mongos"
    }
  }

  file {
    path => "/var/log/mongodb/mongodb.log"
    sincedb_path => "/var/cache/logstash/taxi-mongodb-log.sincedb"
    start_position => beginning
    ignore_older =>  864000
    discover_interval => 5
    codec => plain {
       charset => "UTF-8"
    }
    add_field => {
        "log_source" => "mongodb"
    }
  }

  file {
    path => "/var/log/mongodb/mongodbcfg.log"
    sincedb_path => "/var/cache/logstash/taxi-mongodbcfg-log.sincedb"
    start_position => beginning
    ignore_older =>  864000
    discover_interval => 5
    codec => plain {
       charset => "UTF-8"
    }
    add_field => {
        "log_source" => "mongodbcfg"
    }
  }

}

filter {

  grok {
    match => { "message" => "^%{TIMESTAMP_ISO8601:ts}\s+%{NOTSPACE:severity}\s+%{NOTSPACE:component}\s+\[%{DATA:context}\]\s+%{GREEDYDATA:log_message}$" }
    add_tag => [ "_logstash_parsed" ]
  }

  if [log_message] =~ "warning: log line attempted" {

    grok {
      match => { "log_message" => "^warning: log line attempted.+?\.\.\.\s+(?<log_message>.+$)" }
      add_tag => [ "_truncated" ]
      overwrite => [ "log_message" ]
    }

  }

  if [component] == "COMMAND" {

    grok {
      match => { "log_message" => "%{WORD}\s+(?<mongo_database>[^\.]+?)(\.%{NOTSPACE:mongo_collection})?\s+(appName:\s+\"%{DATA:mongo_appname}\"\s+)?%{WORD}:\s+%{WORD:mongo_op}\s+%{DATA:mongo_query}\s+(?<mongo_counters>[^\}]+)\s+locks:\{(\s+%{DATA:mongo_locks}\s+)?\}\s+protocol:(op_command|op_query)\s+%{INT:mongo_time}ms$" }
      add_tag => [ "_logstash_parsed_query" ]
    }

  } else if [component] == "WRITE" {

    grok {
      match => { "log_message" => "%{WORD:mongo_op}\s+(?<mongo_database>[^\.]+?)(\.%{NOTSPACE:mongo_collection})?\s+(appName:\s+\"%{DATA:mongo_appname}\"\s+)?%{WORD}:\s+%{DATA:mongo_query}\s+(?<mongo_counters>[^\}]+)\s+locks:\{(\s+%{DATA:mongo_locks}\s+)?\}\s+%{INT:mongo_time}ms$" }
      add_tag => [ "_logstash_parsed_query" ]
    }

  }

  if [mongo_query] =~ "\s+planSummary:\s+" {
    grok {
      match => { "mongo_query" => "\{\s+%{DATA:mongo_query}(\s+\}\s+planSummary:\s+%{GREEDYDATA:mongo_plansummary})" }
      overwrite => [ "mongo_query" ]
    }
  }

  kv {
    source => "mongo_counters"
    prefix => "mongo_"
    field_split => "\s"
    value_split => ":"
    transform_key => "lowercase"
    remove_field => [ "mongo_counters" ]
  }

  date {
    match => [ "ts", "yyyy-MM-dd HH:mm:ss.SSSSSS", ISO8601 ]
    timezone => 'Europe/Moscow'
  }

  mutate {
    gsub => [ "component", "^-$", "NONE" ]
    add_field => {
      "[@metadata][idx_name]" => "${ES_CUSTOM_IDX_TAXIINFRA_NAME:taxi-infra}"
      "[@metadata][idx_time]" => "%{${ES_CUSTOM_IDX_TAXIINFRA_TIME:+YYYY.MM.dd}}"
    }
  }

  ruby {
    init => "
      $cgroups = 'unknown'
      File.open('/etc/conductor-hostinfo/hostinfo').each do |line|
        if /^groups=\'(.+)\'$/.match(line.strip)
          $cgroups = $1.split(',')
          $cgroups -= [ 'taxi_test_db_mongo', 'taxi_test_all', 'taxi_all' ]
          break
        end
      end
    "
    code => "event.set('[cgroups]', $cgroups)"
  }

  if "_grokparsefailure" not in [tags] {
    mutate {
      remove_field => [ "message", "log_message", "ts" ]
    }
  }

}

output {

  elasticsearch {
    hosts => [
      "http://elastic-logs-vla-04.taxi.tst.yandex.net:9200",
      "http://elastic-logs-vla-05.taxi.tst.yandex.net:9200",
      "http://elastic-logs-sas-04.taxi.tst.yandex.net:9200",
      "http://elastic-logs-sas-05.taxi.tst.yandex.net:9200"
    ]
    index => "%{[@metadata][idx_name]}-%{[@metadata][idx_time]}"
    document_type => "_doc"
    manage_template => false
  }

}
