/// This test was generated by tools/create-new-operation
#include <userver/utest/utest.hpp>

#include <variant>
#include <optional>

#include <eventus/mappers/{%
  for namespace in operation.namespace
    %}{{ namespace }}/{%
  endfor %}{{ operation.fileprefix }}.hpp>
#include <test/common.hpp>

namespace {

using namespace test::common;
using eventus::mappers::{%
        for namespace in operation.namespace
          %}{{ namespace }}::{%
        endfor %}{{ operation.classname }}Mapper;

using ExpectedType = std::variant<std::string, std::exception>;

struct BasicTestParam {
  OperationArgsV args;
  std::string input_event;
  ExpectedType expected;
  std::optional<std::string> testname_prefix{};
};

std::string PrintOperationArgsParam(
    const ::testing::TestParamInfo<BasicTestParam>& param) {
  return param.param.testname_prefix.value_or("") +
        test::common::PrintOperationArgs(param.param.args);
}

}

class {{ operation.classname }}MapperBasicSuite
  : public ::testing::TestWithParam<BasicTestParam> {};

INSTANTIATE_TEST_SUITE_P(
  /**/, {{ operation.classname }}MapperBasicSuite,
  ::testing::Values(
    {% for example in examples %}{%
      if example != examples[0] %},{% endif
      %} BasicTestParam{
          OperationArgsV{
            {% for _,arg in example.arguments.items()
              %}{"{{ arg.name }}", {{ arg.value }}},{%
            endfor %}
          },
          R"({{ example.input_event }})",
      {%
      if example.expect.is_throw_expected()
        %}std::exception{}{%
      else
        %}R"({{ example.expect }})"{%
      endif
      %}{%
      if example.testcase.prefix
        %}, R"({{ example.testcase.prefix }})"{%
      endif %},
        } {%
    endfor %}), PrintOperationArgsParam);

TEST_P({{ operation.classname }}MapperBasicSuite, RunTest) {
  RunInCoro([] {
    const auto& param = GetParam();

    using namespace test::common;

    auto mapper =
      MakeOperation<{{ operation.classname }}Mapper>(param.args);

    models::order_event::OrderEvent event(
        formats::json::FromString(param.input_event), {});

    if (std::holds_alternative<std::exception>(param.expected)) {
      EXPECT_THROW(mapper->Map(event), std::exception);
      ASSERT_EQ(event.GetData(), formats::json::FromString(param.input_event));
    } else {
      mapper->Map(event);
      const auto expect_data =
          formats::json::FromString(std::get<std::string>(param.expected));
      ASSERT_EQ(event.GetData(), expect_data);
    }
  });
}
