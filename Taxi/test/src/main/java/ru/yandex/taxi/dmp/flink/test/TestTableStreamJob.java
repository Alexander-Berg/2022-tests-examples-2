package ru.yandex.taxi.dmp.flink.test;

import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.table.api.Table;
import org.apache.flink.table.api.TableDescriptor;
import org.apache.flink.table.api.bridge.java.StreamTableEnvironment;
import org.apache.flink.types.Row;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ru.yandex.taxi.dmp.flink.config.Environment;
import ru.yandex.taxi.dmp.flink.utils.FlinkUtils;

@SuppressWarnings("checkstyle:HideUtilityClassConstructor")
public class TestTableStreamJob {
    private static final transient Logger log = LoggerFactory.getLogger(TestTableStreamJob.class);

    private static TestArgs parsedArgs;

    public static void main(String[] args) throws Exception {
        parsedArgs = new TestArgs(Environment.fromString(args[0]));

        StreamExecutionEnvironment env = FlinkUtils.defaultEnvironment(parsedArgs);
        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);
        env.getConfig().enableAutoGeneratedUIDs();

//        var sourceSchema = Schema.newBuilder()
//                .column("name", DataTypes.STRING())
//                .build();
//
//        var sourceTable = tableEnv.from(
//                logbrokerTable(parsedArgs.getTestInTopic())
//                        .format("csv")
//                        .schema(sourceSchema)
//                        .build()
//        );
//
//        ScalarFunction func = new TestMapFunction();
//        tableEnv.createTemporarySystemFunction("func", func);
//
//        var stream = tableEnv.toDataStream(sourceTable);
//
//        var resultStream = stream.map((MapFunction<Row, Row>) value -> {
//            var name = value.getField("name");
//            return Row.of(name, "pre-" + name);
//        }).uid("map-row");

        DataStream<Row> dataStream = env.fromElements(
                Row.of("Alice", 12),
                Row.of("Bob", 10),
                Row.of("Alice", 100)
        ).uid("from-elements");

        var ds2 = dataStream.map(new MapFunction<Row, TestData>() {
            @Override
            public TestData map(Row value) throws Exception {
                return new TestData(value.getField(0).toString(), "pre" + value.getField(0));
            }
        });

        Table result = tableEnv.fromDataStream(ds2).as("a", "b");

//        var result = tableEnv.fromDataStream(resultStream).as("a").select($("a.*"));

        var targetDescriptor = logbrokerTable(parsedArgs.getTestOutTopic()).format("json").build();

        result.executeInsert(targetDescriptor);
    }

    private static TableDescriptor.Builder logbrokerTable(String topic) {
        return TableDescriptor
                .forConnector("logbroker")
                .option("installation", "logbroker")
                .option("topic", topic)
                .option("consumer", parsedArgs.getLogbrokerConsumer())
                .option("credentials", "default-oauth");
    }
}
