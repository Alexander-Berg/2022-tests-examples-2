/// This test was generated by tools/create-new-operation
#include <userver/utest/utest.hpp>

#include <optional>
#include <variant>

#include <eventus/mappers/string_to_numeric_mapper.hpp>
#include <test/common.hpp>

namespace {

using namespace test::common;
using eventus::mappers::StringToNumericMapper;

using ExpectedType = std::variant<std::string, std::exception>;

struct BasicTestParam {
  OperationArgsV args;
  std::string input_event;
  ExpectedType expected;
  std::optional<std::string> testname_prefix{};
};

std::string PrintOperationArgsParam(
    const ::testing::TestParamInfo<BasicTestParam>& param) {
  return param.param.testname_prefix.value_or("") +
         test::common::PrintOperationArgs(param.param.args);
}

}  // namespace

class StringToNumericMapperBasicSuite
    : public ::testing::TestWithParam<BasicTestParam> {};

INSTANTIATE_TEST_SUITE_P(
    /**/, StringToNumericMapperBasicSuite,
    ::testing::Values(
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "int"},
            },
            R"({
              "my_key":"228"
            })",
            R"({
              "my_key":228
            })",
            R"(string_to_int_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "double"},
            },
            R"({
              "my_key":"359.322"
            })",
            R"({
              "my_key":359.322
            })",
            R"(string_to_double_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "int"},
            },
            R"({
              "my_key":"359.322"
            })",
            std::exception{},
            R"(string_with_double_to_int_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "double"},
            },
            R"({
              "my_key":"228"
         })",
            R"({
              "my_key":228.0
         })",
            R"(string_that_looks_like_int_to_double_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "double"},
            },
            R"({
              "my_key":"555abracadabra"
            })",
            std::exception{},
            R"(double_not_a_number_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "int"},
            },
            R"({
              "my_key":"555abracadabra"
            })",
            std::exception{},
            R"(int_not_a_number_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src", "my_key"},
                {"dst", "my_key"},
                {"dst_type", "double"},
            },
            R"({})",
            std::exception{},
            R"(no_such_key_)",
        }),
    PrintOperationArgsParam);

TEST_P(StringToNumericMapperBasicSuite, RunTest) {
  RunInCoro([] {
    const auto& param = GetParam();

    using namespace test::common;

    auto mapper = MakeOperation<StringToNumericMapper>(param.args);

    eventus::mappers::Event event(formats::json::FromString(param.input_event));

    if (std::holds_alternative<std::exception>(param.expected)) {
      EXPECT_THROW(mapper->Map(event), std::exception);
      ASSERT_EQ(event.GetData(), formats::json::FromString(param.input_event));
    } else {
      mapper->Map(event);
      const auto expect_data =
          formats::json::FromString(std::get<std::string>(param.expected));
      ASSERT_EQ(event.GetData(), expect_data);
    }
  });
}
