/// This test was generated by tools/create-new-operation
#include <userver/utest/utest.hpp>

#include <optional>
#include <variant>

#include <eventus/mappers/set_key_recursive_mapper.hpp>
#include <test/common.hpp>

namespace {

using namespace test::common;
using eventus::mappers::SetKeyRecursiveMapper;

using ExpectedType = std::variant<std::string, std::exception>;

struct BasicTestParam {
  OperationArgsV args;
  std::string input_event;
  ExpectedType expected;
  std::optional<std::string> testname_prefix{};
};

std::string PrintOperationArgsParam(
    const ::testing::TestParamInfo<BasicTestParam>& param) {
  return param.param.testname_prefix.value_or("") +
         test::common::PrintOperationArgs(param.param.args);
}

}  // namespace

class SetKeyRecursiveMapperBasicSuite
    : public ::testing::TestWithParam<BasicTestParam> {};

INSTANTIATE_UTEST_SUITE_P(
    /**/, SetKeyRecursiveMapperBasicSuite,
    ::testing::Values(
        BasicTestParam{
            OperationArgsV{
                {"src_key", "from"},
                {"dst_key", std::vector<std::string>{"to", "key"}},
            },
            R"({
              "from":"value"
            })",
            R"({
              "from":"value",
              "to":{
                "key":"value"
              }
            })",
            R"(string_value_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src_key", "from"},
                {"dst_key", std::vector<std::string>{"to", "key"}},
            },
            R"({
              "from":"value",
              "to":{
                "other":"should_be_left"
              }
            })",
            R"({
              "from":"value",
              "to":{
                "other":"should_be_left",
                "key":"value"
              }
            })",
            R"(exists_and_string_value_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src_key", "from"},
                {"dst_key", std::vector<std::string>{"to", "key"}},
            },
            R"({
              "from":"value",
              "to":{
                "key":"should_be_gone"
              }
            })",
            R"({
              "from":"value",
              "to":{
                "key":"value"
              }
            })",
            R"(override_value_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src_key", "from"},
                {"dst_key", std::vector<std::string>{"to", "key"}},
            },
            R"({
              "from":{
                "is":"value"
              }
            })",
            R"({
              "from":{
                "is":"value"
              },
              "to":{
                "key":{
                  "is":"value"
                }
              }
            })",
            R"(object_value_)",
        },
        BasicTestParam{
            OperationArgsV{
                {"src_key", "from"},
                {"dst_key", std::vector<std::string>{"to", "key"}},
            },
            R"({})",
            std::exception{},
            R"(missed_value_)",
        }),
    PrintOperationArgsParam);

UTEST_P(SetKeyRecursiveMapperBasicSuite, RunTest) {
  const auto& param = GetParam();

  using namespace test::common;

  auto mapper = MakeOperation<SetKeyRecursiveMapper>(param.args);

  eventus::mappers::Event event(formats::json::FromString(param.input_event));

  if (std::holds_alternative<std::exception>(param.expected)) {
    EXPECT_THROW(mapper->Map(event), std::exception);
    ASSERT_EQ(event.GetData(), formats::json::FromString(param.input_event));
  } else {
    mapper->Map(event);
    const auto expect_data =
        formats::json::FromString(std::get<std::string>(param.expected));
    ASSERT_EQ(event.GetData(), expect_data);
  }
}
