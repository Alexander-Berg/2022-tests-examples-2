-- mock ngx
local scheduled_timers = {}
local service_ticket = ''
-- public keys to check tickets generated by unittest mode
-- generated by 'tvmknife unittest public_keys'
local tvm_unittest_public_keys = '1:CpgCCpMCCAEQABqIAjCCAQQCggEAcLEXeH67FQESF'..
        'Un4_7wnX7wN0PUrBoUsm3QQ4W5vC-qz6sXaEjSwnTV8w1o-z6X9KPLlhzMQvuS38NCNf'..
        'K4uvJ4Zvfp3YsXJ25-rYtbnrYJHNvHohD-kPCCw_yZpMp21JdWigzQGuV7CtrxUhF-NN'..
        'rsnUaJrE5-OpEWNt4X6nCItKIYeVcSK6XJUbEWbrNCRbvkSc4ak2ymFeMuHYJVjxh4eQ'..
        'bk7_ZPzodP0WvF6eUYrYeb42imVEOR8ofVLQWE5DVnb1z_TqZm4i1XkS7jMwZuBxBRw8'..
        'DGdYei0lT_sAf7KST2jC0590NySB3vsBgWEVs1OdUUWA6r-Dvx9dsOQtSCVkQYQAAqZA'..
        'gqUAggCEAAaiQIwggEFAoIBAQDhEBM5-6YsPWfogKtbluJoCX1WV2KdzOaQ0-OlRbBze'..
        'Czw-eQKu12c8WakHBbeCMd1I1TU64SDkDorWjXGIa_2xT6N3zzNAE50roTbPCcmeQrps'..
        '26woTYfYIuqDdoxYKZNr0lvNLLW47vBr7EKqo1S4KSj7aXK_XYeEvUgIgf3nVIcNrio7'..
        'VTnFmGGVQCepaL1Hi1gN4yIXjVZ06PBPZ-DxSRu6xOGbFrfKMJeMPs7KOyE-26Q3xOXd'..
        'TIa1X-zYIucTd_bxUCL4BVbwW2AvbbFsaG7ISmVdGu0XUTmhXs1KrEfUVLRJhE4Dx99h'..
        'AZXm1_HlYMUeJcMQ_oHOhV94ENFIJaRBhACCpYBCpEBCAMQABqGATCBgwKBgF9t2YJGA'..
        'JkRRFq6fWhi3m1TFW1UOE0f6ZrfYhHAkpqGlKlh0QVfeTNPpeJhi75xXzCe6oReRUm-0'..
        'DbqDNhTShC7uGUv1INYnRBQWH6E-5Fc5XrbDFSuGQw2EYjNfHy_HefHJXxQKAqPvxBDK'..
        'MKkHgV58WtM6rC8jRi9sdX_ig2NIJeRBhABCpYBCpEBCAQQABqGATCBgwKBgGB4d6eLG'..
        'UBv-Q6EPLehC4S-yuE2HB-_rJ7WkeYwyp-xIPolPrd-PQme2utHB4ZgpXHIu_OFksDe_'..
        '0bPgZniNRSVRbl7W49DgS5Ya3kMfrYB4DnF5Fta5tn1oV6EwxYD4JONpFTenOJALPGTP'..
        'awxXEfon_peiHOSBuQMu3_Vn-l1IJiRBhADCpcBCpIBCAUQABqHATCBhAKBgQCTJMKIf'..
        'mfeZpaI7Q9rnsc29gdWawK7TnpVKRHws1iY7EUlYROeVcMdAwEqVM6f8BVCKLGgzQ7Ga'..
        'r_uuxfUGKwqEQzoppDraw4F75J464-7D5f6_oJQuGIBHZxqbMONtLjBCXRUhQW5szBLm'..
        'TQ_R3qaJb5vf-h0APZfkYhq1cTttSCZkQYQBAqWAQqRAQgLEAAahgEwgYMCgYBvvGVH_'..
        'M2H8qxxv94yaDYUTWbRnJ1uiIYc59KIQlfFimMPhSS7x2tqUa2-hI55JiII0Xym6GNkw'..
        'Lhyc1xtWChpVuIdSnbvttbrt4weDMLHqTwNOF6qAsVKGKT1Yh8yf-qb-DSmicgvFc74m'..
        'BQm_6gAY1iQsf33YX8578ClhKBWHSCVkQYQAAqXAQqSAQgMEAAahwEwgYQCgYEAkuzFc'..
        'd5TJu7lYWYe2hQLFfUWIIj91BvQQLa_Thln4YtGCO8gG1KJqJm-YlmJOWQG0B7H_5RVh'..
        'xUxV9KpmFnsDVkzUFKOsCBaYGXc12xPVioawUlAwp5qp3QQtZyx_se97YIoLzuLr46Uk'..
        'LcLnkIrp-Jo46QzYi_QHq45WTm8MQ0glpEGEAIKlwEKkgEIDRAAGocBMIGEAoGBAIUzb'..
        'xOknXf_rNt17_ir8JlWvrtnCWsQd1MAnl5mgArvavDtKeBYHzi5_Ak7DHlLzuA6YE8W1'..
        '75FxLFKpN2hkz-l-M7ltUSd8N1BvJRhK4t6WffWfC_1wPyoAbeSN2Yb1jygtZJQ8wGoX'..
        'HcJQUXiMit3eFNyylwsJFj1gzAR4JCdIJeRBhABCpYBCpEBCA4QABqGATCBgwKBgFMcb'..
        'Epl9ukVR6AO_R6sMyiU11I8b8MBSUCEC15iKsrVO8v_m47_TRRjWPYtQ9eZ7o1ocNJHa'..
        'GUU7qqInFqtFaVnIceP6NmCsXhjs3MLrWPS8IRAy4Zf4FKmGOx3N9O2vemjUygZ9vUiS'..
        'kULdVrecinRaT8JQ5RG4bUMY04XGIwFIJiRBhADCpYBCpEBCA8QABqGATCBgwKBgGpCk'..
        'W-NR3li8GlRvqpq2YZGSIgm_PTyDI2Zwfw69grsBmPpVFW48Vw7xoMN35zcrojEpialB'..
        '_uQzlpLYOvsMl634CRIuj-n1QE3-gaZTTTE8mg-AR4mcxnTKThPnRQpbuOlYAnriwias'..
        'WiQEMbGjq_HmWioYYxFo9USlklQn4-9IJmRBhAEEpUBCpIBCAYQABqHATCBhAKBgQCoZ'..
        'kFGm9oLTqjeXZAq6j5S6i7K20V0lNdBBLqfmFBIRuTkYxhs4vUYnWjZrKRAd5bp6_py0'..
        'csmFmpl_5Yh0b-2pdo_E5PNP7LGRzKyKSiFddyykKKzVOazH8YYldDAfE8Z5HoS9e48a'..
        'n5JsPg0jr-TPu34DnJq3yv2a6dqiKL9zSCakQYSlQEKkgEIEBAAGocBMIGEAoGBALhri'..
        'hbf3EpjDQS2sCQHazoFgN0nBbE9eesnnFTfzQELXb2gnJU9enmV_aDqaHKjgtLIPpCgn'..
        '40lHrn5k6mvH5OdedyI6cCzE-N-GFp3nAq0NDJyMe0fhtIRD__CbT0ulcvkeow65ubXW'..
        'fw6dBC2gR_34rdMe_L_TGRLMWjDULbNIJqRBg'

ngx = {
    worker = {
        pid = function() return 153 end,
        exiting = function() end
    },
    log = function() end,
    sleep = function() end,
    timer = {
        at = function(delay, callback, ...)
            -- store timer callback with arguments
            local args = {...}
            scheduled_timers[#scheduled_timers+1] = function()
                callback(false, unpack(args))
            end
            return true
        end
    },
    req = {
        get_headers = function()
            local headers = {}
            headers['X-Ya-Service-Ticket'] = service_ticket
            return headers
        end
    },
    HTTP_FORBIDDEN = 403,
    HTTP_INTERNAL_SERVER_ERROR = 500,
    say = function() end,
    exit = function() end,
    status = 200,
    header = {}
}

-- mock resty.http
local http_log = ''
package.loaded['resty.http'] = {
    new = function()
        return {
            connect = function() return true end,
            request = function(self, params)
                http_log = http_log .. params.method .. '(' .. params.path .. ')'
                -- mock responses
                if params.path == '/limits' then
                    return {
                        status = 200,
                        read_body = function()
                            -- pre-serialized limits {
                            --  ''
                            --  {resource = 'resource.1', rps=10, burst=5, unit=1},
                            --  {resource = 'resource.forbidden', rps=0, burst=0, unit=1}},
                            --  'anonym'
                            --  {resource = 'resource.1', rps=0, burst=0, unit=1},
                            --  '555'
                            --  {resource = 'resource.1', rps=0, burst=0, unit=1},
                            -- version = 1 }
                            return '\16\0\0\0\0\0\0\0\8\0\16\0\4\0\8\0\8\0\0\0'..
                                    '\12\0\0\0\1\0\0\0\0\0\0\0\4\0\0\0\148\0\0'..
                                    '\0\100\0\0\0\48\0\0\0\20\0\0\0\0\0\14\0'..
                                    '\24\0\4\0\8\0\12\0\16\0\20\0\14\0\0\0\128'..
                                    '\0\0\0\56\0\0\0\10\0\0\0\5\0\0\0\1\0\0\0'..
                                    '\178\255\255\255\12\0\0\0\32\0\0\0\1\0\0'..
                                    '\0\18\0\0\0\114\101\115\111\117\114\99'..
                                    '\101\46\102\111\114\98\105\100\100\101'..
                                    '\110\0\0\0\0\0\0\0\0\0\0\226\255\255\255'..
                                    '\56\0\0\0\8\0\0\0\1\0\0\0\6\0\0\0\97\110'..
                                    '\111\110\121\109\0\0\0\0\14\0\16\0\4\0\8'..
                                    '\0\0\0\0\0\12\0\14\0\0\0\12\0\0\0\24\0\0'..
                                    '\0\1\0\0\0\10\0\0\0\114\101\115\111\117'..
                                    '\114\99\101\46\49\0\0\3\0\0\0\53\53\53\0'
                        end
                    }
                elseif params.path == '/sync' then
                    return {
                        status = 200,
                        read_body = function() return '' end
                    }
                elseif params.path == '/tvmkeys' then
                    return {
                        status = 200,
                        read_body = function() return tvm_unittest_public_keys end
                    }
                elseif params.path == '/configs' then
                    return {
                        status = 200,
                        read_body = function()
                            -- pre-serialized configs:
                            --   TVM_ID = 123
                            --   TVM_ENABLED = 1
                            return '\12\0\0\0\0\0\6\0\8\0\4\0\6\0\0\0\4\0\0\0'..
                                    '\2\0\0\0\48\0\0\0\4\0\0\0\224\255\255\255'..
                                    '\16\0\0\0\4\0\0\0\3\0\0\0\49\50\51\0\6\0'..
                                    '\0\0\84\86\77\95\73\68\0\0\8\0\12\0\4\0'..
                                    '\8\0\8\0\0\0\16\0\0\0\4\0\0\0\1\0\0\0\49'..
                                    '\0\0\0\11\0\0\0\84\86\77\95\69\78\65\66'..
                                    '\76\69\68\0' end
                    }
                end

            end,
            set_timeout = function() end,
            set_keepalive = function() end
        }
    end
}

-- Initialization and background jobs tests

local plugin = require("rate-limiter-nginx-plugin")

-- On load plugin schedules background jobs initialization with ngx.timer.at(0)
-- So right after start expect single timer registered
assert(#scheduled_timers == 1)
local run_callbacks = scheduled_timers
scheduled_timers = {}
-- run timer callbacks
for i = 1, #run_callbacks do run_callbacks[i]() end

assert(http_log == 'GET(/configs)GET(/limits)GET(/tvmkeys)POST(/sync)')
http_log = ''

-- expect 4 background jobs scheduled as timers: configs update, tvmkeys update,
-- garbage collect, counters sync
assert(#scheduled_timers == 4)
run_callbacks = scheduled_timers
scheduled_timers = {}

-- expect all jobs auto reschedule themselves each cycle
for i = 1, #run_callbacks do run_callbacks[i]() end
assert(#scheduled_timers == 4)

-- expect /sync request from counters_sync job
assert(http_log == 'GET(/configs)GET(/tvmkeys)POST(/sync)')
http_log = ''

-- rate_access tests

-- allowed
plugin.rate_access('client', 'resource.1', 1)
assert(ngx.status == 200)
-- limit exceeded
plugin.rate_access('client', 'resource.1', 10)
assert(ngx.status == 429)
assert(ngx.header['Content-Type'] == 'text/plain')
-- access forbidden
plugin.rate_access('client', 'resource.forbidden', 1)
assert(ngx.status == ngx.HTTP_FORBIDDEN)

-- no service_ticket header
ngx.status = 200
ngx.header = {}
plugin.tvm_rate_access('resource.1', 1, true)
assert(ngx.status == ngx.HTTP_FORBIDDEN)
assert(ngx.header['Content-Type'] == 'text/plain')

-- invalid service ticket
ngx.status = 200
service_ticket = '3:serv:invalid'
plugin.tvm_rate_access('resource.1', 1)
assert(ngx.status == ngx.HTTP_FORBIDDEN)

-- valid service ticket, valid destination
ngx.status = 200
-- tvmknife unittest service -s 111 -d 123
service_ticket = '3:serv:CBAQ__________9_IgQIbxB7:W2z6jD6JpNgZ2YVni4ckVUgZih9'..
        'zszX_Pqy2ROqhTG7kvG9ZVDlgqP7JYxFzvcfFPxcoSP53nApzlomQAnAnWF1cAo_CH13'..
        '4O4R826Wbk_X3SpH_c3E6xrbqyqQguKxZfoMMmi9cjAetkNXEIOauZq53us7b6wdkF67'..
        '8F38GyVY'
plugin.tvm_rate_access('resource.1', 1)
assert(ngx.status == 200)

-- valid service ticket, invalid destination
ngx.status = 200
-- tvmknife unittest service -s 111 -d 321
service_ticket = '3:serv:CBAQ__________9_IgUIbxDBAg:UqvJzGzOgFj1Z7kEMNJL09YHv'..
        'A7yGSnBpjzAZ_FqigNVSE-qmt0SVGvJf7jLm0Od-jQKEwPr-mpWYaunZlcesOJlTb64N'..
        'EOiXMJXislf6xEQTSIx9sxfnu2qYvvpTCIy-ZXnoLtfZNPWIH_qA-rs29eQtumiNdxfy'..
        'xp3P_N4N0A'
plugin.tvm_rate_access('resource.1', 1)
assert(ngx.status == ngx.HTTP_FORBIDDEN)

-- valid service ticket, valid destination, access forbidden
ngx.status = 200
-- tvmknife unittest service -s 555 -d 123
service_ticket = '3:serv:CBAQ__________9_IgUIqwQQew:VRm390VvptMAR2UVjzGOE7CKb'..
        'knqEElH-HNegAR2TBNTIfWLfo4Koy-wYWJhmCTtukTDjepCtbKIJVMLAxeawmqX1btRT'..
        'XyL4T2TR_S_qIpQ4cHMHRPRlcYSSx19Ym2GTVZisHjj34UGAyXgHryUBGx_Dq3WZW4bt'..
        'z_eMfFP_6M'
plugin.tvm_rate_access('resource.1', 1)
assert(ngx.status == ngx.HTTP_FORBIDDEN)
