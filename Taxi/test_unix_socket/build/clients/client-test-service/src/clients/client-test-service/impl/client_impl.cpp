/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/schemas/schemas/services/client-test-service/api/api.yaml

#include <clients/client-test-service/impl/client_impl.hpp>

#include <clients/impl/client_helpers.hpp>
#include <codegen/impl/split_by.hpp>

#include <clients/codegen/propagated_headers.hpp>
#include <clients/codegen/qos_dict.hpp>
#include <clients/codegen/response_future.hpp>
#include <clients/http.hpp>
#include <clients/impl/envoy_metric.hpp>
#include <codegen/prepare_json.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/http/common_headers.hpp>
#include <userver/utils/algo.hpp>
#include <userver/utils/impl/wait_token_storage.hpp>
#include <userver/utils/text.hpp>
#include <userver/utils/underlying_value.hpp>

#include <boost/algorithm/string/join.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <codegen/impl/convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>

namespace {

namespace headers {}  // namespace headers

}

namespace clients::client_test_service::impl {

struct Metrics final {};

formats::json::ValueBuilder DumpMetric(Metrics& m)
{
  formats::json::ValueBuilder builder;

  return builder;
}

utils::statistics::MetricTag<Metrics> kStatistics(
    "clients.client-test-service.operations");

namespace {

struct EnvoyMetrics final {};

::formats::json::ValueBuilder DumpMetric(EnvoyMetrics& m)
{
  ::formats::json::ValueBuilder builder(::formats::json::Type::kObject);

  return builder;
}

void ResetMetric(EnvoyMetrics& m) {}

::utils::statistics::MetricTag<EnvoyMetrics> kEnvoyStatistics(
    "envoy.client-test-service.operations");

}  // namespace

class ClientImpl::Impl {
 public:
  mutable ::utils::impl::WaitTokenStorage wts;
};

ClientImpl::ClientImpl(
    ::clients::Http& http_client, const ::dynamic_config::Source& config,
    const std::string& base_url, utils::statistics::MetricsStoragePtr metrics,
    ::logging::Level body_log_level, size_t body_log_limit,
    std::optional<std::string> proxy,
    std::optional<clients::http::ProxyAuthType> proxy_auth_type,
    clients::StatisticsReachUserverInterface statistics_userver_client)
    : config_(config),
      http_client_(http_client),
      base_url_(base_url),
      base_path_(::http::ExtractPath(base_url_)),
      metrics_(std::move(metrics)),
      body_log_level_(body_log_level),
      body_log_limit_(body_log_limit),
      proxy_(std::move(proxy)),
      proxy_auth_type_(std::move(proxy_auth_type)),
      statistics_client_(statistics_userver_client.GetStandardInterface())
{
  static const std::string kUnix = "unix:/";
  if (utils::text::StartsWith(base_url_, kUnix)) {
    // strip starting "unix:" without the slash
    unix_socket_path_ = base_url_.substr(kUnix.size() - 1);

    base_url_ = "http://localhost";
  }
}

ClientImpl::~ClientImpl() = default;

}
