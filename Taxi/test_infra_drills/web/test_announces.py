import pytest

from test_infra_drills import conftest as cfg


@pytest.mark.parametrize(
    'test_request,test_result,test_status',
    [
        (
            {
                'business_unit': 'taxi',
                'drill_date': '2032-01-20',
                'type': 'telegram',
            },
            {
                'type': 'telegram',
                'message': (
                    'üå∂ #—É—á–µ–Ω–∏—è –î–¶ IVA\n'
                    '2032-01-20: –£—á–µ–Ω–∏—è –î–¶ IVA\n'
                    'comment\n'
                    '- –¢–∞–∫—Å–∏/–î–æ—Å—Ç–∞–≤–∫–∞: c 16:00 –¥–æ 19:00 // '
                    '[ticket](TAXIADMIN-102); '
                    '[—Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ]'
                    '(https://calendar.yandex-team.ru?event_id=123456))\n'
                    '- - -\n'
                    '–í–∞–∂–Ω–æ!\n'
                    '‚û§ –ú—ã –ø—Ä–æ—Å–∏–º –¥–µ–∂—É—Ä–Ω—ã—Ö –æ—Ç –≥—Ä—É–ø–ø –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, '
                    '–≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ü–∏–∫–ª –∑–∞–∫–∞–∑–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ó–£–ú–£ –£–ß–ï–ù–ò–ô '
                    '(—Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫–æ–π), –¥–µ–∂—É—Ä–Ω—ã–µ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ '
                    '–ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é\n'
                    '‚û§ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å '
                    '–≤–æ –≤—Ä–µ–º—è —É—á–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —É—á–µ–Ω–∏–π\n'
                    '‚û§ –ë–∞–∑—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–∏–µ –≤–∏—Ä—Ç—É–∞–ª–∫–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –Ω–µ –±—É–¥–µ–º\n'
                    '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª '
                    '[I LIKE TECHNO](https://t.me/+TkyY_A8Jt5pB5nJD)'
                ),
                'result': 'None',
            },
            200,
        ),
        (
            {
                'business_unit': 'taxi',
                'drill_date': '2032-01-20',
                'type': 'email',
            },
            {
                'type': 'email',
                'message': (
                    'Subject: –û–±—â–µ—è–Ω–¥–µ–∫—Å–æ–≤—ã–µ —É—á–µ–Ω–∏—è —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º IVA\n'
                    'Body: üå∂ #—É—á–µ–Ω–∏—è –î–¶ IVA\n'
                    '2032-01-20: –£—á–µ–Ω–∏—è –î–¶ IVA –≤ '
                    '–¢–∞–∫—Å–∏/–î–æ—Å—Ç–∞–≤–∫–∞ c 2032-01-20\n'
                    'comment\n'
                    '- –¢–∞–∫—Å–∏/–î–æ—Å—Ç–∞–≤–∫–∞: c 16:00 –¥–æ 19:00 // '
                    '[ticket](TAXIADMIN-102); '
                    '[—Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ]'
                    '(https://calendar.yandex-team.ru?event_id=123456))\n'
                    '- - -\n'
                    '–í–∞–∂–Ω–æ!\n'
                    '‚û§ –ú—ã –ø—Ä–æ—Å–∏–º –¥–µ–∂—É—Ä–Ω—ã—Ö –æ—Ç –≥—Ä—É–ø–ø –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, '
                    '–≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Ü–∏–∫–ª –∑–∞–∫–∞–∑–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ó–£–ú–£ –£–ß–ï–ù–ò–ô '
                    '(—Å–¥–µ–ª–∞—Ç—å —Å—Å—ã–ª–∫–æ–π), –¥–µ–∂—É—Ä–Ω—ã–µ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ '
                    '–ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é\n'
                    '‚û§ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å '
                    '–≤–æ –≤—Ä–µ–º—è —É—á–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —É—á–µ–Ω–∏–π\n'
                    '‚û§ –ë–∞–∑—ã –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–µ—Å–∫–∏–µ –≤–∏—Ä—Ç—É–∞–ª–∫–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –Ω–µ –±—É–¥–µ–º\n'
                    '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª '
                    '[I LIKE TECHNO](https://t.me/+TkyY_A8Jt5pB5nJD)'
                ),
                'result': 'None',
            },
            200,
        ),
    ],
)
@pytest.mark.usefixtures('taxi_infra_drills_mocks')
@pytest.mark.pgsql('infra_drills', files=['basic.sql'])
@pytest.mark.translations(infra_drills=cfg.TANKER)
async def test_drill_announce_get(
        web_app_client,
        staff_mockserver,
        test_request,
        test_result,
        test_status,
):
    staff_mockserver()

    path = '/infra-drills/v1/announce'
    params = {
        'business_unit': test_request['business_unit'],
        'drill_date': test_request['drill_date'],
        'type': test_request['type'],
    }

    response = await web_app_client.get(
        path=path, params=params, headers=cfg.HEADERS,
    )

    assert response.status == test_status
    response_json = await response.json()
    assert response_json == test_result
