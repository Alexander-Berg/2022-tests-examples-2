/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/schemas/schemas/services/client-test-service/api/api-3.0.yaml,
// taxi/schemas/schemas/services/client-test-service/api/api.yaml

#include <clients/client-test-service/component.hpp>

#include <clients/impl/secdist/client_proxies.hpp>
#include <userver/components/component.hpp>
#include <userver/dynamic_config/fwd.hpp>
#include <userver/dynamic_config/storage/component.hpp>
#include <userver/storages/secdist/component.hpp>
#include <userver/yaml_config/merge_schemas.hpp>

#include <client-statistics/components/statistics.hpp>
#include <clients/client-test-service/impl/client_impl.hpp>
#include <clients/codegen/qos_dict.hpp>
#include <clients/codegen/static_config_schema.hpp>
#include <taxi_config/variables/CLIENT_TEST_SERVICE_CLIENT_QOS.hpp>

namespace clients::client_test_service {

Component::Component(const ::components::ComponentConfig& config,
                     const ::components::ComponentContext& context)
    : components::LoggableComponentBase{config, context},
      config_{context.FindComponent<::components::DynamicConfig>().GetSource()},
      http_{context.FindComponent<::components::Http>()},
      statistics_storage_{
          context.FindComponent<::components::StatisticsStorage>()},
      statistics_reach_client_{
          context.FindComponent<::components::StatisticsReachClient>()},
      body_log_level_{config["body-log-level"].As<std::string>()},
      body_log_limit_{config["body-log-limit"].As<int>()}
{
  std::optional<std::string> proxy;
  const auto secdist_proxy_ref =
      config["proxy-secdist-item"].As<std::optional<std::string>>();
  if (secdist_proxy_ref) {
    auto& secdist = context.FindComponent<::components::Secdist>();
    proxy = secdist.Get()
                .Get<::clients::impl::secdist::ClientProxies>()
                .GetProxyFor(*secdist_proxy_ref);
  }

  std::optional<http::ProxyAuthType> proxy_auth_type;
  auto proxy_auth_type_cfg =
      config["proxy-auth-type"].As<std::optional<std::string>>();
  if (proxy_auth_type_cfg) {
    proxy_auth_type = http::ProxyAuthTypeFromString(*proxy_auth_type_cfg);
  }

  main_client_ =
      GetOrCreateClient(config["base-url"].As<std::string>(), std::move(proxy),
                        std::move(proxy_auth_type));

  config_subscriber_ =
      config_.UpdateAndListen(this, kName, &Component::OnConfigUpdate);
}

Component::~Component()
{
  config_subscriber_.Unsubscribe();
}

Client& Component::GetClient() noexcept { return *main_client_; }

Client& Component::GetClientFor(std::string base_url)
{
  auto client =
      GetOrCreateClient(std::move(base_url), std::nullopt, std::nullopt);
  return *client;
}

yaml_config::Schema Component::GetStaticConfigSchema()
{
  return yaml_config::MergeSchemas<components::LoggableComponentBase>(
      ::clients::codegen::kClientStaticConfigSchema);
}

void Component::OnConfigUpdate(const ::dynamic_config::Snapshot& config)
{
  (void)this;  // silence tidy
  ::clients::codegen::WarnOnInvalidQosInfoDict(
      config[::taxi_config::CLIENT_TEST_SERVICE_CLIENT_QOS]);
}

std::shared_ptr<impl::ClientImpl> Component::GetOrCreateClient(
    std::string base_url, std::optional<std::string> proxy,
    std::optional<http::ProxyAuthType> proxy_auth_type)
{
  auto endpoint_info =
      ::clients::impl::EndpointInfo{std::move(base_url), std::string()};
  auto client_ptr = clients_.Get(endpoint_info);
  if (client_ptr) {
    return client_ptr;
  }

  auto& http_client = http_.GetHttpClient();

  auto emplace_result = clients_.Emplace(
      endpoint_info, http_client, config_, endpoint_info.base_url,
      statistics_storage_.GetMetricsStorage(),
      logging::LevelFromString(body_log_level_), body_log_limit_,
      std::move(proxy), std::move(proxy_auth_type),
      statistics_reach_client_.GetUserverClient());

  return emplace_result.value;
}

}
