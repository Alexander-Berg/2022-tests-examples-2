[
  {
    "global_scope": {
      "source_code": "function doGet(obj) {\n  if (obj === undefined) {\n    return null;\n  } else {\n    return obj;\n  }\n}\n\nfunction asInt(val) {\n  let val_int = parseInt(val);\n  if (isNaN(val_int)) {\n    return null;\n  } else {\n    return val_int;\n  }\n}\n\nfunction asFloat(val) {\n  let val_float = parseFloat(val);\n  if (isNaN(val_float)) {\n    return null;\n  } else {\n    return val_float;\n  }\n}\n\nfunction valueOr(val, dft) {\n  if (val === null) {\n    return dft;\n  } else {\n    return val;\n  }\n}\n\nfunction valueAssert(val, msg) {\n  if (val == null) {\n    throw Error('Cannot get value: ' + msg);\n  }\n  return val;\n}\n\nfunction round(value, p) {\n  let divisor = Math.pow(10, p);\n  return Math.round(value * divisor) / divisor;\n}"
    },
    "name": "predict_cpo_basic",
    "stages": [
      {
        "conditions": [],
        "in_bindings": [
          {
            "domain": "input",
            "query": {
              "operations": [
                {
                  "property_name": "cpo_arguments"
                }
              ]
            }
          },
          {
            "domain": "input",
            "query": {
              "operations": [
                {
                  "property_name": "cpo_coefficients"
                }
              ]
            }
          }
        ],
        "name": "main",
        "optional": false,
        "out_bindings": [
          {
            "alias": "cpo",
            "query": "cpo"
          }
        ],
        "source_code": "let per_order_fix = valueAssert(doGet(cpo_coefficients.per_order_fix), 'cpo_coefficients.per_order_fix');\nlet per_km_fix = valueAssert(doGet(cpo_coefficients.per_km_fix), 'cpo_coefficients.per_km_fix');\n\nvar cpo_value = 0;\nlet orders = doGet(cpo_arguments.orders);\nif (orders === null) {\n  cpo_value =\n    per_order_fix +\n    (cpo_arguments.to_rest_distance_m + cpo_arguments.to_client_distance_m) / 1000 *\n    per_km_fix * cpo_arguments.courier_demand_coefficient;\n} else {\n  for (const order of orders) {\n    var order_distance_m = 0;\n    order_distance_m += order.to_client_distance_m;\n    if (orders.length === 1 || doGet(order.is_first_in_batch) === true) {\n      order_distance_m += cpo_arguments.to_rest_distance_m;\n    } else {\n      order_distance_m += valueOr(doGet(order.to_rest_distance_m), 0);\n    }\n    cpo_value +=\n      per_order_fix +\n      order_distance_m / 1000 * per_km_fix * order.courier_demand_coefficient;\n  }\n}\nreturn {cpo: {cpo: round(cpo_value, 2)}}"
      }
    ]
  }
]
