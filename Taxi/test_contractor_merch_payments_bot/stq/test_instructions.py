import pytest

from contractor_merch_payments_bot.generated.stq3 import (
    pytest_plugin as stq_plugin,
)
from test_contractor_merch_payments_bot.mocks import (
    authorization as authorization_mocks,
)
from test_contractor_merch_payments_bot.mocks import telegram as telegram_mocks

CHAT_ID = 419406554

IMAGES = {
    'instructions': {
        'help': (
            'https://taxi-mvp.s3.yandex.net/pro-marketplace/telegram/help.png'
        ),
        'scanning': (
            'https://taxi-mvp.s3.yandex.net/'
            'pro-marketplace/telegram/scanning.png'
        ),
        'setting_price': (
            'https://taxi-mvp.s3.yandex.net/'
            'pro-marketplace/telegram/setting_price.png'
        ),
        'price_confirmation': (
            'https://taxi-mvp.s3.yandex.net/'
            'pro-marketplace/telegram/price_confirmation.png'
        ),
        'completion': (
            'https://taxi-mvp.s3.yandex.net/'
            'pro-marketplace/telegram/completion.png'
        ),
    },
}


@pytest.mark.config(CONTRACTOR_MERCH_PAYMENTS_BOT_IMAGES=IMAGES)
async def test_introduction(
        stq_runner: stq_plugin.Stq3Runner,
        mockserver,
        mock_telegram_service: telegram_mocks.MockedTelegramServiceContext,
        mock_authorization_services: (
            authorization_mocks.MockedAuthorizationServicesContext
        ),
        load_json,
):
    update = load_json('request_with_start.json')
    await (
        stq_runner.contractor_merch_payments_bot_process_telegram_message.call(
            task_id='task_id', args=[], kwargs=dict(update=update),
        )
    )

    send_message_request = (
        mock_telegram_service.send_message.handler.next_call()['request']
    )
    assert send_message_request.json == {
        'chat_id': 419406554,
        'text': (
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, `test_Victor`! üëã\n'
            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞—Ç—ë–∂ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, QR-–∫–æ–¥!\n'
            '\n'
            '–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /help'
        ),
        'parse_mode': 'markdown',
        'reply_markup': {
            'keyboard': [[{'text': '–°–ø—Ä–∞–≤–∫–∞ üìö'}]],
            'resize_keyboard': True,
            'one_time_keyboard': False,
            'selective': False,
        },
    }


@pytest.mark.parametrize(
    ['request_json'],
    [
        pytest.param('request_with_help.json', id='instructions_with_help'),
        pytest.param(
            'request_with_help_key.json', id='instructions_with_help_key',
        ),
    ],
)
@pytest.mark.config(CONTRACTOR_MERCH_PAYMENTS_BOT_IMAGES=IMAGES)
async def test_instructions_with_command(
        stq_runner: stq_plugin.Stq3Runner,
        mockserver,
        mock_telegram_service: telegram_mocks.MockedTelegramServiceContext,
        mock_authorization_services: (
            authorization_mocks.MockedAuthorizationServicesContext
        ),
        load_json,
        request_json,
):
    update = load_json(request_json)
    await (
        stq_runner.contractor_merch_payments_bot_process_telegram_message.call(
            task_id='task_id', args=[], kwargs=dict(update=update),
        )
    )

    send_photo_request = mock_telegram_service.send_photo.handler.next_call()[
        'request'
    ]
    assert send_photo_request.json == {
        'caption': (
            '–ü—Ä–∏–≤–µ—Ç üëã\n'
            '\n'
            '–í —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç—å –æ–ø–ª–∞—Ç—É –æ—Ç '
            '–≤–æ–¥–∏—Ç–µ–ª–µ–π –ø–æ QR-–∫–æ–¥—É!'
        ),
        'chat_id': CHAT_ID,
        'parse_mode': 'markdown',
        'photo': (
            'https://taxi-mvp.s3.yandex.net/pro-marketplace/telegram/help.png'
        ),
        'reply_markup': {
            'inline_keyboard': [
                [{'callback_data': 'is#n#0', 'text': '–ù–∞—á–∞—Ç—å! ‚ú®'}],
            ],
        },
    }


@pytest.mark.config(CONTRACTOR_MERCH_PAYMENTS_BOT_IMAGES=IMAGES)
async def test_instructions_scroll_next(
        stq_runner: stq_plugin.Stq3Runner,
        mockserver,
        mock_telegram_service: telegram_mocks.MockedTelegramServiceContext,
        mock_authorization_services: (
            authorization_mocks.MockedAuthorizationServicesContext
        ),
        load_json,
):
    update = load_json('request_with_next_button.json')
    await (
        stq_runner.contractor_merch_payments_bot_process_telegram_message.call(
            task_id='task_id', args=[], kwargs=dict(update=update),
        )
    )

    edit_message_media_request = (
        mock_telegram_service.edit_message_media.handler.next_call()['request']
    )
    assert edit_message_media_request.json == {
        'chat_id': 419406554,
        'media': {
            'caption': (
                '*–≠—Ç–∞–ø ‚Ññ1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ*\n'
                '\n'
                '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ —É –≤–æ–¥–∏—Ç–µ–ª—è. –î–ª—è —ç—Ç–æ–≥–æ '
                '–æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –≤–∞—à–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.\n'
                '\n'
                '–ò–ª–∏ –∂–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ ¬´—Å–∫—Ä–µ–ø–∫–∏¬ª (üìé) —Å–ª–µ–≤–∞ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. '
                '–î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É (üì∑), —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å '
                '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é QR-–∫–æ–¥–∞. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç '
                '—Å–¥–µ–ª–∞–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (‚¨Ü).'
            ),
            'media': (
                'https://taxi-mvp.s3.yandex.net/pro-marketplace/'
                'telegram/scanning.png'
            ),
            'parse_mode': 'markdown',
            'type': 'photo',
        },
        'message_id': 10,
        'reply_markup': {
            'inline_keyboard': [
                [
                    {'callback_data': 'is#p#1', 'text': '‚èÆ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥'},
                    {'callback_data': 'is#n#1', 'text': '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚è≠'},
                ],
            ],
        },
    }

    assert (
        mock_telegram_service.answer_callback_query.handler.times_called == 1
    )

    answer_callback_query_request = (
        mock_telegram_service.answer_callback_query.handler.next_call()[
            'request'
        ]
    )
    assert answer_callback_query_request.json == {
        'callback_query_id': '3936498112798969358',
    }


@pytest.mark.config(CONTRACTOR_MERCH_PAYMENTS_BOT_IMAGES=IMAGES)
async def test_instructions_scroll_previous(
        stq_runner: stq_plugin.Stq3Runner,
        mockserver,
        mock_telegram_service: telegram_mocks.MockedTelegramServiceContext,
        mock_authorization_services: (
            authorization_mocks.MockedAuthorizationServicesContext
        ),
        load_json,
):
    update = load_json('request_with_previous_button.json')
    await (
        stq_runner.contractor_merch_payments_bot_process_telegram_message.call(
            task_id='task_id', args=[], kwargs=dict(update=update),
        )
    )

    edit_message_media_request = (
        mock_telegram_service.edit_message_media.handler.next_call()['request']
    )
    assert edit_message_media_request.json == {
        'chat_id': 419406554,
        'message_id': 10,
        'media': {
            'type': 'photo',
            'media': (
                'https://taxi-mvp.s3.yandex.net/pro-marketplace/'
                'telegram/price_confirmation.png'
            ),
            'caption': (
                '*–≠—Ç–∞–ø ‚Ññ3. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã*\n\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ '
                '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.'
            ),
            'parse_mode': 'markdown',
        },
        'reply_markup': {
            'inline_keyboard': [
                [
                    {'text': '‚èÆ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥', 'callback_data': 'is#p#3'},
                    {'text': '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚è≠', 'callback_data': 'is#n#3'},
                ],
            ],
        },
    }

    assert (
        mock_telegram_service.answer_callback_query.handler.times_called == 1
    )

    answer_callback_query_request = (
        mock_telegram_service.answer_callback_query.handler.next_call()[
            'request'
        ]
    )
    assert answer_callback_query_request.json == {
        'callback_query_id': '3936498112798969358',
    }
