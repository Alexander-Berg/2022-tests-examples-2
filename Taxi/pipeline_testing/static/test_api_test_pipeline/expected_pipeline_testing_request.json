{
  "input_mocks": {
    "dummy_input": {
      "foo": "bar"
    }
  },
  "output_checks": {
    "the_check": {
      "source_code": "assert(classes.econom.value > 0, 'schould be gte 0');"
    }
  },
  "pipeline": {
    "comment": "comment 1",
    "consumer": "taxi-surge",
    "created": "2019-12-16T23:38:47+03:00",
    "id": "5de7baf5eb70bf332afa25f0",
    "name": "default",
    "stages": [
      {
        "conditions": [],
        "in_bindings": [],
        "name": "start",
        "optional": false,
        "out_bindings": [
          {
            "alias": "places",
            "query": "places"
          }
        ],
        "source_code": "return {places: []};"
      },
      {
        "conditions": [],
        "in_bindings": [
          {
            "domain": "input",
            "query": {
              "operations": [
                {
                  "property_name": "place_ids"
                },
                {
                  "type": "iteration",
                  "value_alias": "place_id"
                }
              ]
            }
          },
          {
            "domain": "input",
            "query": {
              "operations": [
                {
                  "property_name": "place_settings"
                },
                {
                  "alias": "place_settings",
                  "expression": "place_id"
                }
              ]
            }
          },
          {
            "domain": "input",
            "query": "coeff"
          }
        ],
        "name": "initialization",
        "optional": false,
        "out_bindings": [
          {
            "alias": "place_data",
            "query": "places[?(@.id==place_id)]"
          }
        ],
        "source_code": "return {place_data: {id: place_id, settings: place_settings, coeff: coeff}};"
      },
      {
        "conditions": [
          {
            "stage_name": "initialization",
            "stage_statuses": [
              "passed"
            ]
          }
        ],
        "in_bindings": [],
        "name": "sample_resource_fetch",
        "optional": false,
        "resources": [
          {
            "field": "sample_resource",
            "name": "sample_resource"
          }
        ],
        "source_code": "return {sample_resource: {fetch_arg_1: 1, fetch_arg_2: 'str'}};"
      },
      {
        "conditions": [
          {
            "stage_name": "sample_resource_fetch",
            "stage_statuses": [
              "passed"
            ]
          }
        ],
        "in_bindings": [
          {
            "domain": "resource",
            "query": "sample_resource.params"
          },
          {
            "domain": "resource",
            "query": "sample_resource.string_field"
          },
          {
            "domain": "resource",
            "query": "sample_resource.number_field"
          },
          {
            "domain": "resource",
            "query": "sample_resource.integer_field"
          },
          {
            "domain": "resource",
            "query": "sample_resource.object_field.string_field{inner_string_field}"
          },
          {
            "domain": "resource",
            "query": "sample_resource.object_field.number_field{inner_number_field}"
          },
          {
            "domain": "resource",
            "query": "sample_resource.object_field.integer_field{inner_integer_field}"
          },
          {
            "domain": "input",
            "query": "place_ids.*{:place_id}"
          }
        ],
        "name": "use_resource",
        "optional": false,
        "out_bindings": [
          {
            "alias": "data",
            "query": "places[?(@.id==place_id)].data_from_resource"
          }
        ],
        "source_code": "return {data: {params: params, string_field: string_field, number_field: number_field, integer_field: integer_field, inner_string_field: inner_string_field, inner_number_field: inner_number_field, inner_integer_field: inner_integer_field }};"
      }
    ],
    "state": "active",
    "updated": "2019-12-16T23:38:47+03:00",
    "version": 0
  },
  "prefetched_resources_mocks": {},
  "resources_mocks": {
    "candidates": {
      "dummy_candidates": {
        "mock_body": "return {total: 10, free: 5}"
      }
    }
  },
  "tests": [
    {
      "id": "test_id",
      "input_mocks": {},
      "name": "test_test",
      "output_checks": {
        "imperative": {
          "source_code": "assert(true);"
        }
      },
      "prefetched_resources_mocks": {
        "zone": {
          "zone_mock": {
            "foo": "bar"
          }
        }
      },
      "resources_mocks": {
        "pin_stats": {
          "pin_stats_mock": {
            "mock_body": ""
          }
        }
      },
      "scope": "global",
      "testcases": [
        {
          "input_mock": "dummy_input",
          "name": "testcase",
          "output_checks": [
            "imperative"
          ],
          "prefetched_resources": {
            "zone": "zone_mock"
          },
          "resource_mocks": {
            "pin_stats": "pin_stats_mock"
          }
        }
      ]
    }
  ]
}
