##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'raw_mdb_orders_increment'
creation_dttm: '20180402000001'
##DESCRIPTION
Exception message: Tablet ac85-3d92e8-3fe02be-d72ef807 is in "freezing" state

***** Details:
Received HTTP response with error
    origin          taxi-etl01h.taxi.yandex.net in 2018-04-21T04:22:51.875479Z
    headers         {
                      "X-YT-Correlation-Id": "66740b19-2d7d47cc-fd899faf-87895bff",
                      "Accept-Encoding": "gzip, identity",
                      "X-Started-By": "{\"pid\"=565779;\"user\"=\"robot-taxi-stat\";}",
                      "X-YT-Header-Format": "<format=text>yson",
                      "Content-Type": "application/x-yt-yson-text",
                      "User-Agent": "Python wrapper 0.8.27-0"
                    }
    params          {
                      "path": "//home/taxi-dwh/raw/mdb/orders/2018-04-01",
                      "retry": "false",
                      "mutation_id": "c8eec96-31becf90-9d707cc6-5f125d7c",
                      "freeze": false
                    }
    url             http://hahn.yt.yandex.net/api/v3/mount_table
    transparent     True
Tablet ac85-3d92e8-3fe02be-d72ef807 is in "freezing" state
    origin          m01-sas.hahn.yt.yandex.net in 2018-04-21T04:22:51.871780Z (pid 999148, tid 18390c546ae58938, fid ffeee7da0d15fa23)


Exception type: <class 'yt.wrapper.errors.YtHttpResponseError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py", line 13, in <module>
    loader.load()
  File "/home/robot-taxi-stat/etl/lib/yt/dyntable_operation/dynamic_table_loaders.py", line 47, in load
    records
  File "/home/robot-taxi-stat/etl/lib/yt/dyntable_operation/operations.py", line 58, in insert_chunk_in_dynamic_table
    mount_table(path)
  File "/home/robot-taxi-stat/etl/lib/decorators.py", line 20, in decorated
    result = fn(*args, **kwargs)
  File "/home/robot-taxi-stat/etl/lib/yt/dyntable_operation/operations.py", line 14, in mount_table
    return yt_client.mount_table(path, sync=sync)
  File "<decorator-gen-87>", line 2, in mount_table
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/client_helpers.py", line 48, in decorator
    return original_func(*args, client=self, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/dynamic_table_commands.py", line 281, in mount_table
    make_request("mount_table", params, client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py", line 115, in make_request
    client=client)
  File "<decorator-gen-2>", line 2, in make_request
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/common.py", line 245, in forbidden_inside_job
    return func(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py", line 272, in make_request
    client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 290, in make_request_with_retries
    return RequestRetrier(method=method, url=url, **kwargs).run()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py", line 59, in run
    return self.action()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 260, in action
    _raise_for_status(response, request_info)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 161, in _raise_for_status
    raise YtHttpResponseError(error=response.error(), **request_info)
YtHttpResponseError: Tablet ac85-3d92e8-3fe02be-d72ef807 is in "freezing" state

***** Details:
Received HTTP response with error
    origin          taxi-etl01h.taxi.yandex.net in 2018-04-21T04:22:51.875479Z
    headers         {
                      "X-YT-Correlation-Id": "66740b19-2d7d47cc-fd899faf-87895bff",
                      "Accept-Encoding": "gzip, identity",
                      "X-Started-By": "{\"pid\"=565779;\"user\"=\"robot-taxi-stat\";}",
                      "X-YT-Header-Format": "<format=text>yson",
                      "Content-Type": "application/x-yt-yson-text",
                      "User-Agent": "Python wrapper 0.8.27-0"
                    }
    params          {
                      "path": "//home/taxi-dwh/raw/mdb/orders/2018-04-01",
                      "retry": "false",
                      "mutation_id": "c8eec96-31becf90-9d707cc6-5f125d7c",
                      "freeze": false
                    }
    url             http://hahn.yt.yandex.net/api/v3/mount_table
    transparent     True
Tablet ac85-3d92e8-3fe02be-d72ef807 is in "freezing" state
    origin          m01-sas.hahn.yt.yandex.net in 2018-04-21T04:22:51.871780Z (pid 999148, tid 18390c546ae58938, fid ffeee7da0d15fa23)


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.yt.raw.mdb.orders.increment_loader', alter_argv = 1)

     160         sys.argv[0] = fname
     161     return _run_code(code, main_globals, None,
  -> 162                      "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7f00e3bfd9e0>
  pkg_name = 'layer.yt.raw.mdb.orders'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7f00e7a18f30, file "/...r/yt/raw/mdb/orders/increment_loader.py", line 3>, run_globals = {'DEFAULT_MONGODB_EXTRACTORS': {'doc': <function <lambda>>, 'id': <function <lambda>>}, 'MDBDynamicIncrementLoader': <class 'lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader'>, 'RawOrders': <class 'layer.yt.raw.mdb.orders.table.RawOrders'>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py', '__loader__': <pkgutil.ImpLoader instance>, '__name__': '__main__', '__package__': 'layer.yt.raw.mdb.orders', 'loader': <lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader object>}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.yt.raw.mdb.orders')

      70                        __loader__ = mod_loader,
      71                        __package__ = pkg_name)
   -> 72     exec code in run_globals
      73     return run_globals
      74

Vars:
  code = <code object <module> at 0x7f00e7a18f30, file "/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py", line 3>
  run_globals = {'DEFAULT_MONGODB_EXTRACTORS': {'doc': <function lib.extract_utils.<lambda>>,
                  'id': <function lib.extract_utils.<lambda>>},
                 'MDBDynamicIncrementLoader': lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader,
                 'RawOrders': layer.yt.raw.mdb.orders.table.RawOrders,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7f00e3bfd9e0>,
                 '__name__': '__main__',
                 '__package__': 'layer.yt.raw.mdb.orders',
                 'loader': <lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader at 0x7f00d0a6c7d0>}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/raw/mdb/orders/increment_loader.py:
 in <module>()

       9         table=RawOrders,
      10         filters={'commit_state': {'$in': [None, 'done']}},
      11         **DEFAULT_MONGODB_EXTRACTORS
      12     )
   -> 13     loader.load()

Vars:
  loader = <lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader at 0x7f00d0a6c7d0>
  loader.load = <bound method MDBDynamicIncrementLoader.load of <lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader object at 0x7f00d0a6c7d0>>

------------------------------
/home/robot-taxi-stat/etl/lib/yt/dyntable_operation/dynamic_table_loaders.py:
 in load(self = <lib.yt.dyntable_operation.dynamic_table_loaders.MDBDynamicIncrementLoader object>)

      45                     insert_chunk_in_dynamic_table(
      46                         YTMeta(self.table, partition=partition),
   -> 47                         records
      48                     )
      49             else:

Vars:
  records = <itertools._grouper at 0x7f00d0051b10>

------------------------------
/home/robot-taxi-stat/etl/lib/yt/dyntable_operation/operations.py:
 in insert_chunk_in_dynamic_table(meta = <lib.yt.meta.YTMeta object>, chunk = <itertools._grouper object>)

      56
      57     op.init_yt_table(path, meta.attributes(), replace=False)
   -> 58     mount_table(path)
      59
      60     # so we can retry

Vars:
  global mount_table = <function lib.decorators.decorated>
  path = '//home/taxi-dwh/raw/mdb/orders/2018-04-01'

------------------------------
/home/robot-taxi-stat/etl/lib/decorators.py:
 in decorated(*args = ('//home/taxi-dwh/raw/mdb/orders/2018-04-01',), **kwargs = {})

      18             for attempt in xrange(times):
      19                 try:
   -> 20                     result = fn(*args, **kwargs)
      21                     return result
      22                 except exceptions:

Vars:
  result is undefined
  fn = <function lib.yt.dyntable_operation.operations.mount_table>
  args = ('//home/taxi-dwh/raw/mdb/orders/2018-04-01',)
  kwargs = {}

------------------------------
/home/robot-taxi-stat/etl/lib/yt/dyntable_operation/operations.py:
 in mount_table(path = '//home/taxi-dwh/raw/mdb/orders/2018-04-01', sync = True)

      12 def mount_table(path, sync=True):
      13     """ Wrapper for YT method: mount_table"""
   -> 14     return yt_client.mount_table(path, sync=sync)
      15
      16

Vars:
  global yt_client = <yt.wrapper.client.YtClient at 0x7f00e053cf90>
  yt_client.mount_table = <bound method YtClient.mount_table of <yt.wrapper.client.YtClient object at 0x7f00e053cf90>>
  path = '//home/taxi-dwh/raw/mdb/orders/2018-04-01'
  sync = True

------------------------------
/home/robot-taxi-stat/<decorator-gen-87>:
 in mount_table(self = <yt.wrapper.client.YtClient object>, path = '//home/taxi-dwh/raw/mdb/orders/2018-04-01', first_tablet_index = None, last_tablet_index = None, cell_id = None, freeze = False, sync = True)


Vars:

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/client_helpers.py:
 in decorator(self = <yt.wrapper.client.YtClient object>, *args = ('//home/taxi-dwh/raw/mdb/orders/2018-04-01', None, None, None, False, True), **kwargs = {})

      46     original_func = func
      47     def decorator(self, *args, **kwargs):
   -> 48         return original_func(*args, client=self, **kwargs)
      49
      50     is_class = False

Vars:
  original_func = <function yt.wrapper.dynamic_table_commands.mount_table>
  args = ('//home/taxi-dwh/raw/mdb/orders/2018-04-01', None, None, None, False, True)
  client is undefined
  self = <yt.wrapper.client.YtClient at 0x7f00e053cf90>
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/dynamic_table_commands.py:
 in mount_table(path = //home/taxi-dwh/raw/mdb/orders/2018-04-01, first_tablet_index = None, last_tablet_index = None, cell_id = None, freeze = False, sync = True, client = <yt.wrapper.client.YtClient object>)

     279     set_param(params, "freeze", freeze)
     280
  -> 281     make_request("mount_table", params, client=client)
     282
     283     if sync:

Vars:
  global make_request = <function yt.wrapper.driver.make_request>
  params = {'freeze': False, 'path': //home/taxi-dwh/raw/mdb/orders/2018-04-01}
  client = <yt.wrapper.client.YtClient at 0x7f00e053cf90>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py:
 in make_request(command_name = 'mount_table', params = {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}, data = None, is_data_compressed = False, return_content = True, response_format = None, use_heavy_proxy = False, timeout = None, allow_retries = None, decode_content = True, batch_yson_dumps = True, client = <yt.wrapper.client.YtClient object>)

     113             allow_retries=allow_retries,
     114             decode_content=decode_content,
  -> 115             client=client)
     116     else:
     117         raise YtError("Incorrect backend type: " + backend)

Vars:
  client = <yt.wrapper.client.YtClient at 0x7f00e053cf90>

------------------------------
/home/robot-taxi-stat/<decorator-gen-2>:
 in make_request(command_name = 'mount_table', params = {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}, data = None, is_data_compressed = False, return_content = True, response_format = None, use_heavy_proxy = False, timeout = None, client = <yt.wrapper.client.YtClient object>, allow_retries = None, decode_content = True)


Vars:

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/common.py:
 in forbidden_inside_job(func = <function make_request>, *args = ('mount_table', {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}, None, False, True, None, False, None, <yt.wrapper.client.YtClient object>, None, True), **kwargs = {})

     243                       'you can override this behaviour by turning on '
     244                       '"allow_http_requests_to_yt_from_job" option in config.')
  -> 245     return func(*args, **kwargs)
     246
     247 class DoNotReplaceAction(argparse.Action):

Vars:
  func = <function yt.wrapper.http_driver.make_request>
  args = ('mount_table',
          {'freeze': False,
           'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c',
           'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01',
           'retry': 'false'},
          None,
          False,
          True,
          None,
          False,
          None,
          <yt.wrapper.client.YtClient at 0x7f00e053cf90>,
          None,
          True)
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py:
 in make_request(command_name = 'mount_table', params = {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}, data = '{"path"="//home/taxi-dwh/raw/mdb/orders/2018-04-...c96-31becf90-9d707cc6-5f125d7c";"freeze"=%false;}', is_data_compressed = False, return_content = True, response_format = None, use_heavy_proxy = False, timeout = (5000, 20000), client = <yt.wrapper.client.YtClient object>, allow_retries = True, decode_content = True)

     270         is_ping=(command_name == "ping_tx"),
     271         proxy_provider=proxy_provider,
  -> 272         client=client)
     273
     274     def process_error(response):

Vars:
  client = <yt.wrapper.client.YtClient at 0x7f00e053cf90>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in make_request_with_retries(method = 'POST', url = 'http://hahn.yt.yandex.net/api/v3/mount_table', **kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth object>, 'client': <yt.wrapper.client.YtClient object>, 'data': '{"path"="//home/taxi-dwh/raw/mdb/orders/2018-04-...c96-31becf90-9d707cc6-5f125d7c";"freeze"=%false;}', 'headers': {'Accept-Encoding': 'gzip, identity', 'Content-Type': 'application/x-yt-yson-text', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=565779;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899faf-87895bff', 'X-YT-Header-Format': '<format=text>yson'}, 'is_ping': False, 'log_body': True, 'make_retries': True, 'params': {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}, 'proxy_provider': None, 'response_format': None, ...})

     288     This function is for backward compatibility and convenience of use.
     289     """
  -> 290     return RequestRetrier(method=method, url=url, **kwargs).run()
     291
     292

Vars:
  global RequestRetrier = yt.wrapper.http_helpers.RequestRetrier
  method = 'POST'
  url = 'http://hahn.yt.yandex.net/api/v3/mount_table'
  kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth at 0x7f0054b1aed0>,
            'client': <yt.wrapper.client.YtClient at 0x7f00e053cf90>,
            'data': '{"path"="//home/taxi-dwh/raw/mdb/orders/2018-04-01";"retry"="false";"mutation_id"="c8eec96-31becf90-9d707cc6-5f125d7c";"freeze"=%false;}',
            'headers': {'Accept-Encoding': 'gzip, identity',
             'Content-Type': 'application/x-yt-yson-text',
             'User-Agent': 'Python wrapper 0.8.27-0',
             'X-Started-By': '{"pid"=565779;"user"="robot-taxi-stat";}',
             'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899faf-87895bff',
             'X-YT-Header-Format': '<format=text>yson'},
            'is_ping': False,
            'log_body': True,
            'make_retries': True,
            'params': {'freeze': False,
             'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c',
             'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01',
             'retry': 'false'},
            'proxy_provider': None,
            'response_format': None,
            'retry_action': <function yt.wrapper.http_driver.<lambda>>,
            'stream': False,
            'timeout': (5000, 20000)}
  ).run is undefined

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py:
 in run(self = <yt.wrapper.http_helpers.RequestRetrier object>)

      57                 if self.chaos_monkey_enabled and random.randint(1, 5) == 1:
      58                     raise YtRetriableError()
   -> 59                 return self.action()
      60             except self.exceptions as exception:
      61                 if attempt == retry_count:

Vars:
  self = <yt.wrapper.http_helpers.RequestRetrier at 0x7f0054b71d10>
  self.action = <bound method RequestRetrier.action of <yt.wrapper.http_helpers.RequestRetrier object at 0x7f0054b71d10>>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in action(self = <yt.wrapper.http_helpers.RequestRetrier object>)

     258         logger.debug("Response headers %r", hide_token(dict(response.headers)))
     259
  -> 260         _raise_for_status(response, request_info)
     261         return response
     262

Vars:
  global _raise_for_status = <function yt.wrapper.http_helpers._raise_for_status>
  response = <Response [400]>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'Content-Type': 'application/x-yt-yson-text',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=565779;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899faf-87895bff',
                   'X-YT-Header-Format': '<format=text>yson'},
                  'params': {'freeze': False,
                   'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c',
                   'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01',
                   'retry': 'false'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/mount_table'}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in _raise_for_status(response = <Response [400]>, request_info = {'headers': {'Accept-Encoding': 'gzip, identity', 'Content-Type': 'application/x-yt-yson-text', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=565779;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899faf-87895bff', 'X-YT-Header-Format': '<format=text>yson'}, 'params': {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}, 'url': 'http://hahn.yt.yandex.net/api/v3/mount_table'})

     159
     160     if not response.is_ok():
  -> 161         raise YtHttpResponseError(error=response.error(), **request_info)
     162
     163

Vars:
  global YtHttpResponseError = yt.wrapper.errors.YtHttpResponseError
  error is undefined
  response = <Response [400]>
  response.error = <bound method ?.error of <Response [400]>>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'Content-Type': 'application/x-yt-yson-text',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=565779;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899faf-87895bff',
                   'X-YT-Header-Format': '<format=text>yson'},
                  'params': {'freeze': False,
                   'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c',
                   'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01',
                   'retry': 'false'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/mount_table'}


---------====== Detailed exception attributes ======-------------

_cached_fqdn = 'taxi-etl01h.taxi.yandex.net'
_get_fqdn = <function _get_fqdn>
args = ()
attributes = {'datetime': '2018-04-21T04:22:51.875479Z', 'headers': {'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899...n-text', 'User-Agent': 'Python wrapper 0.8.27-0'}, 'host': 'taxi-etl01h.taxi.yandex.net', 'params': {'path': '//home/taxi-dwh/raw/mdb/orders/2018-04...c96-31becf90-9d707cc6-5f125d7c', 'freeze': False}, 'transparent': True, 'url': 'http://hahn.yt.yandex.net/api/v3/mount_table'}
code = 1
contains_code = <bound method YtHttpResponseError.contains_code of YtHttpResponseError()>
contains_text = <bound method YtHttpResponseError.contains_text of YtHttpResponseError()>
error = {u'attributes': {u'datetime': u'2018-04-21T04:22:51.871780Z', u'fid': 18441932447837190691L, u'host': u'm01-sas.hahn.yt.yandex.net', u'pid': 999148, u'tid': 1745439887292991800}, u'code': 1, u'inner_errors': [], u'message': u'Tablet ac85-3d92e8-3fe02be-d72ef807 is in "freezing" state'}
headers = {'Accept-Encoding': 'gzip, identity', 'Content-Type': 'application/x-yt-yson-text', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=565779;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '66740b19-2d7d47cc-fd899faf-87895bff', 'X-YT-Header-Format': '<format=text>yson'}
inner_errors = [{u'attributes': {u'datetime': u'2018-04-21T04:22:51.871780Z', u'fid': 18441932447837190691L, u'host': u'm01-sas.hahn.yt.yandex.net', u'pid': 999148, u'tid': 1745439887292991800}, u'code': 1, u'inner_errors': [], u'message': u'Tablet ac85-3d92e8-3fe02be-d72ef807 is in "freezing" state'}]
is_access_denied = <bound method YtHttpResponseError.is_access_denied of YtHttpResponseError()>
is_chunk_unavailable = <bound method YtHttpResponseError.is_chunk_unavailable of YtHttpResponseError()>
is_concurrent_operations_limit_reached = <bound method YtHttpResponseError.is_concurrent_operations_limit_reached of YtHttpResponseError()>
is_concurrent_transaction_lock_conflict = <bound method YtHttpResponseError.is_concurrent_transaction_lock_conflict of YtHttpResponseError()>
is_master_communication_error = <bound method YtHttpResponseError.is_master_communication_error of YtHttpResponseError()>
is_no_such_transaction = <bound method YtHttpResponseError.is_no_such_transaction of YtHttpResponseError()>
is_request_queue_size_limit_exceeded = <bound method YtHttpResponseError.is_request_queue_size_limit_exceeded of YtHttpResponseError()>
is_request_rate_limit_exceeded = <bound method YtHttpResponseError.is_request_rate_limit_exceeded of YtHttpResponseError()>
is_request_timed_out = <bound method YtHttpResponseError.is_request_timed_out of YtHttpResponseError()>
is_resolve_error = <bound method YtHttpResponseError.is_resolve_error of YtHttpResponseError()>
is_shell_exited = <bound method YtHttpResponseError.is_shell_exited of YtHttpResponseError()>
message = 'Received HTTP response with error'
params = {'freeze': False, 'mutation_id': 'c8eec96-31becf90-9d707cc6-5f125d7c', 'path': '//home/taxi-dwh/raw/mdb/orders/2018-04-01', 'retry': 'false'}
simplify = <bound method YtHttpResponseError.simplify of YtHttpResponseError()>
url = 'http://hahn.yt.yandex.net/api/v3/mount_table'
