##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'cpi_network'
creation_dttm: '20180402000004'
##DESCRIPTION
Exception message: Proxy is unavailable
    Load balancer could not find any available backend for the requested upstream

***** Details:
Proxy is unavailable
    origin taxi-etl01h.taxi.yandex.net in 2018-03-21T16:29:06.271252Z
    url http://hahn.yt.yandex.net/api/v3/remove
    request_info {'url': 'http://hahn.yt.yandex.net/api/v3/remove', 'headers': {'Accept-Encoding': 'gzip, identity', 'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a', 'X-YT-Header-Format': '<format=text>ys...message truncated...
Load balancer could not find any available backend for the requested upstream
    code 1000000
    origin sas1-5330.search.yandex.net:18785
    service production_balancer_yt_slb_two_sas


Exception type: <class 'yt.wrapper.errors.YtProxyUnavailable'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py", line 30, in <module>
    load(period, args.dst_prefix)
  File "/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py", line 19, in load
    result_path=meta.buffer_path()
  File "/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/impl.py", line 60, in calculate
    adjust_measures=adjust_measures
  File "/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance_impl.py", line 288, in calculate
    job.run()
  File "/usr/lib/python2.7/contextlib.py", line 35, in __exit__
    self.gen.throw(type, value, traceback)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/table.py", line 20, in TempTable
    remove(table, force=True, client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py", line 304, in remove
    client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/transaction_commands.py", line 10, in _make_transactional_request
    return make_request(command_name, params, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py", line 115, in make_request
    client=client)
  File "<decorator-gen-2>", line 2, in make_request
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/common.py", line 245, in forbidden_inside_job
    return func(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py", line 272, in make_request
    client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 290, in make_request_with_retries
    return RequestRetrier(method=method, url=url, **kwargs).run()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py", line 59, in run
    return self.action()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 260, in action
    _raise_for_status(response, request_info)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 151, in _raise_for_status
    raise YtProxyUnavailable(response)
YtProxyUnavailable: Proxy is unavailable
    Load balancer could not find any available backend for the requested upstream

***** Details:
Proxy is unavailable
    origin taxi-etl01h.taxi.yandex.net in 2018-03-21T16:29:06.271252Z
    url http://hahn.yt.yandex.net/api/v3/remove
    request_info {'url': 'http://hahn.yt.yandex.net/api/v3/remove', 'headers': {'Accept-Encoding': 'gzip, identity', 'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a', 'X-YT-Header-Format': '<format=text>ys...message truncated...
Load balancer could not find any available backend for the requested upstream
    code 1000000
    origin sas1-5330.search.yandex.net:18785
    service production_balancer_yt_slb_two_sas


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.yt.summary.cpi_network.performance.loader', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7f66e5a5c290>
  pkg_name = 'layer.yt.summary.cpi_network.performance'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7f66eb405f30, file "/...mmary/cpi_network/performance/loader.py", line 1>, run_globals = {'SummaryCPINetworkPerformance': <class 'layer.yt.summary.cpi_network.performance.table.SummaryCPINetworkPerformance'>, 'YTMeta': <class 'lib.yt.meta.YTMeta'>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py', '__loader__': <pkgutil.ImpLoader instance>, '__name__': '__main__', '__package__': 'layer.yt.summary.cpi_network.performance', 'args': Namespace(chunk_size=None, dst_prefix='//home/ta..., start_date=datetime.datetime(2018, 2, 1, 0, 0)), 'calculate': <function calculate>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.yt.summary.cpi_network.performance')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7f66eb405f30, file "/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py", line 1>
  run_globals = {'SummaryCPINetworkPerformance': layer.yt.summary.cpi_network.performance.table.SummaryCPINetworkPerformance,
                 'YTMeta': lib.yt.meta.YTMeta,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7f66e5a5c290>,
                 '__name__': '__main__',
                 '__package__': 'layer.yt.summary.cpi_network.performance',
                 'args': Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 20, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 2, 1, 0, 0)),
                 'calculate': <function layer.yt.summary.cpi_network.performance.impl.calculate>,
                 'dtu': <module 'lib.datetime_utils' from '/home/robot-taxi-stat/etl/lib/datetime_utils.pyc'>,
                 'etl': <module 'lib.yt.etl' from '/home/robot-taxi-stat/etl/lib/yt/etl.pyc'>,
                 'load': <function __main__.load>,
                 'parse': <function lib.arguments.parse>,
                 'period': <lib.datetime_utils.Period at 0x7f66dda6a950>}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py:
 in <module>()

      26 if __name__ == '__main__':
      27 args = parse()
      28 assert dtu.get_start_of_month(args.start_date) == args.start_date
      29 for period in dtu.calendar_month_periods(args.start_date, args.end_date):
   -> 30 load(period, args.dst_prefix)

Vars:
  load = <function __main__.load>
  period = <lib.datetime_utils.Period at 0x7f66dda6a950>
  args = Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 20, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 2, 1, 0, 0))
  args.dst_prefix = '//home/taxi-dwh'

------------------------------
/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/loader.py:
 in load(period = <lib.datetime_utils.Period object>, dst_prefix = '//home/taxi-dwh')

      17 calculate(
      18 period,
   -> 19 result_path=meta.buffer_path()
      20 )
      21

Vars:
  result_path is undefined
  meta = <lib.yt.meta.YTMeta at 0x7f66dda6f550>
  meta.buffer_path = <bound method YTMeta.buffer_path of <lib.yt.meta.YTMeta object at 0x7f66dda6f550>>

------------------------------
/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance/impl.py:
 in calculate(period = <lib.datetime_utils.Period object>, result_path = '//home/taxi-dwh/etl/buffer/summary/cpi_network/performance/2018-03')

      57 result_path=result_path,
      58 job_name='TAXIDWH: CPI Network Performance',
      59 aggregate_adjust=_get_agg_adjust_data,
   -> 60 adjust_measures=adjust_measures
      61 )

Vars:
  adjust_measures = {'click': 'adj_click_cnt',
                     'first_order': 'adj_first_order_cnt',
                     'install': 'adj_install_cnt',
                     'session': 'adj_session_cnt'}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/summary/cpi_network/performance_impl.py:
 in calculate(period = <lib.datetime_utils.Period object>, result_path = '//home/taxi-dwh/etl/buffer/summary/cpi_network/performance/2018-03', job_name = 'TAXIDWH: CPI Network Performance', aggregate_adjust = <function _get_agg_adjust_data>, adjust_measures = {'click': 'adj_click_cnt', 'first_order': 'adj_first_order_cnt', 'install': 'adj_install_cnt', 'session': 'adj_session_cnt'})

     284 .reduce(_MetricsCalculator(adjust_measures))\
     285 .filter(nf.custom(_any_not_zero, *adjust_measures.values()))\
     286 .put(result_path)
     287
  -> 288 job.run()

Vars:
  job = Job 'TAXIDWH: CPI Network Performance':
            remote_input_table_output = RemoteInputTable(
                path=Path('//home/taxi-dwh/dds/fct_adj_event/{2018-02,2018-03}'),
                ignore_missing=False)
            filter_output = remote_input_table_output | Filter(log=generic-yson-log, fields=[], filters=[...])
            project_output = filter_output | Project(<Keyword extractor from `parsed_log_line`(exclude ['utc_event_dttm'])>, msk_dt=<Extractor None = get_moscow_date_string(utc_event_dttm)>)
            group_fields_output = project_output | GroupFields(
                fields=('utm_source',
                 'platform',
                 'utm_content',
                 'msk_dt',
                 'en_adj_country',
                 'en_adj_region',
                 'en_adj_city'))
            aggregate_output = group_fields_output | Aggregate(
                aggregators={'adj_click_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_first_order_attempt_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_first_order_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_install_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_order_attempt_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_postback_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_reattribution_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_session_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_success_first_order_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1))),
                 'adj_success_order_cnt': SimpleAggregatorDescription(SumAggregator(Conditional(1)))},
                intensity='default',
                memory_limit=None)
            project2_output = aggregate_output | Project(<Keyword extractor from `parsed_log_line`>, adj_exist_flg=<Extractor None = 1>)
            project3_output = project2_output | Project(<Keyword extractor from `parsed_log_line`(exclude ['adj_postback_cnt', 'adj_success_order_cnt', 'adj_exist_flg', 'adj_first_order_attempt_cnt', 'adj_order_attempt_cnt', 'en_adj_country', 'en_adj_city', 'adj_success_first_order_cnt', 'adj_reattribution_cnt', 'en_adj_region'])>, adj_city=en_adj_city, adj_region=en_adj_region, adj_country=en_adj_country)
            map_output = project3_output | Map(
                operator=Operator(
                    function=GeneratorAdapter(
                        generator=<function layer.yt.summary.cpi_network.performance_impl._join_with_cost_handbook>),
                    name='_join_with_cost_handbook',
                    outputs=('output',),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset({TableFile(
                                   path=Path('//tmp/yt_wrapper/table_storage/cXHiUTtO3P'),
                                   filename='cost',
                                   fileformat='yson')}),
                    consumes_full_input=True,
                    hints=_Hints()),
                files=(TableFile(
                     path=Path('//tmp/yt_wrapper/table_storage/cXHiUTtO3P'),
                     filename='cost',
                     fileformat='yson'),),
                intensity='data',
                memory_limit=None,
                ordered=False,
                enable_row_index=False)
            map2_output = map_output | Map(
                operator=Operator(
                    function=GeneratorAdapter(
                        generator=<function layer.yt.summary.cpi_network.performance_impl._join_with_limit_handbook>),
                    name='_join_with_limit_handbook',
                    outputs=('output',),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset({TableFile(
                                   path=Path('//home/taxi-dwh/ods/handbook/cpi_network/monthly_limit'),
                                   filename='monthly_limit',
                                   fileformat='yson')}),
                    consumes_full_input=True,
                    hints=_Hints()),
                files=(TableFile(
                     path=Path('//home/taxi-dwh/ods/handbook/cpi_network/monthly_limit'),
                     filename='monthly_limit',
                     fileformat='yson'),),
                intensity='data',
                memory_limit=None,
                ordered=False,
                enable_row_index=False)
            map3_output = map2_output | Map(
                operator=Operator(
                    function=GeneratorAdapter(
                        generator=<layer.yt.summary.marketing_performance.mappers.NullToZeroMapper at 0x7f66d4c43f10>),
                    name='NullToZeroMapper',
                    outputs=('output',),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset(),
                    consumes_full_input=True,
                    hints=_Hints()),
                files=(),
                intensity='data',
                memory_limit=None,
                ordered=False,
                enable_row_index=False)
            project4_output = map3_output | Project(<Keyword extractor from `parsed_log_line`(exclude ['date'])>)
            group_fields2_output = project4_output | GroupFields(fields=('utm_source', 'platform', 'utm_content'))
            grouped_sort_output = group_fields2_output | GroupedSort(fields=('msk_dt',))
            reduce_output = grouped_sort_output | Reduce(
                operator=Operator(
                    function=GeneratorAdapter(
                        generator=<layer.yt.summary.cpi_network.performance_impl._MetricsCalculator at 0x7f66d4cbf490>),
                    name='_MetricsCalculator',
                    outputs=('output',),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset(),
                    consumes_full_input=True,
                    hints=_Hints()),
                files=(),
                intensity='default',
                memory_limit=None)
            filter2_output = reduce_output | Filter(log=generic-yson-log, fields=[], filters=[...])
            filter2_output | RemoteOutputTable(
                path=Path('//home/taxi-dwh/etl/buffer/summary/cpi_network/performance/2018-03'),
                allow_override=True)

  job.run = <bound method Job.run of Job(driver=YTDriver(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-priority', clean_cache=False), name='TAXIDWH: CPI Network Performance', uuid_by_name=False, environment=Environment(templates={'tmp': '$tmp_root/by-uuid/$job_uuid', 'job_root': '$home/$job_name', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_root': 'tmp/nile/$user_name', 'job_name': 'TAXIDWH: CPI Network Performance', 'checkpoints_root': '$tmp/checkpoints', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'user_name': u'robot-taxi-stat', 'job_uuid': '595676b8-2d1e-11e8-aab3-3f76fb8772cb', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/l
 ib/python2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-20', packages=frozenset([DevelopPackage(path='/home/robot-taxi-stat/etl', add_to_archive=None), Package(requirement='transliterate', path=None, add_to_archive=None), Package(requirement='pytz', path=None, add_to_archive=None), Package(requirement='bson', path=None, add_to_archive=None), Package(requirement='enum34', path=None, add_to_archive=None)]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=10, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightes
 t'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='python'), default_cluster_environment=Environment(templates={'checkpoints_root': '$tmp/checkpoints', 'tmp': '$tmp_root/by-uuid/$job_uuid', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'tmp_root': 'tmp/nile/$user_name', 'user_name': u'robot-taxi-stat', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/w
 heelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-20', packages=frozenset([]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=1, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='python'))>

------------------------------
/usr/lib/python2.7/contextlib.py:
 in __exit__(self = <contextlib.GeneratorContextManager object>, type = <class 'yt.wrapper.errors.YtProxyUnavailable'>, value = YtProxyUnavailable(), traceback = <traceback object>)

      33 value = type()
      34 try:
   -> 35 self.gen.throw(type, value, traceback)
      36 raise RuntimeError("generator didn't stop after throw()")
      37 except StopIteration, exc:

Vars:
  self = <contextlib.GeneratorContextManager at 0x7f66dda01e50>
  self.gen = <generator object TempTable at 0x7f66d6266050>
  self.gen.throw = <function throw>
  type = yt.wrapper.errors.YtProxyUnavailable
  value = yt.wrapper.errors.YtProxyUnavailable()
  traceback = <traceback at 0x7f66d4c20e60>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/table.py:
 in TempTable(path = None, prefix = None, attributes = None, client = <yt.wrapper.client.YtClient object>)

      17 try:
      18 yield table
      19 finally:
   -> 20 remove(table, force=True, client=client)
      21

Vars:
  remove = <function yt.wrapper.cypress_commands.remove>
  table = '//tmp/yt_wrapper/table_storage/cXHiUTtO3P'
  force is undefined
  builtin True = True
  client = <yt.wrapper.client.YtClient at 0x7f66ddbaf110>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py:
 in remove(path = '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', recursive = False, force = True, client = <yt.wrapper.client.YtClient object>)

     302 "force": bool_to_string(force)
     303 },
  -> 304 client=client)
     305
     306 def create(type, path=None, recursive=False, ignore_existing=False, force=None, attributes=None, client=None):

Vars:
  client = <yt.wrapper.client.YtClient at 0x7f66ddbaf110>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/transaction_commands.py:
 in _make_transactional_request(command_name = 'remove', params = {'force': 'true', 'path': //tmp/yt_wrapper/table_storage/cXHiUTtO3P, 'recursive': 'false'}, **kwargs = {'client': <yt.wrapper.client.YtClient object>})

       8
       9 def _make_transactional_request(command_name, params, **kwargs):
   -> 10 return make_request(command_name, params, **kwargs)
      11
      12 def _make_formatted_transactional_request(command_name, params, format, **kwargs):

Vars:
  global make_request = <function yt.wrapper.driver.make_request>
  command_name = 'remove'
  params = {'force': 'true',
            'path': //tmp/yt_wrapper/table_storage/cXHiUTtO3P,
            'recursive': 'false'}
  kwargs = {'client': <yt.wrapper.client.YtClient at 0x7f66ddbaf110>}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py:
 in make_request(command_name = 'remove', params = {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, data = None, is_data_compressed = False, return_content = True, response_format = None, use_heavy_proxy = False, timeout = None, allow_retries = None, decode_content = True, batch_yson_dumps = True, client = <yt.wrapper.client.YtClient object>)

     113 allow_retries=allow_retries,
     114 decode_content=decode_content,
  -> 115 client=client)
     116 else:
     117 raise YtError("Incorrect backend type: " + backend)

Vars:
  client = <yt.wrapper.client.YtClient at 0x7f66ddbaf110>

------------------------------
/home/robot-taxi-stat/<decorator-gen-2>:
 in make_request(command_name = 'remove', params = {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, data = None, is_data_compressed = False, return_content = True, response_format = None, use_heavy_proxy = False, timeout = None, client = <yt.wrapper.client.YtClient object>, allow_retries = None, decode_content = True)


Vars:

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/common.py:
 in forbidden_inside_job(func = <function make_request>, *args = ('remove', {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, None, False, True, None, False, None, <yt.wrapper.client.YtClient object>, None, True), **kwargs = {})

     243 'you can override this behaviour by turning on '
     244 '"allow_http_requests_to_yt_from_job" option in config.')
  -> 245 return func(*args, **kwargs)
     246
     247 class DoNotReplaceAction(argparse.Action):

Vars:
  func = <function yt.wrapper.http_driver.make_request>
  args = ('remove',
          {'force': 'true',
           'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f',
           'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P',
           'recursive': 'false',
           'retry': 'false'},
          None,
          False,
          True,
          None,
          False,
          None,
          <yt.wrapper.client.YtClient at 0x7f66ddbaf110>,
          None,
          True)
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py:
 in make_request(command_name = 'remove', params = {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, data = '{"path"="//tmp/yt_wrapper/table_storage/cXHiUTtO...utation_id"="fe5d1cd-398112f9-dc057ceb-6f5201f";}', is_data_compressed = False, return_content = True, response_format = None, use_heavy_proxy = False, timeout = (5000, 20000), client = <yt.wrapper.client.YtClient object>, allow_retries = True, decode_content = True)

     270 is_ping=(command_name == "ping_tx"),
     271 proxy_provider=proxy_provider,
  -> 272 client=client)
     273
     274 def process_error(response):

Vars:
  client = <yt.wrapper.client.YtClient at 0x7f66ddbaf110>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in make_request_with_retries(method = 'POST', url = 'http://hahn.yt.yandex.net/api/v3/remove', **kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth object>, 'client': <yt.wrapper.client.YtClient object>, 'data': '{"path"="//tmp/yt_wrapper/table_storage/cXHiUTtO...utation_id"="fe5d1cd-398112f9-dc057ceb-6f5201f";}', 'headers': {'Accept-Encoding': 'gzip, identity', 'Content-Type': 'application/x-yt-yson-text', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a', 'X-YT-Header-Format': '<format=text>yson'}, 'is_ping': False, 'log_body': True, 'make_retries': True, 'params': {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, 'proxy_provider': None, 'response_format': None, ...})

     288 This function is for backward compatibility and convenience of use.
     289 """
  -> 290 return RequestRetrier(method=method, url=url, **kwargs).run()
     291
     292

Vars:
  global RequestRetrier = yt.wrapper.http_helpers.RequestRetrier
  method = 'POST'
  url = 'http://hahn.yt.yandex.net/api/v3/remove'
  kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth at 0x7f66d4c65250>,
            'client': <yt.wrapper.client.YtClient at 0x7f66ddbaf110>,
            'data': '{"path"="//tmp/yt_wrapper/table_storage/cXHiUTtO3P";"retry"="false";"force"="true";"recursive"="false";"mutation_id"="fe5d1cd-398112f9-dc057ceb-6f5201f";}',
            'headers': {'Accept-Encoding': 'gzip, identity',
             'Content-Type': 'application/x-yt-yson-text',
             'User-Agent': 'Python wrapper 0.8.27-0',
             'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}',
             'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a',
             'X-YT-Header-Format': '<format=text>yson'},
            'is_ping': False,
            'log_body': True,
            'make_retries': True,
            'params': {'force': 'true',
             'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f',
             'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P',
             'recursive': 'false',
             'retry': 'false'},
            'proxy_provider': None,
            'response_format': None,
            'retry_action': <function yt.wrapper.http_driver.<lambda>>,
            'stream': False,
            'timeout': (5000, 20000)}
  ).run is undefined

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py:
 in run(self = <yt.wrapper.http_helpers.RequestRetrier object>)

      57 if self.chaos_monkey_enabled and random.randint(1, 5) == 1:
      58 raise YtRetriableError()
   -> 59 return self.action()
      60 except self.exceptions as exception:
      61 if attempt == retry_count:

Vars:
  self = <yt.wrapper.http_helpers.RequestRetrier at 0x7f66d4c655d0>
  self.action = <bound method RequestRetrier.action of <yt.wrapper.http_helpers.RequestRetrier object at 0x7f66d4c655d0>>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in action(self = <yt.wrapper.http_helpers.RequestRetrier object>)

     258 logger.debug("Response headers %r", hide_token(dict(response.headers)))
     259
  -> 260 _raise_for_status(response, request_info)
     261 return response
     262

Vars:
  global _raise_for_status = <function yt.wrapper.http_helpers._raise_for_status>
  response = <Response [503]>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'Content-Type': 'application/x-yt-yson-text',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a',
                   'X-YT-Header-Format': '<format=text>yson'},
                  'params': {'force': 'true',
                   'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f',
                   'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P',
                   'recursive': 'false',
                   'retry': 'false'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/remove'}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in _raise_for_status(response = <Response [503]>, request_info = {'headers': {'Accept-Encoding': 'gzip, identity', 'Content-Type': 'application/x-yt-yson-text', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a', 'X-YT-Header-Format': '<format=text>yson'}, 'params': {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, 'url': 'http://hahn.yt.yandex.net/api/v3/remove'})

     149 def _raise_for_status(response, request_info):
     150 if response.status_code == 503:
  -> 151 raise YtProxyUnavailable(response)
     152 if response.status_code == 401:
     153 url_base = "/".join(response.url.split("/")[:3])

Vars:
  global YtProxyUnavailable = yt.wrapper.errors.YtProxyUnavailable
  response = <Response [503]>


---------====== Detailed exception attributes ======-------------

_cached_fqdn = 'taxi-etl01h.taxi.yandex.net'
_get_fqdn = <function _get_fqdn>
args = ()
attributes = {'datetime': '2018-03-21T16:29:06.271252Z', 'host': 'taxi-etl01h.taxi.yandex.net', 'request_info': {'headers': {'Accept-Encoding': 'gzip, identity', 'Content-Type': 'application/x-yt-yson-text', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=870551;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': 'bdabd8a3-14918211-2ac20aa-e70a9f3a', 'X-YT-Header-Format': '<format=text>yson'}, 'params': {'force': 'true', 'mutation_id': 'fe5d1cd-398112f9-dc057ceb-6f5201f', 'path': '//tmp/yt_wrapper/table_storage/cXHiUTtO3P', 'recursive': 'false', 'retry': 'false'}, 'url': 'http://hahn.yt.yandex.net/api/v3/remove'}, 'url': u'http://hahn.yt.yandex.net/api/v3/remove'}
code = 1
inner_errors = [{u'attributes': {u'origin': u'sas1-5330.search.yandex.net:18785', u'service': u'production_balancer_yt_slb_two_sas'}, u'code': 1000000, u'message': u'Load balancer could not find any available backend for the requested upstream'}]
message = 'Proxy is unavailable'
response = <Response [503]>
simplify = <bound method YtProxyUnavailable.simplify of YtProxyUnavailable()>