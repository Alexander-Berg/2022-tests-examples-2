##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'atlas_driver_pixel'
creation_dttm: '20180528000005'
##DESCRIPTION

Exception message: ('Connection aborted.', error(111, 'Connection refused'))

Exception type: <class 'clickhouse.errors.OperationalError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py", line 112, in <module>
    load_atlas(DriverPixelSource(_window), DriverPixel)
  File "/home/robot-taxi-stat/etl/lib/atlas/atlas_utils.py", line 51, in load_atlas
    op.create_table(ch_meta)
  File "/home/robot-taxi-stat/etl/lib/clickhouse/operation.py", line 21, in create_table
    meta.table_full_name(), meta.fields(), meta.table_engine(), on_cluster)
  File "/home/robot-taxi-stat/etl/lib/clickhouse/operation_impl.py", line 151, in create_table
    engine=engine
  File "/home/robot-taxi-stat/etl/lib/clickhouse/operation_impl.py", line 34, in run_query
    cursor.execute(query)
  File "/usr/lib/python2.7/dist-packages/clickhouse/client.py", line 116, in execute
    super(JsonCompactCursor, self).execute(query_text_with_format, data=ts_data, **kwargs)
  File "/usr/lib/python2.7/dist-packages/clickhouse/client.py", line 42, in execute
    raise OperationalError(str(e))
OperationalError: ('Connection aborted.', error(111, 'Connection refused'))


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.clickhouse.atlas.driver_pixel.loader', alter_argv = 1)

     160         sys.argv[0] = fname
     161     return _run_code(code, main_globals, None,
  -> 162                      "__main__", fname, loader, pkg_name)
     163 
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7f9840666950>
  pkg_name = 'layer.clickhouse.atlas.driver_pixel'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7f98405c4c30, file "/...clickhouse/atlas/driver_pixel/loader.py", line 2>, run_globals = {'ANY_VALUE': 'any', 'AtlasCarClassRepository': <class 'lib.atlas.atlas_utils.AtlasCarClassRepository'>, 'DriverPixel': <class 'layer.clickhouse.atlas.driver_pixel.table.DriverPixel'>, 'DriverPixelSource': <class '__main__.DriverPixelSource'>, 'PandasDataSource': <class 'lib.atlas.atlas_utils.PandasDataSource'>, 'Window': <class 'lib.datetime_utils.Window'>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py', '__loader__': <pkgutil.ImpLoader instance>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.clickhouse.atlas.driver_pixel')

      70                        __loader__ = mod_loader,
      71                        __package__ = pkg_name)
   -> 72     exec code in run_globals
      73     return run_globals
      74 

Vars:
  code = <code object <module> at 0x7f98405c4c30, file "/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py", line 2>
  run_globals = {'ANY_VALUE': 'any',
                 'AtlasCarClassRepository': lib.atlas.atlas_utils.AtlasCarClassRepository,
                 'DriverPixel': layer.clickhouse.atlas.driver_pixel.table.DriverPixel,
                 'DriverPixelSource': __main__.DriverPixelSource,
                 'PandasDataSource': lib.atlas.atlas_utils.PandasDataSource,
                 'Window': lib.datetime_utils.Window,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7f9840666950>,
                 '__name__': '__main__',
                 '__package__': 'layer.clickhouse.atlas.driver_pixel',
                 '_window': <lib.datetime_utils.Window at 0x7f9832dc0690>,
                 'gz': <module 'lib.geo_zone' from '/home/robot-taxi-stat/etl/lib/geo_zone.pyc'>,
                 'load_atlas': <function lib.atlas.atlas_utils.load_atlas>,
                 'mdb': <connection.mongodb.MongoClientWrapper at 0x7f9832ef1d90>,
                 'np': <module 'numpy' from '/usr/local/lib/python2.7/dist-packages/numpy/__init__.pyc'>,
                 'pd': <module 'pandas' from '/usr/local/lib/python2.7/dist-packages/pandas/__init__.pyc'>,
                 'quadkey': <module 'quadkey' from '/usr/local/lib/python2.7/dist-packages/quadkey.pyc'>,
                 'to_pixel': <function lib.geo_utils.to_pixel>}

------------------------------
/home/robot-taxi-stat/etl/layer/clickhouse/atlas/driver_pixel/loader.py:
 in <module>()

     108     # Values was chosen based on experiments.
     109     _window = Window() \
     110         .start(seconds=-120)\
     111         .end(seconds=40)
  -> 112     load_atlas(DriverPixelSource(_window), DriverPixel)

Vars:
  load_atlas = <function lib.atlas.atlas_utils.load_atlas>
  DriverPixelSource = __main__.DriverPixelSource
  _window = <lib.datetime_utils.Window at 0x7f9832dc0690>
  DriverPixel = layer.clickhouse.atlas.driver_pixel.table.DriverPixel

------------------------------
/home/robot-taxi-stat/etl/lib/atlas/atlas_utils.py:
 in load_atlas(data_source = <__main__.DriverPixelSource object>, ch_table = <class 'layer.clickhouse.atlas.driver_pixel.table.DriverPixel'>)

      49     start_dttm = dt.datetime.utcnow()
      50     ch_meta = CHMeta(ch_table)
   -> 51     op.create_table(ch_meta)
      52     data = data_source.get_data(start_dttm)
      53     tsv_data = tsv_chunks(data, ch_meta)

Vars:
  global op = <module 'lib.clickhouse.operation' from '/home/robot-taxi-stat/etl/lib/clickhouse/operation.pyc'>
  op.create_table = <function lib.clickhouse.operation.create_table>
  ch_meta = <lib.clickhouse.meta.CHMeta at 0x7f9832dc0810>

------------------------------
/home/robot-taxi-stat/etl/lib/clickhouse/operation.py:
 in create_table(meta = <lib.clickhouse.meta.CHMeta object>)

      19     on_cluster = _on_cluster(meta)
      20     impl.create_table(
   -> 21         meta.table_full_name(), meta.fields(), meta.table_engine(), on_cluster)
      22     impl.check_table_schema(
      23         meta.table_database(), meta.table_name(), meta.fields())

Vars:
  meta = <lib.clickhouse.meta.CHMeta at 0x7f9832dc0810>
  meta.table_full_name = <bound method CHMeta.table_full_name of <lib.clickhouse.meta.CHMeta object at 0x7f9832dc0810>>
  meta.fields = <bound method CHMeta.fields of <lib.clickhouse.meta.CHMeta object at 0x7f9832dc0810>>
  meta.table_engine = <bound method CHMeta.table_engine of <lib.clickhouse.meta.CHMeta object at 0x7f9832dc0810>>
  on_cluster = True

------------------------------
/home/robot-taxi-stat/etl/lib/clickhouse/operation_impl.py:
 in create_table(table = 'atlas_v2.driver_pixel', fields = [<lib.clickhouse.table.String object>, <lib.clickhouse.table.String object>, <lib.clickhouse.table.Int object>, <lib.clickhouse.table.Int object>, <lib.clickhouse.table.Date object>, <lib.clickhouse.table.DateTime object>, <lib.clickhouse.table.String object>, <lib.clickhouse.table.String object>, <lib.clickhouse.table.Int object>], engine = "ReplicatedMergeTree('/clickhouse/tables/{shard}/..., (dttm_utc_1_min, city, car_class, pixel), 8192)", on_cluster = True)

     149             cluster=cluster_clause,
     150             fields=', '.join(field.sql_desc() for field in fields),
  -> 151             engine=engine
     152         )
     153     )

Vars:
  engine = "ReplicatedMergeTree('/clickhouse/tables/{shard}/atlas_v2/driver_pixel', '{replica}', dt, (dttm_utc_1_min, city, car_class, pixel), 8192)"

------------------------------
/home/robot-taxi-stat/etl/lib/clickhouse/operation_impl.py:
 in run_query(query = 'create table if not exists atlas_v2.driver_pixel..., (dttm_utc_1_min, city, car_class, pixel), 8192)', ignore_result = True, cursor_class = None)

      32     """
      33     cursor = _get_cursor(cursor_class)
   -> 34     cursor.execute(query)
      35     if not ignore_result:
      36         return cursor.fetchall()

Vars:
  cursor = <clickhouse.client.JsonCompactCursor at 0x7f98326cc250>
  cursor.execute = <bound method JsonCompactCursor.execute of <clickhouse.client.JsonCompactCursor object at 0x7f98326cc250>>
  query = "create table if not exists atlas_v2.driver_pixel ON CLUSTER cl01 (car_class String, city String, drivers_free Int64, drivers_total Int64, dt Date, dttm_utc_1_min DateTime, pixel String, quadkey String, ts_1_min Int64) engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/atlas_v2/driver_pixel', '{replica}', dt, (dttm_utc_1_min, city, car_class, pixel), 8192)"

------------------------------
/usr/lib/python2.7/dist-packages/clickhouse/client.py:
 in execute(self = <clickhouse.client.JsonCompactCursor object>, query = 'create table if not exists atlas_v2.driver_pixel..., (dttm_utc_1_min, city, car_class, pixel), 8192)', data = None, parameters = None, **kwargs = {})

     114             query_text = query
     115         query_text_with_format = self._prepare_query(query_text)
  -> 116         super(JsonCompactCursor, self).execute(query_text_with_format, data=ts_data, **kwargs)
     117 
     118     def fetchall(self):

Vars:
  builtin super = super
  global JsonCompactCursor = clickhouse.client.JsonCompactCursor
  self = <clickhouse.client.JsonCompactCursor at 0x7f98326cc250>
  ).execute = <bound method JsonCompactCursor.execute of <clickhouse.client.JsonCompactCursor object at 0x7f98326cc250>>
  query_text_with_format = "create table if not exists atlas_v2.driver_pixel ON CLUSTER cl01 (car_class String, city String, drivers_free Int64, drivers_total Int64, dt Date, dttm_utc_1_min DateTime, pixel String, quadkey String, ts_1_min Int64) engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/atlas_v2/driver_pixel', '{replica}', dt, (dttm_utc_1_min, city, car_class, pixel), 8192)"
  data = None
  ts_data = ''
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/clickhouse/client.py:
 in execute(self = <clickhouse.client.JsonCompactCursor object>, query = 'create table if not exists atlas_v2.driver_pixel..., (dttm_utc_1_min, city, car_class, pixel), 8192)', data = '', **kwargs = {})

      40                 raise OperationalError.from_response(e.response)
      41             else:
   -> 42                 raise OperationalError(str(e))
      43 
      44     def fetchall(self):

Vars:
  global OperationalError = clickhouse.errors.OperationalError
  builtin str = str
  e = requests.exceptions.ConnectionError(requests.packages.urllib3.exceptions.ProtocolError('Connection aborted.',
                                                                                             socket.error(111,
                                                                                                          'Connection refused')))


---------====== Detailed exception attributes ======-------------

args = ("('Connection aborted.', error(111, 'Connection refused'))",)
from_response = <bound method type.from_response of <class 'clickhouse.errors.OperationalError'>>
message = "('Connection aborted.', error(111, 'Connection refused'))"