##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'statface'
creation_dttm: '20180402000002'
##DESCRIPTION

Exception message: 'DataFrame' object has no attribute 'country'

Exception type: <type 'exceptions.AttributeError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py", line 34, in <module>
    load(args.start_date, args.end_date)
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py", line 21, in load
    merged_data(MONTHLY_SCALE, date_min, date_max),
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/impl.py", line 22, in merged_data
    (mc_df.country == '_total_')
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/generic.py", line 2744, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'DataFrame' object has no attribute 'country'


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.statface.finance_forecast.job', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py'
  loader = <pkgutil.ImpLoader instance at 0x7f8c696dd878>
  pkg_name = 'layer.statface.finance_forecast'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7f8c6b37e5b0, file "/.../layer/statface/finance_forecast/job.py", line 4>, run_globals = {'MONTHLY_SCALE': 'monthly', 'REPORT_LOCATION': '/taxi.yandex.ru/Finance/Forecast', 'WEEKLY_SCALE': 'weekly', '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py', '__loader__': <pkgutil.ImpLoader instance>, '__name__': '__main__', '__package__': 'layer.statface.finance_forecast', 'arg': <module 'lib.arguments' from '/home/robot-taxi-stat/etl/lib/arguments.pyc'>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.statface.finance_forecast')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7f8c6b37e5b0, file "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py", line 4>
  run_globals = {'MONTHLY_SCALE': 'monthly',
                 'REPORT_LOCATION': '/taxi.yandex.ru/Finance/Forecast',
                 'WEEKLY_SCALE': 'weekly',
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7f8c696dd878>,
                 '__name__': '__main__',
                 '__package__': 'layer.statface.finance_forecast',
                 'arg': <module 'lib.arguments' from '/home/robot-taxi-stat/etl/lib/arguments.pyc'>,
                 'args': Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 28, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 3, 1, 0, 0)),
                 'load': <function __main__.load>,
                 'merged_data': <function layer.statface.finance_forecast.impl.merged_data>,
                 'os': <module 'os' from '/usr/lib/python2.7/os.pyc'>,
                 'send_dataframe_to_statface': <function lib.statface.operation.send_dataframe_to_statface>,
                 'update_statface_config': <function lib.statface.operation.update_statface_config>}

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py:
 in <module>()

      30
      31
      32 if __name__ == '__main__':
      33 args = arg.parse()
   -> 34 load(args.start_date, args.end_date)

Vars:
  load = <function __main__.load>
  args = Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 28, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 3, 1, 0, 0))
  args.start_date = datetime.datetime(2018, 3, 1, 0, 0)
  args.end_date = datetime.datetime(2018, 3, 28, 0, 0)

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py:
 in load(date_min = datetime.datetime(2018, 3, 1, 0, 0), date_max = datetime.datetime(2018, 3, 28, 0, 0))

      19 )
      20 send_dataframe_to_statface(
   -> 21 merged_data(MONTHLY_SCALE, date_min, date_max),
      22 REPORT_LOCATION,
      23 MONTHLY_SCALE

Vars:
  global merged_data = <function layer.statface.finance_forecast.impl.merged_data>
  global MONTHLY_SCALE = 'monthly'
  date_min = datetime.datetime(2018, 3, 1, 0, 0)
  date_max = datetime.datetime(2018, 3, 28, 0, 0)

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/impl.py:
 in merged_data(scale = 'monthly', date_min = datetime.datetime(2018, 3, 1, 0, 0), date_max = datetime.datetime(2018, 3, 28, 0, 0))

      20 )
      21 totals_df = mc_df[
   -> 22 (mc_df.country == '_total_')
      23 & (mc_df.region == '_total_')
      24 ]

Vars:
  mc_df = Empty DataFrame
          Columns: []
          Index: []
  mc_df.country is undefined

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/generic.py:
 in __getattr__(self = Empty DataFrame
Columns: []
Index: [], name = 'country')

    2742 if name in self._info_axis:
    2743 return self[name]
 -> 2744 return object.__getattribute__(self, name)
    2745
    2746 def __setattr__(self, name, value):

Vars:
  builtin object = object
  object.__getattribute__ = <slot wrapper '__getattribute__' of 'object' objects>
  self = Empty DataFrame
         Columns: []
         Index: []
  name = 'country'


---------====== Detailed exception attributes ======-------------

args = ("'DataFrame' object has no attribute 'country'",)
message = "'DataFrame' object has no attribute 'country'"

