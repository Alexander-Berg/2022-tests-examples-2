##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'statface'
creation_dttm: '20180402000001'
##DESCRIPTION
Exception message: No numeric types to aggregate

Exception type: <class 'pandas.core.base.DataError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py", line 34, in <module>
    load(args.start_date, args.end_date)
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py", line 21, in load
    merged_data(MONTHLY_SCALE, date_min, date_max),
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/impl.py", line 42, in merged_data
    util_df = get_util_df_with_time_metrics(scale, date_min, date_max)
  File "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/impl.py", line 82, in get_util_df_with_time_metrics
    columns='status'
  File "/usr/local/lib/python2.7/dist-packages/pandas/tools/pivot.py", line 127, in pivot_table
    agged = grouped.agg(aggfunc)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py", line 3704, in aggregate
    return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py", line 3193, in aggregate
    result, how = self._aggregate(arg, _level=_level, *args, **kwargs)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/base.py", line 432, in _aggregate
    return getattr(self, arg)(*args, **kwargs), None
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py", line 1019, in mean
    return self._cython_agg_general('mean')
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py", line 3127, in _cython_agg_general
    how, numeric_only=numeric_only)
  File "/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py", line 3173, in _cython_agg_blocks
    raise DataError('No numeric types to aggregate')
DataError: No numeric types to aggregate


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.statface.finance_forecast.job', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py'
  loader = <pkgutil.ImpLoader instance at 0x7fde780a3878>
  pkg_name = 'layer.statface.finance_forecast'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7fde79d445b0, file "/.../layer/statface/finance_forecast/job.py", line 4>, run_globals = {'MONTHLY_SCALE': 'monthly', 'REPORT_LOCATION': '/taxi.yandex.ru/Finance/Forecast', 'WEEKLY_SCALE': 'weekly', '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py', '__loader__': <pkgutil.ImpLoader instance>, '__name__': '__main__', '__package__': 'layer.statface.finance_forecast', 'arg': <module 'lib.arguments' from '/home/robot-taxi-stat/etl/lib/arguments.pyc'>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.statface.finance_forecast')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7fde79d445b0, file "/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py", line 4>
  run_globals = {'MONTHLY_SCALE': 'monthly',
                 'REPORT_LOCATION': '/taxi.yandex.ru/Finance/Forecast',
                 'WEEKLY_SCALE': 'weekly',
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7fde780a3878>,
                 '__name__': '__main__',
                 '__package__': 'layer.statface.finance_forecast',
                 'arg': <module 'lib.arguments' from '/home/robot-taxi-stat/etl/lib/arguments.pyc'>,
                 'args': Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 5, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 2, 1, 0, 0)),
                 'load': <function __main__.load>,
                 'merged_data': <function layer.statface.finance_forecast.impl.merged_data>,
                 'os': <module 'os' from '/usr/lib/python2.7/os.pyc'>,
                 'send_dataframe_to_statface': <function lib.statface.operation.send_dataframe_to_statface>,
                 'update_statface_config': <function lib.statface.operation.update_statface_config>}

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py:
 in <module>()

      30
      31
      32 if __name__ == '__main__':
      33 args = arg.parse()
   -> 34 load(args.start_date, args.end_date)

Vars:
  load = <function __main__.load>
  args = Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 5, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 2, 1, 0, 0))
  args.start_date = datetime.datetime(2018, 2, 1, 0, 0)
  args.end_date = datetime.datetime(2018, 3, 5, 0, 0)

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/job.py:
 in load(date_min = datetime.datetime(2018, 2, 1, 0, 0), date_max = datetime.datetime(2018, 3, 5, 0, 0))

      19 )
      20 send_dataframe_to_statface(
   -> 21 merged_data(MONTHLY_SCALE, date_min, date_max),
      22 REPORT_LOCATION,
      23 MONTHLY_SCALE

Vars:
  global merged_data = <function layer.statface.finance_forecast.impl.merged_data>
  global MONTHLY_SCALE = 'monthly'
  date_min = datetime.datetime(2018, 2, 1, 0, 0)
  date_max = datetime.datetime(2018, 3, 5, 0, 0)

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/impl.py:
 in merged_data(scale = 'monthly', date_min = datetime.datetime(2018, 2, 1, 0, 0), date_max = datetime.datetime(2018, 3, 5, 0, 0))

      40 )
      41
   -> 42 util_df = get_util_df_with_time_metrics(scale, date_min, date_max)
      43 if util_df is not None:
      44 result_df = result_df \

Vars:
  util_df is undefined
  global get_util_df_with_time_metrics = <function layer.statface.finance_forecast.impl.get_util_df_with_time_metrics>
  scale = 'monthly'
  date_min = datetime.datetime(2018, 2, 1, 0, 0)
  date_max = datetime.datetime(2018, 3, 5, 0, 0)

------------------------------
/home/robot-taxi-stat/etl/layer/statface/finance_forecast/impl.py:
 in get_util_df_with_time_metrics(scale = 'monthly', date_min = datetime.datetime(2018, 2, 1, 0, 0), date_max = datetime.datetime(2018, 3, 5, 0, 0))

      80 'fielddate__ms'
      81 ],
   -> 82 columns='status'
      83 ) \
      84 .join(

Vars:
  columns is undefined

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/tools/pivot.py:
 in pivot_table(data = country ... 0

[4912 rows x 5 columns], values = ['share_duration_wo_busy'], index = ['country', 'region', 'fielddate__ms'], columns = ['status'], aggfunc = 'mean', fill_value = None, margins = False, dropna = True, margins_name = 'All')

     125
     126 grouped = data.groupby(keys)
  -> 127 agged = grouped.agg(aggfunc)
     128
     129 table = agged

Vars:
  agged is undefined
  grouped = <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>
  grouped.agg = <bound method DataFrameGroupBy.aggregate of <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>>
  aggfunc = 'mean'

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py:
 in aggregate(self = <pandas.core.groupby.DataFrameGroupBy object>, arg = 'mean', *args = (), **kwargs = {})

    3702 @Appender(SelectionMixin._agg_doc)
    3703 def aggregate(self, arg, *args, **kwargs):
 -> 3704 return super(DataFrameGroupBy, self).aggregate(arg, *args, **kwargs)
    3705
    3706 agg = aggregate

Vars:
  builtin super = super
  global DataFrameGroupBy = pandas.core.groupby.DataFrameGroupBy
  self = <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>
  ).aggregate = <bound method DataFrameGroupBy.aggregate of <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>>
  arg = 'mean'
  args = ()
  kwargs = {}

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py:
 in aggregate(self = <pandas.core.groupby.DataFrameGroupBy object>, arg = 'mean', *args = (), **kwargs = {})

    3191
    3192 _level = kwargs.pop('_level', None)
 -> 3193 result, how = self._aggregate(arg, _level=_level, *args, **kwargs)
    3194 if how is None:
    3195 return result

Vars:
  result is undefined
  how is undefined
  self = <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>
  self._aggregate = <bound method DataFrameGroupBy._aggregate of <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>>
  arg = 'mean'
  _level = None
  args = ()
  kwargs = {}

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/base.py:
 in _aggregate(self = <pandas.core.groupby.DataFrameGroupBy object>, arg = 'mean', *args = (), **kwargs = {})

     430 _level = kwargs.pop('_level', None)
     431 if isinstance(arg, compat.string_types):
  -> 432 return getattr(self, arg)(*args, **kwargs), None
     433
     434 if isinstance(arg, dict):

Vars:
  builtin getattr = <function getattr>
  self = <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>
  arg = 'mean'
  args = ()
  kwargs = {}
  builtin None = None

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py:
 in mean(self = <pandas.core.groupby.DataFrameGroupBy object>, *args = (), **kwargs = {})

    1017 nv.validate_groupby_func('mean', args, kwargs)
    1018 try:
 -> 1019 return self._cython_agg_general('mean')
    1020 except GroupByError:
    1021 raise

Vars:
  self = <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>
  self._cython_agg_general = <bound method DataFrameGroupBy._cython_agg_general of <pandas.core.groupby.DataFrameGroupBy object at 0x7fde6b633250>>

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py:
 in _cython_agg_general(self = <pandas.core.groupby.DataFrameGroupBy object>, how = 'mean', numeric_only = True)

    3125 def _cython_agg_general(self, how, numeric_only=True):
    3126 new_items, new_blocks = self._cython_agg_blocks(
 -> 3127 how, numeric_only=numeric_only)
    3128 return self._wrap_agged_blocks(new_items, new_blocks)
    3129

Vars:
  how = 'mean'
  numeric_only = True

------------------------------
/usr/local/lib/python2.7/dist-packages/pandas/core/groupby.py:
 in _cython_agg_blocks(self = <pandas.core.groupby.DataFrameGroupBy object>, how = 'mean', numeric_only = True)

    3171
    3172 if len(new_blocks) == 0:
 -> 3173 raise DataError('No numeric types to aggregate')
    3174
    3175 return data.items, new_blocks

Vars:
  global DataError = pandas.core.base.DataError


---------====== Detailed exception attributes ======-------------

args = ('No numeric types to aggregate',)
message = 'No numeric types to aggregate'

