##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'ods_order'
creation_dttm: '20180402000002'
##DESCRIPTION
Exception message: Command (map) failed

================== Operation error ==================

Materialization failed
  Input chunk a506-1f4299-3fe0064-7d47283d of sorted dynamic table //home/taxi-dwh/raw/mdb/order_proc/2018-03-01 is unavailable

==================== Failed Jobs ====================

<EMPTY>

Exception type: <class 'nile.drivers.common.progress.CommandFailedError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py", line 26, in <module>
    load(months)
  File "/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py", line 16, in load
    extractors=EXTRACTORS
  File "/home/robot-taxi-stat/etl/lib/yt/etl.py", line 79, in load_from_raw
    job.run()
  File "/usr/lib/python2.7/dist-packages/nile/api/v1/job.py", line 154, in run
    execution_plan.run()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 109, in run
    self._observe_until_someone_exits()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 176, in _observe_until_someone_exits
    progress.raise_for_state()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/common/progress.py", line 130, in raise_for_state
    raise CommandFailedError(self.fail_info, self.type)
CommandFailedError: Command (map) failed

================== Operation error ==================

Materialization failed
  Input chunk a506-1f4299-3fe0064-7d47283d of sorted dynamic table //home/taxi-dwh/raw/mdb/order_proc/2018-03-01 is unavailable

==================== Failed Jobs ====================

<EMPTY>


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.yt.ods.mdb.order.loader', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7fccace0c488>
  pkg_name = 'layer.yt.ods.mdb.order'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7fccae9cfa30, file "/...at/etl/layer/yt/ods/mdb/order/loader.py", line 4>, run_globals = {'EXTRACTORS': {'application': <function <lambda>>, 'calc_method': <function <lambda>>, 'car_model': <function <lambda>>, 'car_number': <function <lambda>>, 'car_year': <function <lambda>>, 'city': <function <lambda>>, 'comment': <function <lambda>>, 'corp_client_id': <function <lambda>>, 'corp_info': <function <lambda>>, 'corp_user_id': <function <lambda>>, ...}, 'OdsOrder': <class 'layer.yt.ods.mdb.order.table.OdsOrder'>, 'RawOrderProc': <class 'layer.yt.raw.mdb.order_proc.table.RawOrderProc'>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py', '__loader__': <pkgutil.ImpLoader instance>, '__name__': '__main__', '__package__': 'layer.yt.ods.mdb.order', 'args': Namespace(chunk_size=None, dst_prefix='//home/ta... start_date=datetime.datetime(2018, 2, 16, 0, 0))
 , ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.yt.ods.mdb.order')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7fccae9cfa30, file "/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py", line 4>
  run_globals = {'EXTRACTORS': {'application': <function lib.extract_utils.<lambda>>,
                  'calc_method': <function lib.extract_utils.<lambda>>,
                  'car_model': <function lib.extract_utils.<lambda>>,
                  'car_number': <function lib.extract_utils.<lambda>>,
                  'car_year': <function lib.extract_utils.<lambda>>,
                  'city': <function lib.extract_utils.<lambda>>,
                  'comment': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'corp_client_id': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'corp_info': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'corp_user_id': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_id': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_info': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_limit': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_nominal': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_pcnt': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_series': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'coupon_was_used': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'currency': <function lib.extract_utils.<lambda>>,
                  'device_id': <function lib.extract_utils.<lambda>>,
                  'distance_before_driving_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'driver_cancel_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'driver_cancel_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'driver_id': <function layer.yt.ods.mdb.order.extractors.extractor>,
                  'driver_info': <function lib.extract_utils.<lambda>>,
                  'driver_license': <function lib.extract_utils.<lambda>>,
                  'driver_tariff_class': <function lib.extract_utils.<lambda>>,
                  'driver_uuid': <function lib.extract_utils.<lambda>>,
                  'driving_distance_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'experiments': <function lib.extract_utils.<lambda>>,
                  'fact_destination_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'fact_destination_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'failed_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'failed_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'feedback_cancell_reason': <function lib.extract_utils.<lambda>>,
                  'feedback_info': <function lib.extract_utils.<lambda>>,
                  'feedback_low_rating_reason': <function lib.extract_utils.<lambda>>,
                  'feedback_msg': <function lib.extract_utils.<lambda>>,
                  'feedback_rating': <function lib.extract_utils.<lambda>>,
                  'mobile_app_version': <function layer.yt.ods.mdb.order.extractors.extractor>,
                  'mqc_flg': <function lib.extract_utils.<lambda>>,
                  'order_cost_w_discount': <function lib.extract_utils.<lambda>>,
                  'order_id': <function lib.extract_utils.<lambda>>,
                  'order_source': <function lib.extract_utils.<lambda>>,
                  'order_type': <function lib.extract_utils.<lambda>>,
                  'other_info': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'paid_waiting_cost': <function lib.extract_utils.<lambda>>,
                  'park_id': <function lib.extract_utils.<lambda>>,
                  'plan_cost': <function layer.yt.ods.mdb.order.extractors.extractor>,
                  'plan_destination_address': <function lib.extract_utils.<lambda>>,
                  'plan_destination_lat': <function lib.extract_utils.<lambda>>,
                  'plan_destination_lon': <function lib.extract_utils.<lambda>>,
                  'plan_destinations': <function lib.extract_utils.<lambda>>,
                  'plan_transporting_distance_km': <function layer.yt.ods.mdb.order.extractors.extractor>,
                  'plan_transporting_time_min': <function layer.yt.ods.mdb.order.extractors.extractor>,
                  'promotions': <function lib.extract_utils.<lambda>>,
                  'referral_id': <function lib.extract_utils.<lambda>>,
                  'reorder_cnt': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'request_payment_type': <function lib.extract_utils.<lambda>>,
                  'requirements': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'source_address': <function lib.extract_utils.<lambda>>,
                  'source_info': <function lib.extract_utils.<lambda>>,
                  'source_lat': <function lib.extract_utils.<lambda>>,
                  'source_lon': <function lib.extract_utils.<lambda>>,
                  'start_driving_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'start_driving_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'start_transporting_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'start_transporting_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'start_waiting_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'start_waiting_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'status': <function lib.extract_utils.<lambda>>,
                  'surge_value': <function lib.extract_utils.<lambda>>,
                  'tariff_id': <function lib.extract_utils.<lambda>>,
                  'tariff_zone': <function lib.extract_utils.<lambda>>,
                  'taxi_status': <function lib.extract_utils.<lambda>>,
                  'taximeter_order_id': <function lib.extract_utils.<lambda>>,
                  'taximeter_park_id': <function lib.extract_utils.<lambda>>,
                  'transporting_distance_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'user_agent': <function lib.extract_utils.<lambda>>,
                  'user_cancel_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'user_cancel_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'user_id': <function lib.extract_utils.<lambda>>,
                  'user_locale': <function lib.extract_utils.<lambda>>,
                  'user_phone_id': <function lib.extract_utils.<lambda>>,
                  'user_tariff_classes': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'user_uid': <function lib.extract_utils.<lambda>>,
                  'utc_assigned_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_complete_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_driver_cancel_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_driver_tech_search_finished_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_expired_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_failed_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_finished_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_order_created_dt': <function lib.extract_utils.<lambda>>,
                  'utc_order_created_dttm': <function lib.extract_utils.<lambda>>,
                  'utc_order_due_dttm': <function lib.extract_utils.<lambda>>,
                  'utc_order_updated_dttm': <function lib.extract_utils.<lambda>>,
                  'utc_referral_click_dttm': <function lib.extract_utils.<lambda>>,
                  'utc_start_driving_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_start_pending_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_start_transporting_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_start_waiting_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'utc_status_updated_dttm': <function lib.extract_utils.<lambda>>,
                  'utc_user_cancel_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                  'waiting_distance_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>},
                 'OdsOrder': layer.yt.ods.mdb.order.table.OdsOrder,
                 'RawOrderProc': layer.yt.raw.mdb.order_proc.table.RawOrderProc,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7fccace0c488>,
                 '__name__': '__main__',
                 '__package__': 'layer.yt.ods.mdb.order',
                 'args': Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 28, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 2, 16, 0, 0)),
                 'etl': <module 'lib.yt.etl' from '/home/robot-taxi-stat/etl/lib/yt/etl.pyc'>,
                 'get_months_partitions': <function lib.yt.meta.get_months_partitions>,
                 'load': <function __main__.load>,
                 'months': [datetime.datetime(2018, 2, 1, 0, 0),
                  datetime.datetime(2018, 3, 1, 0, 0)]}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py:
 in <module>()

      22 months = get_months_partitions(
      23 args.start_date,
      24 args.end_date
      25 )
   -> 26 load(months)

Vars:
  load = <function __main__.load>
  months = [datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 3, 1, 0, 0)]

------------------------------
/home/robot-taxi-stat/etl/layer/yt/ods/mdb/order/loader.py:
 in load(partitions = [datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 3, 1, 0, 0)])

      14 raw_table=RawOrderProc,
      15 partitions=partitions,
   -> 16 extractors=EXTRACTORS
      17 )
      18

Vars:
  extractors is undefined
  global EXTRACTORS = {'application': <function lib.extract_utils.<lambda>>,
                       'calc_method': <function lib.extract_utils.<lambda>>,
                       'car_model': <function lib.extract_utils.<lambda>>,
                       'car_number': <function lib.extract_utils.<lambda>>,
                       'car_year': <function lib.extract_utils.<lambda>>,
                       'city': <function lib.extract_utils.<lambda>>,
                       'comment': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'corp_client_id': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'corp_info': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'corp_user_id': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_id': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_info': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_limit': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_nominal': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_pcnt': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_series': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'coupon_was_used': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'currency': <function lib.extract_utils.<lambda>>,
                       'device_id': <function lib.extract_utils.<lambda>>,
                       'distance_before_driving_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'driver_cancel_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'driver_cancel_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'driver_id': <function layer.yt.ods.mdb.order.extractors.extractor>,
                       'driver_info': <function lib.extract_utils.<lambda>>,
                       'driver_license': <function lib.extract_utils.<lambda>>,
                       'driver_tariff_class': <function lib.extract_utils.<lambda>>,
                       'driver_uuid': <function lib.extract_utils.<lambda>>,
                       'driving_distance_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'experiments': <function lib.extract_utils.<lambda>>,
                       'fact_destination_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'fact_destination_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'failed_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'failed_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'feedback_cancell_reason': <function lib.extract_utils.<lambda>>,
                       'feedback_info': <function lib.extract_utils.<lambda>>,
                       'feedback_low_rating_reason': <function lib.extract_utils.<lambda>>,
                       'feedback_msg': <function lib.extract_utils.<lambda>>,
                       'feedback_rating': <function lib.extract_utils.<lambda>>,
                       'mobile_app_version': <function layer.yt.ods.mdb.order.extractors.extractor>,
                       'mqc_flg': <function lib.extract_utils.<lambda>>,
                       'order_cost_w_discount': <function lib.extract_utils.<lambda>>,
                       'order_id': <function lib.extract_utils.<lambda>>,
                       'order_source': <function lib.extract_utils.<lambda>>,
                       'order_type': <function lib.extract_utils.<lambda>>,
                       'other_info': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'paid_waiting_cost': <function lib.extract_utils.<lambda>>,
                       'park_id': <function lib.extract_utils.<lambda>>,
                       'plan_cost': <function layer.yt.ods.mdb.order.extractors.extractor>,
                       'plan_destination_address': <function lib.extract_utils.<lambda>>,
                       'plan_destination_lat': <function lib.extract_utils.<lambda>>,
                       'plan_destination_lon': <function lib.extract_utils.<lambda>>,
                       'plan_destinations': <function lib.extract_utils.<lambda>>,
                       'plan_transporting_distance_km': <function layer.yt.ods.mdb.order.extractors.extractor>,
                       'plan_transporting_time_min': <function layer.yt.ods.mdb.order.extractors.extractor>,
                       'promotions': <function lib.extract_utils.<lambda>>,
                       'referral_id': <function lib.extract_utils.<lambda>>,
                       'reorder_cnt': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'request_payment_type': <function lib.extract_utils.<lambda>>,
                       'requirements': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'source_address': <function lib.extract_utils.<lambda>>,
                       'source_info': <function lib.extract_utils.<lambda>>,
                       'source_lat': <function lib.extract_utils.<lambda>>,
                       'source_lon': <function lib.extract_utils.<lambda>>,
                       'start_driving_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'start_driving_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'start_transporting_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'start_transporting_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'start_waiting_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'start_waiting_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'status': <function lib.extract_utils.<lambda>>,
                       'surge_value': <function lib.extract_utils.<lambda>>,
                       'tariff_id': <function lib.extract_utils.<lambda>>,
                       'tariff_zone': <function lib.extract_utils.<lambda>>,
                       'taxi_status': <function lib.extract_utils.<lambda>>,
                       'taximeter_order_id': <function lib.extract_utils.<lambda>>,
                       'taximeter_park_id': <function lib.extract_utils.<lambda>>,
                       'transporting_distance_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'user_agent': <function lib.extract_utils.<lambda>>,
                       'user_cancel_lat': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'user_cancel_lon': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'user_id': <function lib.extract_utils.<lambda>>,
                       'user_locale': <function lib.extract_utils.<lambda>>,
                       'user_phone_id': <function lib.extract_utils.<lambda>>,
                       'user_tariff_classes': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'user_uid': <function lib.extract_utils.<lambda>>,
                       'utc_assigned_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_complete_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_driver_cancel_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_driver_tech_search_finished_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_expired_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_failed_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_finished_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_order_created_dt': <function lib.extract_utils.<lambda>>,
                       'utc_order_created_dttm': <function lib.extract_utils.<lambda>>,
                       'utc_order_due_dttm': <function lib.extract_utils.<lambda>>,
                       'utc_order_updated_dttm': <function lib.extract_utils.<lambda>>,
                       'utc_referral_click_dttm': <function lib.extract_utils.<lambda>>,
                       'utc_start_driving_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_start_pending_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_start_transporting_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_start_waiting_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'utc_status_updated_dttm': <function lib.extract_utils.<lambda>>,
                       'utc_user_cancel_dttm': <function layer.yt.ods.mdb.order.extractors.<lambda>>,
                       'waiting_distance_km': <function layer.yt.ods.mdb.order.extractors.<lambda>>}

------------------------------
/home/robot-taxi-stat/etl/lib/yt/etl.py:
 in load_from_raw(target_table = <class 'layer.yt.ods.mdb.order.table.OdsOrder'>, raw_table = <class 'layer.yt.raw.mdb.order_proc.table.RawOrderProc'>, partitions = [datetime.datetime(2018, 2, 1, 0, 0), datetime.datetime(2018, 3, 1, 0, 0)], extractors = {'application': <function <lambda>>, 'calc_method': <function <lambda>>, 'car_model': <function <lambda>>, 'car_number': <function <lambda>>, 'car_year': <function <lambda>>, 'city': <function <lambda>>, 'comment': <function <lambda>>, 'corp_client_id': <function <lambda>>, 'corp_info': <function <lambda>>, 'corp_user_id': <function <lambda>>, ...}, doc_field = 'doc')

      77 init_rotation_table(target_meta)
      78
   -> 79 job.run()
      80 rotation_to_target(target_metas)
      81

Vars:
  job = Job 'TAXIDWH ods.mdb.order order':
            remote_input_table_output = RemoteInputTable(
                path=Path('//home/taxi-dwh/raw/mdb/order_proc/2018-02-01'),
                ignore_missing=False)
            map_output = remote_input_table_output | Map(
                operator=Operator(
                    function=GeneratorAdapter(
                        generator=<lib.yt.meta.SerializerMapper at 0x7fcc9dc71e90>),
                    name='SerializerMapper',
                    outputs=('output',),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset(),
                    consumes_full_input=True,
                    hints=_Hints()),
                files=(),
                intensity='data',
                memory_limit=None,
                ordered=False,
                enable_row_index=False)
            sort_output = map_output | Sort(fields=('utc_order_created_dt', 'order_id'))
            sort_output | RemoteOutputTable(
                path=Path('//home/taxi-dwh/rotation/ods/mdb/order/2018-02-01'),
                allow_override=True)
            remote_input_table2_output = RemoteInputTable(
                path=Path('//home/taxi-dwh/raw/mdb/order_proc/2018-03-01'),
                ignore_missing=False)
            map2_output = remote_input_table2_output | Map(
                operator=Operator(
                    function=GeneratorAdapter(
                        generator=<lib.yt.meta.SerializerMapper at 0x7fcc9dc30f50>),
                    name='SerializerMapper',
                    outputs=('output',),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset(),
                    consumes_full_input=True,
                    hints=_Hints()),
                files=(),
                intensity='data',
                memory_limit=None,
                ordered=False,
                enable_row_index=False)
            sort2_output = map2_output | Sort(fields=('utc_order_created_dt', 'order_id'))
            sort2_output | RemoteOutputTable(
                path=Path('//home/taxi-dwh/rotation/ods/mdb/order/2018-03-01'),
                allow_override=True)

  job.run = <bound method Job.run of Job(driver=YTDriver(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-priority', clean_cache=False), name='TAXIDWH ods.mdb.order order', uuid_by_name=False, environment=Environment(templates={'tmp': '$tmp_root/by-uuid/$job_uuid', 'job_root': '$home/$job_name', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_root': 'tmp/nile/$user_name', 'job_name': 'TAXIDWH ods.mdb.order order', 'checkpoints_root': '$tmp/checkpoints', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'user_name': u'robot-taxi-stat', 'job_uuid': 'd3fe0fc4-3201-11e8-b485-93cde4eec2d3', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2
 .7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-27', packages=frozenset([Package(requirement='pytz', path=None, add_to_archive=None), Package(requirement='transliterate', path=None, add_to_archive=None), DevelopPackage(path='/home/robot-taxi-stat/etl', add_to_archive=None), Package(requirement='enum34', path=None, add_to_archive=None)]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=10, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'de
 fault'}), python_binary='python'), default_cluster_environment=Environment(templates={'checkpoints_root': '$tmp/checkpoints', 'tmp': '$tmp_root/by-uuid/$job_uuid', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'tmp_root': 'tmp/nile/$user_name', 'user_name': u'robot-taxi-stat', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindi
 ngs/wheelhouse'), reference_date='2018-03-27', packages=frozenset([]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=1, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='python'))>

------------------------------
/usr/lib/python2.7/dist-packages/nile/api/v1/job.py:
 in run(self = Job(driver=YTDriver(proxy='hahn.yt.yandex.net', ...mp_tables': 'default'}), python_binary='python')), checkpoints = (), store_checkpoints = True, hide_command = False, skip_publish = False)

     152 with CustomSysArgv(sys_argv):
     153 try:
  -> 154 execution_plan.run()
     155 except Exception:
     156 exc_info = sys.exc_info()

Vars:
  execution_plan = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7fcc9de007d0>
  execution_plan.run = <bound method YTExecutionPlan.run of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7fcc9de007d0>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in run(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     107 while self.queues_manager.has_more_work:
     108 self._schedule_operations()
  -> 109 self._observe_until_someone_exits()
     110 except KeyboardInterrupt:
     111 self._abort_operations()

Vars:
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7fcc9de007d0>
  self._observe_until_someone_exits = <bound method YTExecutionPlan._observe_until_someone_exits of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7fcc9de007d0>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in _observe_until_someone_exits(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     174 if not progress.has_finished_with_success:
     175 self._abort_operations()
  -> 176 progress.raise_for_state()
     177
     178 progress.finish()

Vars:
  progress = <nile.drivers.yt.progress.YTOperationProgress at 0x7fcc9d5333d0>
  progress.raise_for_state = <bound method YTOperationProgress.raise_for_state of <nile.drivers.yt.progress.YTOperationProgress object at 0x7fcc9d5333d0>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/common/progress.py:
 in raise_for_state(self = <nile.drivers.yt.progress.YTOperationProgress object>)

     128 raise self.exc_info[0], self.exc_info[1], self.exc_info[2]
     129 else:
  -> 130 raise CommandFailedError(self.fail_info, self.type)
     131
     132 @abc.abstractproperty

Vars:
  global CommandFailedError = nile.drivers.common.progress.CommandFailedError
  self = <nile.drivers.yt.progress.YTOperationProgress at 0x7fcc9d5333d0>
  self.fail_info = YTFailedOperationInfo(
                       operation_id='776142c-e7220882-3fe03e8-b3992c5e',
                       state=failed,
                       error='Materialization failed\n Input chunk a506-1f4299-3fe0064-7d47283d of sorted dynamic table //home/taxi-dwh/raw/mdb/order_proc/2018-03-01 is unavailable',
                       failed_jobs=())
  self.type = 'map'


---------====== Detailed exception attributes ======-------------

args = ()
command_type = 'map'
info = YTFailedOperationInfo(operation_id='776142c-e722..._proc/2018-03-01 is unavailable', failed_jobs=())
message = ''
