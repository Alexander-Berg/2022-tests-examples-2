##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'fraud'
creation_dttm: '20180402000002'
##DESCRIPTION
Exception message: Access denied: "read" permission for node //home/taxi-fraud/ods/production/driver/2018-03-01 is not allowed by any matching ACE

***** Details:
Received HTTP response with error
    origin taxi-etl01h.taxi.yandex.net in 2018-03-26T13:02:53.570076Z
    headers {
                      "X-YT-Correlation-Id": "1b8ea7f7-86ac3f32-702ec40c-ec7192dc",
                      "X-YT-Parameters": "{\"path\"=\"//home/taxi-fraud/ods/production/driver/2018-03-01/@_format\";\"output_format\"=\"yson\";\"transaction_id\"=\"a495-1def-3fe0001-e74ae073\";}",
                      "Accept-Encoding": "gzip, identity",
                      "X-Started-By": "{\"pid\"=479565;\"user\"=\"robot-taxi-stat\";}",
                      "X-YT-Header-Format": "<format=text>yson",
                      "User-Agent": "Python wrapper 0.8.27-0"
                    }
    params {
                      "path": "//home/taxi-fraud/ods/production/driver/2018-03-01/@_format",
                      "output_format": "yson",
                      "transaction_id": "a495-1def-3fe0001-e74ae073"
                    }
    url http://hahn.yt.yandex.net/api/v3/exists
    transparent True
Access denied: "read" permission for node //home/taxi-fraud/ods/production/driver/2018-03-01 is not allowed by any matching ACE
    code 901
    origin m04-sas.hahn.yt.yandex.net in 2018-03-26T13:02:53.571532Z (pid 938979, tid 1f593e218ab6c2f0, fid fff52e6b75eb30a3)
    permission read
    object 9e10-63cc3-3fe0191-7058753c
    user robot-taxi-stat


Exception type: <class 'yt.wrapper.errors.YtHttpResponseError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py", line 305, in <module>
    FraudDMLoader(_fraud_windows).load()
  File "/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py", line 257, in load
    self._job.run()
  File "/usr/lib/python2.7/dist-packages/nile/api/v1/job.py", line 154, in run
    execution_plan.run()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 109, in run
    self._observe_until_someone_exits()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 176, in _observe_until_someone_exits
    progress.raise_for_state()
  File "/usr/lib/python2.7/dist-packages/nile/utils/async.py", line 66, in _run
    self.function(*self.args, **self.kws)
  File "/usr/lib/python2.7/dist-packages/nile/drivers/common/execution_plan.py", line 84, in prepare
    self.prepare_output_tables()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 249, in prepare_output_tables
    if get_smart_format(self.driver.client, [path]) is None:
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/format.py", line 133, in get_smart_format
    tables_with_format = [(_, extract_format(_)) for _ in tables]
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/format.py", line 107, in extract_format
    if yt.has_attribute(table, FORMAT_ATTRIBUTE):
  File "<decorator-gen-56>", line 2, in has_attribute
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/client_helpers.py", line 48, in decorator
    return original_func(*args, client=self, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py", line 358, in has_attribute
    return exists("%s/@%s" % (path, attribute), client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py", line 285, in exists
    client=client))
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/transaction_commands.py", line 13, in _make_formatted_transactional_request
    return make_formatted_request(command_name, params, format, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py", line 162, in make_formatted_request
    **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py", line 115, in make_request
    client=client)
  File "<decorator-gen-2>", line 2, in make_request
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/common.py", line 245, in forbidden_inside_job
    return func(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py", line 272, in make_request
    client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 290, in make_request_with_retries
    return RequestRetrier(method=method, url=url, **kwargs).run()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py", line 59, in run
    return self.action()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 260, in action
    _raise_for_status(response, request_info)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 161, in _raise_for_status
    raise YtHttpResponseError(error=response.error(), **request_info)
YtHttpResponseError: Access denied: "read" permission for node //home/taxi-fraud/ods/production/driver/2018-03-01 is not allowed by any matching ACE

***** Details:
Received HTTP response with error
    origin taxi-etl01h.taxi.yandex.net in 2018-03-26T13:02:53.570076Z
    headers {
                      "X-YT-Correlation-Id": "1b8ea7f7-86ac3f32-702ec40c-ec7192dc",
                      "X-YT-Parameters": "{\"path\"=\"//home/taxi-fraud/ods/production/driver/2018-03-01/@_format\";\"output_format\"=\"yson\";\"transaction_id\"=\"a495-1def-3fe0001-e74ae073\";}",
                      "Accept-Encoding": "gzip, identity",
                      "X-Started-By": "{\"pid\"=479565;\"user\"=\"robot-taxi-stat\";}",
                      "X-YT-Header-Format": "<format=text>yson",
                      "User-Agent": "Python wrapper 0.8.27-0"
                    }
    params {
                      "path": "//home/taxi-fraud/ods/production/driver/2018-03-01/@_format",
                      "output_format": "yson",
                      "transaction_id": "a495-1def-3fe0001-e74ae073"
                    }
    url http://hahn.yt.yandex.net/api/v3/exists
    transparent True
Access denied: "read" permission for node //home/taxi-fraud/ods/production/driver/2018-03-01 is not allowed by any matching ACE
    code 901
    origin m04-sas.hahn.yt.yandex.net in 2018-03-26T13:02:53.571532Z (pid 938979, tid 1f593e218ab6c2f0, fid fff52e6b75eb30a3)
    permission read
    object 9e10-63cc3-3fe0191-7058753c
    user robot-taxi-stat


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.yt.export.fraud.driver.loader', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7f3cdcc11b00>
  pkg_name = 'layer.yt.export.fraud.driver'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7f3cdcc2c9b0, file "/.../layer/yt/export/fraud/driver/loader.py", line 3>, run_globals = {'DEFAULT_DAYS': [1, 7, 15], 'FraudDMLoader': <class '__main__.FraudDMLoader'>, 'FraudDriverStats': <class 'layer.yt.export.fraud.driver.table.FraudDriverStats'>, 'FraudWindow': <class '__main__.FraudWindow'>, 'OdsOrder': <class 'layer.yt.ods.mdb.order.table.OdsOrder'>, 'Period': <class 'lib.datetime_utils.Period'>, 'Pool': <enum 'Pool'>, 'RawSubventions': <class 'layer.yt.raw.mdb.subventions.table.RawSubventions'>, 'Record': <class 'nile.processing.record.Record'>, 'SnpAccUserPhone': <class 'layer.yt.dds.snp_acc_user_phone.table.SnpAccUserPhone'>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.yt.export.fraud.driver')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7f3cdcc2c9b0, file "/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py", line 3>
  run_globals = {'DEFAULT_DAYS': [1, 7, 15],
                 'FraudDMLoader': __main__.FraudDMLoader,
                 'FraudDriverStats': layer.yt.export.fraud.driver.table.FraudDriverStats,
                 'FraudWindow': __main__.FraudWindow,
                 'OdsOrder': layer.yt.ods.mdb.order.table.OdsOrder,
                 'Period': lib.datetime_utils.Period,
                 'Pool': lib.nile.cluster_utils.Pool,
                 'RawSubventions': layer.yt.raw.mdb.subventions.table.RawSubventions,
                 'Record': nile.processing.record.Record,
                 'SnpAccUserPhone': layer.yt.dds.snp_acc_user_phone.table.SnpAccUserPhone,
                 'StgDrivers': layer.yt.stg.mdb.drivers.table.StgDrivers,
                 'StgParks': layer.yt.stg.mdb.parks.table.StgParks,
                 'StgTariffs': layer.yt.stg.mdb.tariffs.table.StgTariffs,
                 'StgUsers': layer.yt.stg.mdb.users.table.StgUsers,
                 'SubStats': layer.yt.export.fraud.driver.metric.SubStats,
                 'Window': lib.datetime_utils.Window,
                 'YTMeta': lib.yt.meta.YTMeta,
                 'YqlSelect': lib.yql.operation.YqlSelect,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7f3cdcc11b00>,
                 '__name__': '__main__',
                 '__package__': 'layer.yt.export.fraud.driver',
                 '_fielddate': '2018-03-26',
                 '_fraud_windows': [<__main__.FraudWindow at 0x7f3cd4aee910>,
                  <__main__.FraudWindow at 0x7f3cd4aee350>,
                  <__main__.FraudWindow at 0x7f3cd4aee8d0>],
                 'cu': <module 'lib.nile.cluster_utils' from '/home/robot-taxi-stat/etl/lib/nile/cluster_utils.pyc'>,
                 'day': 15,
                 'dt': <module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so'>,
                 'dtu': <module 'lib.datetime_utils' from '/home/robot-taxi-stat/etl/lib/datetime_utils.pyc'>,
                 'last_created_dttm': datetime.datetime(2018, 3, 26, 11, 49, 59),
                 'last_order_creation': <function __main__.last_order_creation>,
                 'ne': <module 'nile.api.v1.extractors' from '/usr/lib/python2.7/dist-packages/nile/api/v1/extractors.py'>,
                 'qf': <module 'qb2.api.v1.filters' from '/usr/lib/python2.7/dist-packages/qb2/api/v1/filters.pyc'>,
                 'yt_etl': <module 'lib.yt.etl' from '/home/robot-taxi-stat/etl/lib/yt/etl.pyc'>,
                 'yt_op': <module 'lib.yt.operation' from '/home/robot-taxi-stat/etl/lib/yt/operation.pyc'>}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py:
 in <module>()

     301 period=Window().start(days=-day).apply(last_created_dttm),
     302 fielddate=_fielddate
     303 ) for day in DEFAULT_DAYS
     304 ]
  -> 305 FraudDMLoader(_fraud_windows).load()

Vars:
  FraudDMLoader = __main__.FraudDMLoader
  _fraud_windows = [<__main__.FraudWindow at 0x7f3cd4aee910>,
                    <__main__.FraudWindow at 0x7f3cd4aee350>,
                    <__main__.FraudWindow at 0x7f3cd4aee8d0>]
  ).load is undefined

------------------------------
/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py:
 in load(self = <__main__.FraudDMLoader object>)

     255 old_stream = self._job.table(meta.target_path())
     256 self._job.concat(old_stream, new_stream).put(meta.target_path())
  -> 257 self._job.run()
     258
     259

Vars:
  self = <__main__.FraudDMLoader at 0x7f3cd4b1d2d0>
  self._job = Job 'driver fraud':
                  remote_input_table_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/stg/mdb/users/users'),
                      ignore_missing=False)
                  remote_input_table2_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/stg/mdb/tariffs/tariffs'),
                      ignore_missing=False)
                  remote_input_table3_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/stg/mdb/drivers/drivers'),
                      ignore_missing=False)
                  remote_input_table4_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/dds/snp_acc_user_phone'),
                      ignore_missing=False)
                  remote_input_table5_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/raw/mdb/subventions/2018-03-01'),
                      ignore_missing=False)
                  project_output = remote_input_table_output | Project(id, device_id)
                  project2_output = remote_input_table4_output | Project(date=first_utc_order_dttm, order_id=first_order_id, is_user_first_ride=<Extractor None = True>)
                  filter_output = project2_output | Filter(log=generic-yson-log, fields=[], filters=[...])
                  project3_output = remote_input_table3_output | Project(name, updated, driver_license)
                  group_fields_output = project3_output | GroupFields(fields=('driver_license',))
                  reduce_output = group_fields_output | Reduce(
                      operator=Operator(
                          function=GeneratorAdapter(
                              generator=<function __main__.reduce_last_updated_name>),
                          name='reduce_last_updated_name',
                          outputs=('output',),
                          input_format=Records(),
                          output_format=Records(),
                          files=frozenset(),
                          consumes_full_input=True,
                          hints=_Hints()),
                      files=(),
                      intensity='default',
                      memory_limit=None)
                  map_output = remote_input_table2_output | Map(
                      operator=Operator(
                          function=GeneratorAdapter(
                              generator=<function __main__.map_create_minimals_dict>),
                          name='map_create_minimals_dict',
                          outputs=('output',),
                          input_format=Records(),
                          output_format=Records(),
                          files=frozenset(),
                          consumes_full_input=True,
                          hints=_Hints()),
                      files=(),
                      intensity='data',
                      memory_limit=None,
                      ordered=False,
                      enable_row_index=False)
                  group_fields2_output = map_output | GroupFields(fields=('category_id',))
                  top_output = group_fields2_output | Top(TopAggregator(minimal, <record>))
                  filter2_output = remote_input_table5_output | Filter(log=generic-yson-log, fields=[], filters=[...])
                  project4_output = filter2_output | Project(order_id=<Extractor None = <lambda>(doc)>, subvention_version=<Extractor None = <lambda>(doc)>, subvention_value=<Extractor None = <lambda>(doc)>)
                  group_fields3_output = project4_output | GroupFields(fields=('order_id',))
                  top2_output = group_fields3_output | Top(TopAggregator(subvention_version, <record>))
                  remote_input_table6_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/ods/mdb/order/2018-03-01'),
                      ignore_missing=False)
                  filter3_output = remote_input_table6_output | Filter(log=generic-yson-log, fields=[], filters=[...])
                  project5_output = filter3_output | Project(order_id, utc_order_created_dttm, driver_license, plan_cost, user_id, user_phone_id, park_id, city, coupon_nominal, tariff_id, travel_time=<Extractor None = extract_travel_time(utc_start_transporting_dttm, utc_complete_dttm)>, cost=order_cost_w_discount)
                  join_output = (project5_output, filter_output) | Join(
                      group_by_left=('order_id',),
                      group_by_right=('order_id',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': True,
                       'assume_unique_left': True,
                       'assume_unique_right': True},
                      memory_limit=2048)
                  join2_output = (join_output, top2_output) | Join(
                      group_by_left=('order_id',),
                      group_by_right=('order_id',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': False,
                       'assume_unique_left': True,
                       'assume_unique_right': False},
                      memory_limit=None)
                  join3_output = (join2_output, top_output) | Join(
                      group_by_left=('tariff_id',),
                      group_by_right=('category_id',),
                      type='inner',
                      hints={'assume_small_left': False,
                       'assume_small_right': True,
                       'assume_unique_left': False,
                       'assume_unique_right': True},
                      memory_limit=2048)
                  join4_output = (join3_output, project_output) | Join(
                      group_by_left=('user_id',),
                      group_by_right=('id',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': False,
                       'assume_unique_left': False,
                       'assume_unique_right': False},
                      memory_limit=None)
                  group_fields4_output = join4_output | GroupFields(fields=('driver_license', 'city'))
                  reduce2_output = group_fields4_output | Reduce(
                      operator=Operator(
                          function=GeneratorAdapter(
                              generator=<function __main__.reduce_drivers>),
                          name='reduce_drivers',
                          outputs=('output',),
                          input_format=Records(),
                          output_format=Records(),
                          files=frozenset(),
                          consumes_full_input=True,
                          hints=_Hints()),
                      files=(),
                      intensity='cpu',
                      memory_limit=None)
                  join5_output = (reduce2_output, reduce_output) | Join(
                      group_by_left=('driver_license',),
                      group_by_right=('driver_license',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': False,
                       'assume_unique_left': False,
                       'assume_unique_right': False},
                      memory_limit=None)
                  sort_output = join5_output | Sort(fields=('utc_calc_dttm', 'driver_license', 'window_days'))
                  remote_input_table7_output = RemoteInputTable(
                      path=Path('//home/taxi-fraud/ods/production/driver/2018-03-01'),
                      ignore_missing=False)
                  concat_output = (sort_output, remote_input_table7_output) | Concat()
                  concat_output | RemoteOutputTable(
                      path=Path('//home/taxi-fraud/ods/production/driver/2018-03-01'),
                      allow_override=True)

  self._job.run = <bound method Job.run of Job(driver=YTDriver(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch', clean_cache=False), name='driver fraud', uuid_by_name=False, environment=Environment(templates={'tmp': '$tmp_root/by-uuid/$job_uuid', 'job_root': '$home/$job_name', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_root': 'tmp/nile/$user_name', 'job_name': 'driver fraud', 'checkpoints_root': '$tmp/checkpoints', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'user_name': u'robot-taxi-stat', 'job_uuid': 'f29943fc-30f5-11e8-84d5-23aee2c2023d', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/whee
 lhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-25', packages=frozenset([Package(requirement='pytz', path=None, add_to_archive=None), Package(requirement='bson', path=None, add_to_archive=None), Package(requirement='transliterate', path=None, add_to_archive=None), Package(requirement='enum34', path=None, add_to_archive=None), DevelopPackage(path='/home/robot-taxi-stat/etl', add_to_archive=None)]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=10, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_ta
 bles': 'always', 'tmp_tables': 'default'}), python_binary='python'), default_cluster_environment=Environment(templates={'checkpoints_root': '$tmp/checkpoints', 'tmp': '$tmp_root/by-uuid/$job_uuid', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'tmp_root': 'tmp/nile/$user_name', 'user_name': u'robot-taxi-stat', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-
 packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-25', packages=frozenset([]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=1, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='python'))>

------------------------------
/usr/lib/python2.7/dist-packages/nile/api/v1/job.py:
 in run(self = Job(driver=YTDriver(proxy='hahn.yt.yandex.net', ...mp_tables': 'default'}), python_binary='python')), checkpoints = (), store_checkpoints = True, hide_command = False, skip_publish = False)

     152 with CustomSysArgv(sys_argv):
     153 try:
  -> 154 execution_plan.run()
     155 except Exception:
     156 exc_info = sys.exc_info()

Vars:
  execution_plan = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7f3cc473cb90>
  execution_plan.run = <bound method YTExecutionPlan.run of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7f3cc473cb90>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in run(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     107 while self.queues_manager.has_more_work:
     108 self._schedule_operations()
  -> 109 self._observe_until_someone_exits()
     110 except KeyboardInterrupt:
     111 self._abort_operations()

Vars:
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7f3cc473cb90>
  self._observe_until_someone_exits = <bound method YTExecutionPlan._observe_until_someone_exits of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7f3cc473cb90>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in _observe_until_someone_exits(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     174 if not progress.has_finished_with_success:
     175 self._abort_operations()
  -> 176 progress.raise_for_state()
     177
     178 progress.finish()

Vars:
  progress = <nile.drivers.common.progress.OneShotCommandProgress at 0x7f3cc469ac10>
  progress.raise_for_state = <bound method OneShotCommandProgress.raise_for_state of <nile.drivers.common.progress.OneShotCommandProgress object at 0x7f3cc469ac10>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/utils/async.py:
 in _run(self = <nile.utils.async.AsyncCall object>)

      64 self._notify('start')
      65 try:
   -> 66 self.function(*self.args, **self.kws)
      67 except BaseException:
      68 self._notify('exception', exc_info=sys.exc_info(), is_alive=False)

Vars:
  self = <nile.utils.async.AsyncCall at 0x7f3cc469ae50>
  self.function = <bound method YTExecutionPlan.prepare of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7f3cc473cb90>>
  self.args = ()
  self.kws = {}

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/common/execution_plan.py:
 in prepare(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

      82 self.collect_removable_tmpdirs()
      83 self.create_tmpdir()
   -> 84 self.prepare_output_tables()
      85
      86 self.resolve_packages()

Vars:
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7f3cc473cb90>
  self.prepare_output_tables = <bound method YTExecutionPlan.prepare_output_tables of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7f3cc473cb90>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in prepare_output_tables(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     247 self.driver.create(path)
     248
  -> 249 if get_smart_format(self.driver.client, [path]) is None:
     250 set_format(self.driver.client, path)
     251

Vars:
  global get_smart_format = <function nile.drivers.yt.format.get_smart_format>
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7f3cc473cb90>
  self.driver = YTDriver(
                    proxy='hahn.yt.yandex.net',
                    token='...',
                    pool='taxi-dwh-batch',
                    clean_cache=False)
  self.driver.client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')
  path = YTPath(
             path='home/taxi-fraud/ods/production/driver/2018-03-01',
             client=YTClient(
                 proxy='hahn.yt.yandex.net',
                 token='...',
                 pool='taxi-dwh-batch'),
             simplify=True,
             attributes={})
  builtin None = None

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/format.py:
 in get_smart_format(yt = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), tables = [YTPath(path='home/taxi-fraud/ods/production/driv...='taxi-dwh-batch'), simplify=True, attributes={})], default_mode = None)

     131 return repr(None)
     132
  -> 133 tables_with_format = [(_, extract_format(_)) for _ in tables]
     134
     135 if len(set(represent_format(f) for (_, f) in tables_with_format)) != 1:

Vars:
  tables_with_format is undefined
  _ = YTPath(
          path='home/taxi-fraud/ods/production/driver/2018-03-01',
          client=YTClient(
              proxy='hahn.yt.yandex.net',
              token='...',
              pool='taxi-dwh-batch'),
          simplify=True,
          attributes={})
  extract_format = <function nile.drivers.yt.format.extract_format>
  tables = [YTPath(
                path='home/taxi-fraud/ods/production/driver/2018-03-01',
                client=YTClient(
                    proxy='hahn.yt.yandex.net',
                    token='...',
                    pool='taxi-dwh-batch'),
                simplify=True,
                attributes={})]

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/format.py:
 in extract_format(table = YTPath(path='home/taxi-fraud/ods/production/driv...='taxi-dwh-batch'), simplify=True, attributes={}))

     105
     106 def extract_format(table):
  -> 107 if yt.has_attribute(table, FORMAT_ATTRIBUTE):
     108 format_name = yt.get_attribute(table, FORMAT_ATTRIBUTE)
     109 if (

Vars:
  yt = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')
  yt.has_attribute = <bound method YTClient.has_attribute of YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')>
  table = YTPath(
              path='home/taxi-fraud/ods/production/driver/2018-03-01',
              client=YTClient(
                  proxy='hahn.yt.yandex.net',
                  token='...',
                  pool='taxi-dwh-batch'),
              simplify=True,
              attributes={})
  global FORMAT_ATTRIBUTE = '_format'

------------------------------
/home/robot-taxi-stat/<decorator-gen-56>:
 in has_attribute(self = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), path = YTPath(path='home/taxi-fraud/ods/production/driv...='taxi-dwh-batch'), simplify=True, attributes={}), attribute = '_format')


Vars:

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/client_helpers.py:
 in decorator(self = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), *args = (YTPath(path='home/taxi-fraud/ods/production/driv...='taxi-dwh-batch'), simplify=True, attributes={}), '_format'), **kwargs = {})

      46 original_func = func
      47 def decorator(self, *args, **kwargs):
   -> 48 return original_func(*args, client=self, **kwargs)
      49
      50 is_class = False

Vars:
  original_func = <function yt.wrapper.cypress_commands.has_attribute>
  args = (YTPath(
              path='home/taxi-fraud/ods/production/driver/2018-03-01',
              client=YTClient(
                  proxy='hahn.yt.yandex.net',
                  token='...',
                  pool='taxi-dwh-batch'),
              simplify=True,
              attributes={}),
          '_format')
  client is undefined
  self = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py:
 in has_attribute(path = YTPath(path='home/taxi-fraud/ods/production/driv...='taxi-dwh-batch'), simplify=True, attributes={}), attribute = '_format', client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

     356 :param str attribute: attribute.
     357 """
  -> 358 return exists("%s/@%s" % (path, attribute), client=client)
     359
     360 def set_attribute(path, attribute, value, client=None):

Vars:
  global exists = <function yt.wrapper.cypress_commands.exists>
  path = YTPath(
             path='home/taxi-fraud/ods/production/driver/2018-03-01',
             client=YTClient(
                 proxy='hahn.yt.yandex.net',
                 token='...',
                 pool='taxi-dwh-batch'),
             simplify=True,
             attributes={})
  attribute = '_format'
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py:
 in exists(path = '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', read_from = None, client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

     283 params,
     284 format=None,
  -> 285 client=client))
     286
     287 def remove(path, recursive=False, force=False, client=None):

Vars:
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/transaction_commands.py:
 in _make_formatted_transactional_request(command_name = 'exists', params = {'output_format': 'yson', 'path': //home/taxi-fraud/ods/production/driver/2018-03-01/@_format}, format = None, **kwargs = {'client': YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')})

      11
      12 def _make_formatted_transactional_request(command_name, params, format, **kwargs):
   -> 13 return make_formatted_request(command_name, params, format, **kwargs)
      14
      15 def start_transaction(parent_transaction=None, timeout=None, attributes=None, type="master", sticky=False, client=None):

Vars:
  global make_formatted_request = <function yt.wrapper.driver.make_formatted_request>
  command_name = 'exists'
  params = {'output_format': 'yson',
            'path': //home/taxi-fraud/ods/production/driver/2018-03-01/@_format}
  format = None
  kwargs = {'client': YTClient(
                proxy='hahn.yt.yandex.net',
                token='...',
                pool='taxi-dwh-batch')}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py:
 in make_formatted_request(command_name = 'exists', params = {'output_format': 'yson', 'path': //home/taxi-fraud/ods/production/driver/2018-03-01/@_format}, format = None, **kwargs = {'client': YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')})

     160 decode_content=decode_content,
     161 batch_yson_dumps=not is_batch,
  -> 162 **kwargs)
     163
     164 if is_batch:

Vars:
  kwargs = {'client': YTClient(
                proxy='hahn.yt.yandex.net',
                token='...',
                pool='taxi-dwh-batch')}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py:
 in make_request(command_name = 'exists', params = {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, data = None, is_data_compressed = False, return_content = True, response_format = 'yson', use_heavy_proxy = False, timeout = None, allow_retries = None, decode_content = False, batch_yson_dumps = True, client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

     113 allow_retries=allow_retries,
     114 decode_content=decode_content,
  -> 115 client=client)
     116 else:
     117 raise YtError("Incorrect backend type: " + backend)

Vars:
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/home/robot-taxi-stat/<decorator-gen-2>:
 in make_request(command_name = 'exists', params = {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, data = None, is_data_compressed = False, return_content = True, response_format = 'yson', use_heavy_proxy = False, timeout = None, client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), allow_retries = None, decode_content = False)


Vars:

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/common.py:
 in forbidden_inside_job(func = <function make_request>, *args = ('exists', {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, None, False, True, 'yson', False, None, YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), None, False), **kwargs = {})

     243 'you can override this behaviour by turning on '
     244 '"allow_http_requests_to_yt_from_job" option in config.')
  -> 245 return func(*args, **kwargs)
     246
     247 class DoNotReplaceAction(argparse.Action):

Vars:
  func = <function yt.wrapper.http_driver.make_request>
  args = ('exists',
          {'output_format': 'yson',
           'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format',
           'transaction_id': 'a495-1def-3fe0001-e74ae073'},
          None,
          False,
          True,
          'yson',
          False,
          None,
          YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'),
          None,
          False)
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py:
 in make_request(command_name = 'exists', params = {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, data = None, is_data_compressed = False, return_content = True, response_format = 'yson', use_heavy_proxy = False, timeout = (5000, 20000), client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), allow_retries = True, decode_content = False)

     270 is_ping=(command_name == "ping_tx"),
     271 proxy_provider=proxy_provider,
  -> 272 client=client)
     273
     274 def process_error(response):

Vars:
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in make_request_with_retries(method = 'GET', url = 'http://hahn.yt.yandex.net/api/v3/exists', **kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth object>, 'client': YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), 'data': None, 'headers': {'Accept-Encoding': 'gzip, identity', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=479565;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec40c-ec7192dc', 'X-YT-Header-Format': '<format=text>yson', 'X-YT-Parameters': '{"path"="//home/taxi-fraud/ods/production/driver...";"transaction_id"="a495-1def-3fe0001-e74ae073";}'}, 'is_ping': False, 'log_body': True, 'make_retries': True, 'params': {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, 'proxy_provider': None, 'response_format': 'yson', ...})

     288 This function is for backward compatibility and convenience of use.
     289 """
  -> 290 return RequestRetrier(method=method, url=url, **kwargs).run()
     291
     292

Vars:
  global RequestRetrier = yt.wrapper.http_helpers.RequestRetrier
  method = 'GET'
  url = 'http://hahn.yt.yandex.net/api/v3/exists'
  kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth at 0x7f3cc46710d0>,
            'client': YTClient(
                proxy='hahn.yt.yandex.net',
                token='...',
                pool='taxi-dwh-batch'),
            'data': None,
            'headers': {'Accept-Encoding': 'gzip, identity',
             'User-Agent': 'Python wrapper 0.8.27-0',
             'X-Started-By': '{"pid"=479565;"user"="robot-taxi-stat";}',
             'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec40c-ec7192dc',
             'X-YT-Header-Format': '<format=text>yson',
             'X-YT-Parameters': '{"path"="//home/taxi-fraud/ods/production/driver/2018-03-01/@_format";"output_format"="yson";"transaction_id"="a495-1def-3fe0001-e74ae073";}'},
            'is_ping': False,
            'log_body': True,
            'make_retries': True,
            'params': {'output_format': 'yson',
             'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format',
             'transaction_id': 'a495-1def-3fe0001-e74ae073'},
            'proxy_provider': None,
            'response_format': 'yson',
            'retry_action': None,
            'stream': False,
            'timeout': (5000, 20000)}
  ).run is undefined

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py:
 in run(self = <yt.wrapper.http_helpers.RequestRetrier object>)

      57 if self.chaos_monkey_enabled and random.randint(1, 5) == 1:
      58 raise YtRetriableError()
   -> 59 return self.action()
      60 except self.exceptions as exception:
      61 if attempt == retry_count:

Vars:
  self = <yt.wrapper.http_helpers.RequestRetrier at 0x7f3cc4669a10>
  self.action = <bound method RequestRetrier.action of <yt.wrapper.http_helpers.RequestRetrier object at 0x7f3cc4669a10>>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in action(self = <yt.wrapper.http_helpers.RequestRetrier object>)

     258 logger.debug("Response headers %r", hide_token(dict(response.headers)))
     259
  -> 260 _raise_for_status(response, request_info)
     261 return response
     262

Vars:
  global _raise_for_status = <function yt.wrapper.http_helpers._raise_for_status>
  response = <Response [400]>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=479565;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec40c-ec7192dc',
                   'X-YT-Header-Format': '<format=text>yson',
                   'X-YT-Parameters': '{"path"="//home/taxi-fraud/ods/production/driver/2018-03-01/@_format";"output_format"="yson";"transaction_id"="a495-1def-3fe0001-e74ae073";}'},
                  'params': {'output_format': 'yson',
                   'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format',
                   'transaction_id': 'a495-1def-3fe0001-e74ae073'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/exists'}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in _raise_for_status(response = <Response [400]>, request_info = {'headers': {'Accept-Encoding': 'gzip, identity', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=479565;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec40c-ec7192dc', 'X-YT-Header-Format': '<format=text>yson', 'X-YT-Parameters': '{"path"="//home/taxi-fraud/ods/production/driver...";"transaction_id"="a495-1def-3fe0001-e74ae073";}'}, 'params': {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, 'url': 'http://hahn.yt.yandex.net/api/v3/exists'})

     159
     160 if not response.is_ok():
  -> 161 raise YtHttpResponseError(error=response.error(), **request_info)
     162
     163

Vars:
  global YtHttpResponseError = yt.wrapper.errors.YtHttpResponseError
  error is undefined
  response = <Response [400]>
  response.error = <bound method ?.error of <Response [400]>>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=479565;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec40c-ec7192dc',
                   'X-YT-Header-Format': '<format=text>yson',
                   'X-YT-Parameters': '{"path"="//home/taxi-fraud/ods/production/driver/2018-03-01/@_format";"output_format"="yson";"transaction_id"="a495-1def-3fe0001-e74ae073";}'},
                  'params': {'output_format': 'yson',
                   'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format',
                   'transaction_id': 'a495-1def-3fe0001-e74ae073'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/exists'}


---------====== Detailed exception attributes ======-------------

_cached_fqdn = 'taxi-etl01h.taxi.yandex.net'
_get_fqdn = <function _get_fqdn>
args = ()
attributes = {'datetime': '2018-03-26T13:02:53.570076Z', 'headers': {'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec...t>yson', 'User-Agent': 'Python wrapper 0.8.27-0'}, 'host': 'taxi-etl01h.taxi.yandex.net', 'params': {'path': '//home/taxi-fraud/ods/production/drive..., 'transaction_id': 'a495-1def-3fe0001-e74ae073'}, 'transparent': True, 'url': 'http://hahn.yt.yandex.net/api/v3/exists'}
code = 1
contains_code = <bound method YtHttpResponseError.contains_code of YtHttpResponseError()>
contains_text = <bound method YtHttpResponseError.contains_text of YtHttpResponseError()>
error = {u'attributes': {u'datetime': u'2018-03-26T13:02:53.571532Z', u'fid': 18443698888040460451L, u'host': u'm04-sas.hahn.yt.yandex.net', u'object': u'9e10-63cc3-3fe0191-7058753c', u'permission': u'read', u'pid': 938979, u'tid': 2258905001885090544, u'user': u'robot-taxi-stat'}, u'code': 901, u'inner_errors': [], u'message': u'Access denied: "read" permission for node //ho...er/2018-03-01 is not allowed by any matching ACE'}
headers = {'Accept-Encoding': 'gzip, identity', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=479565;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '1b8ea7f7-86ac3f32-702ec40c-ec7192dc', 'X-YT-Header-Format': '<format=text>yson', 'X-YT-Parameters': '{"path"="//home/taxi-fraud/ods/production/driver...";"transaction_id"="a495-1def-3fe0001-e74ae073";}'}
inner_errors = [{u'attributes': {u'datetime': u'2018-03-26T13:02:53.571532Z', u'fid': 18443698888040460451L, u'host': u'm04-sas.hahn.yt.yandex.net', u'object': u'9e10-63cc3-3fe0191-7058753c', u'permission': u'read', u'pid': 938979, u'tid': 2258905001885090544, u'user': u'robot-taxi-stat'}, u'code': 901, u'inner_errors': [], u'message': u'Access denied: "read" permission for node //ho...er/2018-03-01 is not allowed by any matching ACE'}]
is_access_denied = <bound method YtHttpResponseError.is_access_denied of YtHttpResponseError()>
is_chunk_unavailable = <bound method YtHttpResponseError.is_chunk_unavailable of YtHttpResponseError()>
is_concurrent_operations_limit_reached = <bound method YtHttpResponseError.is_concurrent_operations_limit_reached of YtHttpResponseError()>
is_concurrent_transaction_lock_conflict = <bound method YtHttpResponseError.is_concurrent_transaction_lock_conflict of YtHttpResponseError()>
is_master_communication_error = <bound method YtHttpResponseError.is_master_communication_error of YtHttpResponseError()>
is_no_such_transaction = <bound method YtHttpResponseError.is_no_such_transaction of YtHttpResponseError()>
is_request_queue_size_limit_exceeded = <bound method YtHttpResponseError.is_request_queue_size_limit_exceeded of YtHttpResponseError()>
is_request_rate_limit_exceeded = <bound method YtHttpResponseError.is_request_rate_limit_exceeded of YtHttpResponseError()>
is_request_timed_out = <bound method YtHttpResponseError.is_request_timed_out of YtHttpResponseError()>
is_resolve_error = <bound method YtHttpResponseError.is_resolve_error of YtHttpResponseError()>
is_shell_exited = <bound method YtHttpResponseError.is_shell_exited of YtHttpResponseError()>
message = 'Received HTTP response with error'
params = {'output_format': 'yson', 'path': '//home/taxi-fraud/ods/production/driver/2018-03-01/@_format', 'transaction_id': 'a495-1def-3fe0001-e74ae073'}
simplify = <bound method YtHttpResponseError.simplify of YtHttpResponseError()>
url = 'http://hahn.yt.yandex.net/api/v3/exists'
