##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'fraud'
creation_dttm: '20180402000003'
##DESCRIPTION
Exception message: Error resolving path //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@
    Node //sys/operations has no child with key "f1e98022-5d10d289-3fe03e8-6534dd55"

***** Details:
Received HTTP response with error
    origin taxi-etl01h.taxi.yandex.net in 2018-03-28T05:15:27.029248Z
    headers {
                      "X-YT-Correlation-Id": "1cb37513-40d5c929-1ddf135e-a64290b7",
                      "X-YT-Parameters": "{\"path\"=\"//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@\";\"output_format\"=\"yson\";\"transaction_id\"=\"a521-297e36-3fe0001-94a18eb8\";\"max_size\"=65535;}",
                      "Accept-Encoding": "gzip, identity",
                      "X-Started-By": "{\"pid\"=60283;\"user\"=\"robot-taxi-stat\";}",
                      "X-YT-Header-Format": "<format=text>yson",
                      "User-Agent": "Python wrapper 0.8.27-0"
                    }
    params {
                      "path": "//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@",
                      "output_format": "yson",
                      "max_size": 65535,
                      "transaction_id": "a521-297e36-3fe0001-94a18eb8"
                    }
    url http://hahn.yt.yandex.net/api/v3/get
    transparent True
Error resolving path //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@
    code 500
    origin m05-sas.hahn.yt.yandex.net in 2018-03-28T05:15:27.028272Z (pid 179491, tid 5a4d5b998888144a, fid fff15fc33784b7c3)
    method Get
Node //sys/operations has no child with key "f1e98022-5d10d289-3fe03e8-6534dd55"
    code 500
    origin m05-sas.hahn.yt.yandex.net in 2018-03-28T05:15:27.028245Z (pid 179491, tid 5a4d5b998888144a, fid fff15fc33784b7c3)


Exception type: <class 'yt.wrapper.errors.YtHttpResponseError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py", line 305, in <module>
    FraudDMLoader(_fraud_windows).load()
  File "/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py", line 257, in load
    self._job.run()
  File "/usr/lib/python2.7/dist-packages/nile/api/v1/job.py", line 154, in run
    execution_plan.run()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 109, in run
    self._observe_until_someone_exits()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 171, in _observe_until_someone_exits
    if progress.observe_next_state(self.monitor):
  File "/usr/lib/python2.7/dist-packages/nile/drivers/common/progress.py", line 109, in observe_next_state
    self.last_state = next(self.state_iterator)
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/progress.py", line 112, in states
    slowdown_coef=0.1
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/progress.py", line 125, in _states_monitor
    for state in states_monitor:
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/tracking.py", line 12, in get_operation_states_monitor
    state = get_state()
  File "/usr/lib/python2.7/dist-packages/nile/utils/misc.py", line 599, in wrapper
    return function(*args, **kws)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/operation_commands.py", line 422, in get_state
    return get_operation_state(self.id, client=self.client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/operation_commands.py", line 127, in get_operation_state
    return OperationState(get_operation_attributes(operation, client=client)["state"])
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/operation_commands.py", line 114, in get_operation_attributes
    return get(operation_path + "/@", client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py", line 60, in get
    client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/transaction_commands.py", line 13, in _make_formatted_transactional_request
    return make_formatted_request(command_name, params, format, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py", line 162, in make_formatted_request
    **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py", line 115, in make_request
    client=client)
  File "<decorator-gen-2>", line 2, in make_request
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/common.py", line 245, in forbidden_inside_job
    return func(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py", line 272, in make_request
    client=client)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 290, in make_request_with_retries
    return RequestRetrier(method=method, url=url, **kwargs).run()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py", line 59, in run
    return self.action()
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 260, in action
    _raise_for_status(response, request_info)
  File "/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py", line 161, in _raise_for_status
    raise YtHttpResponseError(error=response.error(), **request_info)
YtHttpResponseError: Error resolving path //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@
    Node //sys/operations has no child with key "f1e98022-5d10d289-3fe03e8-6534dd55"

***** Details:
Received HTTP response with error
    origin taxi-etl01h.taxi.yandex.net in 2018-03-28T05:15:27.029248Z
    headers {
                      "X-YT-Correlation-Id": "1cb37513-40d5c929-1ddf135e-a64290b7",
                      "X-YT-Parameters": "{\"path\"=\"//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@\";\"output_format\"=\"yson\";\"transaction_id\"=\"a521-297e36-3fe0001-94a18eb8\";\"max_size\"=65535;}",
                      "Accept-Encoding": "gzip, identity",
                      "X-Started-By": "{\"pid\"=60283;\"user\"=\"robot-taxi-stat\";}",
                      "X-YT-Header-Format": "<format=text>yson",
                      "User-Agent": "Python wrapper 0.8.27-0"
                    }
    params {
                      "path": "//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@",
                      "output_format": "yson",
                      "max_size": 65535,
                      "transaction_id": "a521-297e36-3fe0001-94a18eb8"
                    }
    url http://hahn.yt.yandex.net/api/v3/get
    transparent True
Error resolving path //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@
    code 500
    origin m05-sas.hahn.yt.yandex.net in 2018-03-28T05:15:27.028272Z (pid 179491, tid 5a4d5b998888144a, fid fff15fc33784b7c3)
    method Get
Node //sys/operations has no child with key "f1e98022-5d10d289-3fe03e8-6534dd55"
    code 500
    origin m05-sas.hahn.yt.yandex.net in 2018-03-28T05:15:27.028245Z (pid 179491, tid 5a4d5b998888144a, fid fff15fc33784b7c3)


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.yt.export.fraud.driver.loader', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7ff40edb1b00>
  pkg_name = 'layer.yt.export.fraud.driver'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7ff40edcc9b0, file "/.../layer/yt/export/fraud/driver/loader.py", line 3>, run_globals = {'DEFAULT_DAYS': [1, 7, 15], 'FraudDMLoader': <class '__main__.FraudDMLoader'>, 'FraudDriverStats': <class 'layer.yt.export.fraud.driver.table.FraudDriverStats'>, 'FraudWindow': <class '__main__.FraudWindow'>, 'OdsOrder': <class 'layer.yt.ods.mdb.order.table.OdsOrder'>, 'Period': <class 'lib.datetime_utils.Period'>, 'Pool': <enum 'Pool'>, 'RawSubventions': <class 'layer.yt.raw.mdb.subventions.table.RawSubventions'>, 'Record': <class 'nile.processing.record.Record'>, 'SnpAccUserPhone': <class 'layer.yt.dds.snp_acc_user_phone.table.SnpAccUserPhone'>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.yt.export.fraud.driver')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7ff40edcc9b0, file "/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py", line 3>
  run_globals = {'DEFAULT_DAYS': [1, 7, 15],
                 'FraudDMLoader': __main__.FraudDMLoader,
                 'FraudDriverStats': layer.yt.export.fraud.driver.table.FraudDriverStats,
                 'FraudWindow': __main__.FraudWindow,
                 'OdsOrder': layer.yt.ods.mdb.order.table.OdsOrder,
                 'Period': lib.datetime_utils.Period,
                 'Pool': lib.nile.cluster_utils.Pool,
                 'RawSubventions': layer.yt.raw.mdb.subventions.table.RawSubventions,
                 'Record': nile.processing.record.Record,
                 'SnpAccUserPhone': layer.yt.dds.snp_acc_user_phone.table.SnpAccUserPhone,
                 'StgDrivers': layer.yt.stg.mdb.drivers.table.StgDrivers,
                 'StgParks': layer.yt.stg.mdb.parks.table.StgParks,
                 'StgTariffs': layer.yt.stg.mdb.tariffs.table.StgTariffs,
                 'StgUsers': layer.yt.stg.mdb.users.table.StgUsers,
                 'SubStats': layer.yt.export.fraud.driver.metric.SubStats,
                 'Window': lib.datetime_utils.Window,
                 'YTMeta': lib.yt.meta.YTMeta,
                 'YqlSelect': lib.yql.operation.YqlSelect,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7ff40edb1b00>,
                 '__name__': '__main__',
                 '__package__': 'layer.yt.export.fraud.driver',
                 '_fielddate': '2018-03-28',
                 '_fraud_windows': [<__main__.FraudWindow at 0x7ff406c6e490>,
                  <__main__.FraudWindow at 0x7ff406c8fa10>,
                  <__main__.FraudWindow at 0x7ff406c8f510>],
                 'cu': <module 'lib.nile.cluster_utils' from '/home/robot-taxi-stat/etl/lib/nile/cluster_utils.pyc'>,
                 'day': 15,
                 'dt': <module 'datetime' from '/usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so'>,
                 'dtu': <module 'lib.datetime_utils' from '/home/robot-taxi-stat/etl/lib/datetime_utils.pyc'>,
                 'last_created_dttm': datetime.datetime(2018, 3, 28, 3, 35),
                 'last_order_creation': <function __main__.last_order_creation>,
                 'ne': <module 'nile.api.v1.extractors' from '/usr/lib/python2.7/dist-packages/nile/api/v1/extractors.py'>,
                 'qf': <module 'qb2.api.v1.filters' from '/usr/lib/python2.7/dist-packages/qb2/api/v1/filters.pyc'>,
                 'yt_etl': <module 'lib.yt.etl' from '/home/robot-taxi-stat/etl/lib/yt/etl.pyc'>,
                 'yt_op': <module 'lib.yt.operation' from '/home/robot-taxi-stat/etl/lib/yt/operation.pyc'>}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py:
 in <module>()

     301 period=Window().start(days=-day).apply(last_created_dttm),
     302 fielddate=_fielddate
     303 ) for day in DEFAULT_DAYS
     304 ]
  -> 305 FraudDMLoader(_fraud_windows).load()

Vars:
  FraudDMLoader = __main__.FraudDMLoader
  _fraud_windows = [<__main__.FraudWindow at 0x7ff406c6e490>,
                    <__main__.FraudWindow at 0x7ff406c8fa10>,
                    <__main__.FraudWindow at 0x7ff406c8f510>]
  ).load is undefined

------------------------------
/home/robot-taxi-stat/etl/layer/yt/export/fraud/driver/loader.py:
 in load(self = <__main__.FraudDMLoader object>)

     255 old_stream = self._job.table(meta.target_path())
     256 self._job.concat(old_stream, new_stream).put(meta.target_path())
  -> 257 self._job.run()
     258
     259

Vars:
  self = <__main__.FraudDMLoader at 0x7ff406cba350>
  self._job = Job 'driver fraud':
                  remote_input_table_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/stg/mdb/tariffs/tariffs'),
                      ignore_missing=False)
                  remote_input_table2_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/dds/snp_acc_user_phone'),
                      ignore_missing=False)
                  remote_input_table3_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/stg/mdb/drivers/drivers'),
                      ignore_missing=False)
                  remote_input_table4_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/ods/mdb/order/2018-03-01'),
                      ignore_missing=False)
                  remote_input_table5_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/stg/mdb/users/users'),
                      ignore_missing=False)
                  remote_input_table6_output = RemoteInputTable(
                      path=Path('//home/taxi-dwh/raw/mdb/subventions/2018-03-01'),
                      ignore_missing=False)
                  remote_input_table7_output = RemoteInputTable(
                      path=Path('//home/taxi-fraud/import/production/driver/2018-03-01'),
                      ignore_missing=False)
                  filter_output = remote_input_table4_output | Filter(log=generic-yson-log, fields=[], filters=[...])
                  project_output = remote_input_table3_output | Project(name, updated, driver_license)
                  group_fields_output = project_output | GroupFields(fields=('driver_license',))
                  project2_output = remote_input_table5_output | Project(id, device_id)
                  project3_output = filter_output | Project(order_id, utc_order_created_dttm, driver_license, plan_cost, user_id, user_phone_id, park_id, city, coupon_nominal, tariff_id, travel_time=<Extractor None = extract_travel_time(utc_start_transporting_dttm, utc_complete_dttm)>, cost=order_cost_w_discount)
                  filter2_output = remote_input_table6_output | Filter(log=generic-yson-log, fields=[], filters=[...])
                  project4_output = filter2_output | Project(order_id=<Extractor None = <lambda>(doc)>, subvention_version=<Extractor None = <lambda>(doc)>, subvention_value=<Extractor None = <lambda>(doc)>)
                  group_fields2_output = project4_output | GroupFields(fields=('order_id',))
                  top_output = group_fields2_output | Top(TopAggregator(subvention_version, <record>))
                  project5_output = remote_input_table2_output | Project(date=first_utc_order_dttm, order_id=first_order_id, is_user_first_ride=<Extractor None = True>)
                  filter3_output = project5_output | Filter(log=generic-yson-log, fields=[], filters=[...])
                  join_output = (project3_output, filter3_output) | Join(
                      group_by_left=('order_id',),
                      group_by_right=('order_id',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': True,
                       'assume_unique_left': True,
                       'assume_unique_right': True},
                      memory_limit=2048)
                  join2_output = (join_output, top_output) | Join(
                      group_by_left=('order_id',),
                      group_by_right=('order_id',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': False,
                       'assume_unique_left': True,
                       'assume_unique_right': False},
                      memory_limit=None)
                  reduce_output = group_fields_output | Reduce(
                      operator=Operator(
                          function=GeneratorAdapter(
                              generator=<function __main__.reduce_last_updated_name>),
                          name='reduce_last_updated_name',
                          outputs=('output',),
                          input_format=Records(),
                          output_format=Records(),
                          files=frozenset(),
                          consumes_full_input=True,
                          hints=_Hints()),
                      files=(),
                      intensity='default',
                      memory_limit=None)
                  map_output = remote_input_table_output | Map(
                      operator=Operator(
                          function=GeneratorAdapter(
                              generator=<function __main__.map_create_minimals_dict>),
                          name='map_create_minimals_dict',
                          outputs=('output',),
                          input_format=Records(),
                          output_format=Records(),
                          files=frozenset(),
                          consumes_full_input=True,
                          hints=_Hints()),
                      files=(),
                      intensity='data',
                      memory_limit=None,
                      ordered=False,
                      enable_row_index=False)
                  group_fields3_output = map_output | GroupFields(fields=('category_id',))
                  top2_output = group_fields3_output | Top(TopAggregator(minimal, <record>))
                  join3_output = (join2_output, top2_output) | Join(
                      group_by_left=('tariff_id',),
                      group_by_right=('category_id',),
                      type='inner',
                      hints={'assume_small_left': False,
                       'assume_small_right': True,
                       'assume_unique_left': False,
                       'assume_unique_right': True},
                      memory_limit=2048)
                  join4_output = (join3_output, project2_output) | Join(
                      group_by_left=('user_id',),
                      group_by_right=('id',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': False,
                       'assume_unique_left': False,
                       'assume_unique_right': False},
                      memory_limit=None)
                  group_fields4_output = join4_output | GroupFields(fields=('driver_license', 'city'))
                  reduce2_output = group_fields4_output | Reduce(
                      operator=Operator(
                          function=GeneratorAdapter(
                              generator=<function __main__.reduce_drivers>),
                          name='reduce_drivers',
                          outputs=('output',),
                          input_format=Records(),
                          output_format=Records(),
                          files=frozenset(),
                          consumes_full_input=True,
                          hints=_Hints()),
                      files=(),
                      intensity='cpu',
                      memory_limit=None)
                  join5_output = (reduce2_output, reduce_output) | Join(
                      group_by_left=('driver_license',),
                      group_by_right=('driver_license',),
                      type='left',
                      hints={'assume_small_left': False,
                       'assume_small_right': False,
                       'assume_unique_left': False,
                       'assume_unique_right': False},
                      memory_limit=None)
                  sort_output = join5_output | Sort(fields=('utc_calc_dttm', 'driver_license', 'window_days'))
                  concat_output = (sort_output, remote_input_table7_output) | Concat()
                  concat_output | RemoteOutputTable(
                      path=Path('//home/taxi-fraud/import/production/driver/2018-03-01'),
                      allow_override=True)

  self._job.run = <bound method Job.run of Job(driver=YTDriver(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch', clean_cache=False), name='driver fraud', uuid_by_name=False, environment=Environment(templates={'tmp': '$tmp_root/by-uuid/$job_uuid', 'job_root': '$home/$job_name', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_root': 'tmp/nile/$user_name', 'job_name': 'driver fraud', 'checkpoints_root': '$tmp/checkpoints', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'user_name': u'robot-taxi-stat', 'job_uuid': '2cd49e18-3245-11e8-8f2b-8dad31e189dc', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/whee
 lhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-27', packages=frozenset([Package(requirement='enum34', path=None, add_to_archive=None), Package(requirement='transliterate', path=None, add_to_archive=None), Package(requirement='pytz', path=None, add_to_archive=None), DevelopPackage(path='/home/robot-taxi-stat/etl', add_to_archive=None)]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=10, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='py
 thon'), default_cluster_environment=Environment(templates={'checkpoints_root': '$tmp/checkpoints', 'tmp': '$tmp_root/by-uuid/$job_uuid', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'tmp_root': 'tmp/nile/$user_name', 'user_name': u'robot-taxi-stat', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference
 _date='2018-03-27', packages=frozenset([]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=1, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='python'))>

------------------------------
/usr/lib/python2.7/dist-packages/nile/api/v1/job.py:
 in run(self = Job(driver=YTDriver(proxy='hahn.yt.yandex.net', ...mp_tables': 'default'}), python_binary='python')), checkpoints = (), store_checkpoints = True, hide_command = False, skip_publish = False)

     152 with CustomSysArgv(sys_argv):
     153 try:
  -> 154 execution_plan.run()
     155 except Exception:
     156 exc_info = sys.exc_info()

Vars:
  execution_plan = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7ff3f7b7b850>
  execution_plan.run = <bound method YTExecutionPlan.run of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7ff3f7b7b850>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in run(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     107 while self.queues_manager.has_more_work:
     108 self._schedule_operations()
  -> 109 self._observe_until_someone_exits()
     110 except KeyboardInterrupt:
     111 self._abort_operations()

Vars:
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7ff3f7b7b850>
  self._observe_until_someone_exits = <bound method YTExecutionPlan._observe_until_someone_exits of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7ff3f7b7b850>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in _observe_until_someone_exits(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     169 for node in running_nodes:
     170 progress = running_nodes[node]
  -> 171 if progress.observe_next_state(self.monitor):
     172 continue
     173

Vars:
  progress = <nile.drivers.yt.progress.YTOperationProgress at 0x7ff3f7cee310>
  progress.observe_next_state = <bound method YTOperationProgress.observe_next_state of <nile.drivers.yt.progress.YTOperationProgress object at 0x7ff3f7cee310>>
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7ff3f7b7b850>
  self.monitor = <nile.monitors.void.VoidMonitor at 0x7ff3f6834ad0>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/common/progress.py:
 in observe_next_state(self = <nile.drivers.yt.progress.YTOperationProgress object>, monitor = <nile.monitors.void.VoidMonitor object>)

     107 def observe_next_state(self, monitor):
     108 try:
  -> 109 self.last_state = next(self.state_iterator)
     110 except StopIteration:
     111 has_more = False

Vars:
  self = <nile.drivers.yt.progress.YTOperationProgress at 0x7ff3f7cee310>
  self.last_state = None
  builtin next = <function next>
  self.state_iterator = <generator object states at 0x7ff3f5e513c0>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/progress.py:
 in states(self = <nile.drivers.yt.progress.YTOperationProgress object>)

     110 min_delay=1.0,
     111 max_delay=5.0,
  -> 112 slowdown_coef=0.1
     113 ):
     114 yield state

Vars:
  slowdown_coef is undefined

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/progress.py:
 in _states_monitor(self = <nile.drivers.yt.progress.YTOperationProgress object>, min_delay = 1.0, max_delay = 5.0, slowdown_coef = 0.1)

     123
     124 state = None
  -> 125 for state in states_monitor:
     126 yield self.state(state)
     127 if self.operation.finalize:

Vars:
  state = None
  states_monitor = <generator object get_operation_states_monitor at 0x7ff3f68cf0a0>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/tracking.py:
 in get_operation_states_monitor(operation = <yt.wrapper.operation_commands.Operation object>, min_delay = 1.0, max_delay = 5.0, slowdown_coef = 0.1)

      10
      11 while True:
   -> 12 state = get_state()
      13
      14 yield state

Vars:
  state is undefined
  get_state = <function nile.utils.misc.wrapper>

------------------------------
/usr/lib/python2.7/dist-packages/nile/utils/misc.py:
 in wrapper(*args = (), **kws = {})

     597 def wrapper(*args, **kws):
     598 time_watcher.wait()
  -> 599 return function(*args, **kws)
     600
     601 return wrapper

Vars:
  function = <bound method Operation.get_state of <yt.wrapper.operation_commands.Operation object at 0x7ff3f6342f10>>
  args = ()
  kws = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/operation_commands.py:
 in get_state(self = <yt.wrapper.operation_commands.Operation object>)

     420 def get_state(self):
     421 """Returns object that represents state of operation."""
  -> 422 return get_operation_state(self.id, client=self.client)
     423
     424 def get_stderrs(self, only_failed_jobs=False):

Vars:
  global get_operation_state = <function yt.wrapper.operation_commands.get_operation_state>
  self = <yt.wrapper.operation_commands.Operation at 0x7ff3f6342f10>
  self.id = 'f1e98022-5d10d289-3fe03e8-6534dd55'
  client is undefined
  self.client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/operation_commands.py:
 in get_operation_state(operation = 'f1e98022-5d10d289-3fe03e8-6534dd55', client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

     125 config["proxy"]["retries"]["count"] = config["proxy"]["operation_state_discovery_retry_count"]
     126 try:
  -> 127 return OperationState(get_operation_attributes(operation, client=client)["state"])
     128 finally:
     129 config["proxy"]["retries"]["count"] = retry_count

Vars:
  global OperationState = yt.wrapper.operation_commands.OperationState
  global get_operation_attributes = <function yt.wrapper.operation_commands.get_operation_attributes>
  operation = 'f1e98022-5d10d289-3fe03e8-6534dd55'
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/operation_commands.py:
 in get_operation_attributes(operation = 'f1e98022-5d10d289-3fe03e8-6534dd55', client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

     112 """
     113 operation_path = ypath_join(OPERATIONS_PATH, operation)
  -> 114 return get(operation_path + "/@", client=client)
     115
     116 def get_operation_state(operation, client=None):

Vars:
  global get = <function yt.wrapper.cypress_commands.get>
  operation_path = '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55'
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/cypress_commands.py:
 in get(path = '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', max_size = 65535, attributes = None, format = None, read_from = None, client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

      58 params=params,
      59 format=format,
   -> 60 client=client)
      61
      62 def set(path, value, format=None, client=None):

Vars:
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/transaction_commands.py:
 in _make_formatted_transactional_request(command_name = 'get', params = {'max_size': 65535, 'output_format': 'yson', 'path': //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@}, format = None, **kwargs = {'client': YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')})

      11
      12 def _make_formatted_transactional_request(command_name, params, format, **kwargs):
   -> 13 return make_formatted_request(command_name, params, format, **kwargs)
      14
      15 def start_transaction(parent_transaction=None, timeout=None, attributes=None, type="master", sticky=False, client=None):

Vars:
  global make_formatted_request = <function yt.wrapper.driver.make_formatted_request>
  command_name = 'get'
  params = {'max_size': 65535,
            'output_format': 'yson',
            'path': //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@}
  format = None
  kwargs = {'client': YTClient(
                proxy='hahn.yt.yandex.net',
                token='...',
                pool='taxi-dwh-batch')}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py:
 in make_formatted_request(command_name = 'get', params = {'max_size': 65535, 'output_format': 'yson', 'path': //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@}, format = None, **kwargs = {'client': YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')})

     160 decode_content=decode_content,
     161 batch_yson_dumps=not is_batch,
  -> 162 **kwargs)
     163
     164 if is_batch:

Vars:
  kwargs = {'client': YTClient(
                proxy='hahn.yt.yandex.net',
                token='...',
                pool='taxi-dwh-batch')}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/driver.py:
 in make_request(command_name = 'get', params = {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, data = None, is_data_compressed = False, return_content = True, response_format = 'yson', use_heavy_proxy = False, timeout = None, allow_retries = None, decode_content = False, batch_yson_dumps = True, client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'))

     113 allow_retries=allow_retries,
     114 decode_content=decode_content,
  -> 115 client=client)
     116 else:
     117 raise YtError("Incorrect backend type: " + backend)

Vars:
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/home/robot-taxi-stat/<decorator-gen-2>:
 in make_request(command_name = 'get', params = {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, data = None, is_data_compressed = False, return_content = True, response_format = 'yson', use_heavy_proxy = False, timeout = None, client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), allow_retries = None, decode_content = False)


Vars:

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/common.py:
 in forbidden_inside_job(func = <function make_request>, *args = ('get', {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, None, False, True, 'yson', False, None, YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), None, False), **kwargs = {})

     243 'you can override this behaviour by turning on '
     244 '"allow_http_requests_to_yt_from_job" option in config.')
  -> 245 return func(*args, **kwargs)
     246
     247 class DoNotReplaceAction(argparse.Action):

Vars:
  func = <function yt.wrapper.http_driver.make_request>
  args = ('get',
          {'max_size': 65535,
           'output_format': 'yson',
           'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@',
           'transaction_id': 'a521-297e36-3fe0001-94a18eb8'},
          None,
          False,
          True,
          'yson',
          False,
          None,
          YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'),
          None,
          False)
  kwargs = {}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_driver.py:
 in make_request(command_name = 'get', params = {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, data = None, is_data_compressed = False, return_content = True, response_format = 'yson', use_heavy_proxy = False, timeout = (5000, 20000), client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), allow_retries = True, decode_content = False)

     270 is_ping=(command_name == "ping_tx"),
     271 proxy_provider=proxy_provider,
  -> 272 client=client)
     273
     274 def process_error(response):

Vars:
  client = YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch')

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in make_request_with_retries(method = 'GET', url = 'http://hahn.yt.yandex.net/api/v3/get', **kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth object>, 'client': YTClient(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-batch'), 'data': None, 'headers': {'Accept-Encoding': 'gzip, identity', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=60283;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf135e-a64290b7', 'X-YT-Header-Format': '<format=text>yson', 'X-YT-Parameters': '{"path"="//sys/operations/f1e98022-5d10d289-3fe0..."a521-297e36-3fe0001-94a18eb8";"max_size"=65535;}'}, 'is_ping': False, 'log_body': True, 'make_retries': True, 'params': {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, 'proxy_provider': None, 'response_format': 'yson', ...})

     288 This function is for backward compatibility and convenience of use.
     289 """
  -> 290 return RequestRetrier(method=method, url=url, **kwargs).run()
     291
     292

Vars:
  global RequestRetrier = yt.wrapper.http_helpers.RequestRetrier
  method = 'GET'
  url = 'http://hahn.yt.yandex.net/api/v3/get'
  kwargs = {'auth': <yt.wrapper.http_driver.TokenAuth at 0x7ff3f5e449d0>,
            'client': YTClient(
                proxy='hahn.yt.yandex.net',
                token='...',
                pool='taxi-dwh-batch'),
            'data': None,
            'headers': {'Accept-Encoding': 'gzip, identity',
             'User-Agent': 'Python wrapper 0.8.27-0',
             'X-Started-By': '{"pid"=60283;"user"="robot-taxi-stat";}',
             'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf135e-a64290b7',
             'X-YT-Header-Format': '<format=text>yson',
             'X-YT-Parameters': '{"path"="//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@";"output_format"="yson";"transaction_id"="a521-297e36-3fe0001-94a18eb8";"max_size"=65535;}'},
            'is_ping': False,
            'log_body': True,
            'make_retries': True,
            'params': {'max_size': 65535,
             'output_format': 'yson',
             'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@',
             'transaction_id': 'a521-297e36-3fe0001-94a18eb8'},
            'proxy_provider': None,
            'response_format': 'yson',
            'retry_action': None,
            'stream': False,
            'timeout': (5000, 20000)}
  ).run is undefined

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/retries.py:
 in run(self = <yt.wrapper.http_helpers.RequestRetrier object>)

      57 if self.chaos_monkey_enabled and random.randint(1, 5) == 1:
      58 raise YtRetriableError()
   -> 59 return self.action()
      60 except self.exceptions as exception:
      61 if attempt == retry_count:

Vars:
  self = <yt.wrapper.http_helpers.RequestRetrier at 0x7ff3f5e44790>
  self.action = <bound method RequestRetrier.action of <yt.wrapper.http_helpers.RequestRetrier object at 0x7ff3f5e44790>>

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in action(self = <yt.wrapper.http_helpers.RequestRetrier object>)

     258 logger.debug("Response headers %r", hide_token(dict(response.headers)))
     259
  -> 260 _raise_for_status(response, request_info)
     261 return response
     262

Vars:
  global _raise_for_status = <function yt.wrapper.http_helpers._raise_for_status>
  response = <Response [400]>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=60283;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf135e-a64290b7',
                   'X-YT-Header-Format': '<format=text>yson',
                   'X-YT-Parameters': '{"path"="//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@";"output_format"="yson";"transaction_id"="a521-297e36-3fe0001-94a18eb8";"max_size"=65535;}'},
                  'params': {'max_size': 65535,
                   'output_format': 'yson',
                   'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@',
                   'transaction_id': 'a521-297e36-3fe0001-94a18eb8'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/get'}

------------------------------
/usr/lib/python2.7/dist-packages/yt/wrapper/http_helpers.py:
 in _raise_for_status(response = <Response [400]>, request_info = {'headers': {'Accept-Encoding': 'gzip, identity', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=60283;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf135e-a64290b7', 'X-YT-Header-Format': '<format=text>yson', 'X-YT-Parameters': '{"path"="//sys/operations/f1e98022-5d10d289-3fe0..."a521-297e36-3fe0001-94a18eb8";"max_size"=65535;}'}, 'params': {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, 'url': 'http://hahn.yt.yandex.net/api/v3/get'})

     159
     160 if not response.is_ok():
  -> 161 raise YtHttpResponseError(error=response.error(), **request_info)
     162
     163

Vars:
  global YtHttpResponseError = yt.wrapper.errors.YtHttpResponseError
  error is undefined
  response = <Response [400]>
  response.error = <bound method ?.error of <Response [400]>>
  request_info = {'headers': {'Accept-Encoding': 'gzip, identity',
                   'User-Agent': 'Python wrapper 0.8.27-0',
                   'X-Started-By': '{"pid"=60283;"user"="robot-taxi-stat";}',
                   'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf135e-a64290b7',
                   'X-YT-Header-Format': '<format=text>yson',
                   'X-YT-Parameters': '{"path"="//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@";"output_format"="yson";"transaction_id"="a521-297e36-3fe0001-94a18eb8";"max_size"=65535;}'},
                  'params': {'max_size': 65535,
                   'output_format': 'yson',
                   'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@',
                   'transaction_id': 'a521-297e36-3fe0001-94a18eb8'},
                  'url': 'http://hahn.yt.yandex.net/api/v3/get'}


---------====== Detailed exception attributes ======-------------

_cached_fqdn = 'taxi-etl01h.taxi.yandex.net'
_get_fqdn = <function _get_fqdn>
args = ()
attributes = {'datetime': '2018-03-28T05:15:27.029248Z', 'headers': {'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf1...t>yson', 'User-Agent': 'Python wrapper 0.8.27-0'}, 'host': 'taxi-etl01h.taxi.yandex.net', 'params': {'path': '//sys/operations/f1e98022-5d10d289-3fe...'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}, 'transparent': True, 'url': 'http://hahn.yt.yandex.net/api/v3/get'}
code = 1
contains_code = <bound method YtHttpResponseError.contains_code of YtHttpResponseError()>
contains_text = <bound method YtHttpResponseError.contains_text of YtHttpResponseError()>
error = {u'attributes': {u'datetime': u'2018-03-28T05:15:27.028272Z', u'fid': 18442627241113597891L, u'host': u'm05-sas.hahn.yt.yandex.net', u'method': u'Get', u'pid': 179491, u'tid': 6506957751598978122}, u'code': 500, u'inner_errors': [{u'attributes': {u'datetime': u'2018-03-28T05:15:27.028245Z', u'fid': 18442627241113597891L, u'host': u'm05-sas.hahn.yt.yandex.net', u'pid': 179491, u'tid': 6506957751598978122}, u'code': 500, u'inner_errors': [], u'message': u'Node //sys/operations has no child with key "f1e98022-5d10d289-3fe03e8-6534dd55"'}], u'message': u'Error resolving path //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@'}
headers = {'Accept-Encoding': 'gzip, identity', 'User-Agent': 'Python wrapper 0.8.27-0', 'X-Started-By': '{"pid"=60283;"user"="robot-taxi-stat";}', 'X-YT-Correlation-Id': '1cb37513-40d5c929-1ddf135e-a64290b7', 'X-YT-Header-Format': '<format=text>yson', 'X-YT-Parameters': '{"path"="//sys/operations/f1e98022-5d10d289-3fe0..."a521-297e36-3fe0001-94a18eb8";"max_size"=65535;}'}
inner_errors = [{u'attributes': {u'datetime': u'2018-03-28T05:15:27.028272Z', u'fid': 18442627241113597891L, u'host': u'm05-sas.hahn.yt.yandex.net', u'method': u'Get', u'pid': 179491, u'tid': 6506957751598978122}, u'code': 500, u'inner_errors': [{u'attributes': {u'datetime': u'2018-03-28T05:15:27.028245Z', u'fid': 18442627241113597891L, u'host': u'm05-sas.hahn.yt.yandex.net', u'pid': 179491, u'tid': 6506957751598978122}, u'code': 500, u'inner_errors': [], u'message': u'Node //sys/operations has no child with key "f1e98022-5d10d289-3fe03e8-6534dd55"'}], u'message': u'Error resolving path //sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@'}]
is_access_denied = <bound method YtHttpResponseError.is_access_denied of YtHttpResponseError()>
is_chunk_unavailable = <bound method YtHttpResponseError.is_chunk_unavailable of YtHttpResponseError()>
is_concurrent_operations_limit_reached = <bound method YtHttpResponseError.is_concurrent_operations_limit_reached of YtHttpResponseError()>
is_concurrent_transaction_lock_conflict = <bound method YtHttpResponseError.is_concurrent_transaction_lock_conflict of YtHttpResponseError()>
is_master_communication_error = <bound method YtHttpResponseError.is_master_communication_error of YtHttpResponseError()>
is_no_such_transaction = <bound method YtHttpResponseError.is_no_such_transaction of YtHttpResponseError()>
is_request_queue_size_limit_exceeded = <bound method YtHttpResponseError.is_request_queue_size_limit_exceeded of YtHttpResponseError()>
is_request_rate_limit_exceeded = <bound method YtHttpResponseError.is_request_rate_limit_exceeded of YtHttpResponseError()>
is_request_timed_out = <bound method YtHttpResponseError.is_request_timed_out of YtHttpResponseError()>
is_resolve_error = <bound method YtHttpResponseError.is_resolve_error of YtHttpResponseError()>
is_shell_exited = <bound method YtHttpResponseError.is_shell_exited of YtHttpResponseError()>
message = 'Received HTTP response with error'
params = {'max_size': 65535, 'output_format': 'yson', 'path': '//sys/operations/f1e98022-5d10d289-3fe03e8-6534dd55/@', 'transaction_id': 'a521-297e36-3fe0001-94a18eb8'}
simplify = <bound method YtHttpResponseError.simplify of YtHttpResponseError()>
url = 'http://hahn.yt.yandex.net/api/v3/get'
