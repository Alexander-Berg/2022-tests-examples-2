##HEADER
accident_id: '635eda0e-b458-466b-8c34-40e05857ee02'
run_id: '12345'
task: 'stg_order'
creation_dttm: '20180402000001'
##DESCRIPTION
Exception message: Command (map) failed

================== Operation error ==================

Failed jobs limit exceeded

==================== Failed Jobs ====================

--------------------- Job error ---------------------

User job failed
  Process exited with code 1

-------------------- Job stderr --------------------

Traceback (most recent call last):
  File "_nile_runner.py", line 137, in <module>
    main()
  File "_nile_runner.py", line 124, in main
    function = load_function(sys.argv[1])
  File "_nile_runner.py", line 115, in load_function
    function = pickle.load(code_file)
  File "/usr/lib/python2.7/pickle.py", line 1378, in load
    return Unpickler(file).load()
  File "/usr/lib/python2.7/pickle.py", line 858, in load
    dispatch[key](self)
  File "/usr/lib/python2.7/pickle.py", line 1090, in load_global
    klass = self.find_class(module, name)
  File "/usr/lib/python2.7/pickle.py", line 1124, in find_class
    __import__(module)
  File "/yt/disk7/hahn-data/slots/27/sandbox/lib/extract_utils.py", line 7, in <module>
    from bson import json_util
ImportError: No module named bson

--------------------- Job error ---------------------

User job failed
  Process exited with code 1

-------------------- Job stderr --------------------

Traceback (most recent call last):
  File "_nile_runner.py", line 137, in <module>
    main()
  File "_nile_runner.py", line 124, in main
    function = load_function(sys.argv[1])
  File "_nile_runner.py", line 115, in load_function
    function = pickle.load(code_file)
  File "/usr/lib/python2.7/pickle.py", line 1378, in load
    return Unpickler(file).load()
  File "/usr/lib/python2.7/pickle.py", line 858, in load
    dispatch[key](self)
  File "/usr/lib/python2.7/pickle.py", line 1090, in load_global
    klass = self.find_class(module, name)
  File "/usr/lib/python2.7/pickle.py", line 1124, in find_class
    __import__(module)
  File "/yt/disk5/hahn-data/slots/26/sandbox/lib/extract_utils.py", line 7, in <module>
    from bson import json_util
ImportError: No module named bson

--------------------- Job error ---------------------

User job failed
  Process exited with code 1

-------------------- Job stderr --------------------

Traceback (most recent call last):
  File "_nile_runner.py", line 137, in <module>
    main()
  File "_nile_runner.py", line 124, in main
    function = load_function(sys.argv[1])
  File "_nile_runner.py", line 115, in load_function
    function = pickle.load(code_file)
  File "/usr/lib/python2.7/pickle.py", line 1378, in load
    return Unpickler(file).load()
  File "/usr/lib/python2.7/pickle.py", line 858, in load
    dispatch[key](self)
  File "/usr/lib/python2.7/pickle.py", line 1090, in load_global
    klass = self.find_class(module, name)
  File "/usr/lib/python2.7/pickle.py", line 1124, in find_class
    __import__(module)
  File "/yt/disk3/hahn-data/slots/25/sandbox/lib/extract_utils.py", line 7, in <module>
    from bson import json_util
ImportError: No module named bson

Exception type: <class 'nile.drivers.common.progress.CommandFailedError'>
Python version: Python 2.7.6: /usr/bin/python


---------------====== Original traceback ======------------------

Traceback (most recent call last):
  File "/usr/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/usr/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py", line 70, in <module>
    load(dtu.period(args.start_date, args.end_date))
  File "/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py", line 64, in load
    **extractors
  File "/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/impl.py", line 85, in raw_to_day_partitions
    job.run()
  File "/usr/lib/python2.7/dist-packages/nile/api/v1/job.py", line 154, in run
    execution_plan.run()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 109, in run
    self._observe_until_someone_exits()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py", line 176, in _observe_until_someone_exits
    progress.raise_for_state()
  File "/usr/lib/python2.7/dist-packages/nile/drivers/common/progress.py", line 130, in raise_for_state
    raise CommandFailedError(self.fail_info, self.type)
CommandFailedError: Command (map) failed

================== Operation error ==================

Failed jobs limit exceeded

==================== Failed Jobs ====================

--------------------- Job error ---------------------

User job failed
  Process exited with code 1

-------------------- Job stderr --------------------

Traceback (most recent call last):
  File "_nile_runner.py", line 137, in <module>
    main()
  File "_nile_runner.py", line 124, in main
    function = load_function(sys.argv[1])
  File "_nile_runner.py", line 115, in load_function
    function = pickle.load(code_file)
  File "/usr/lib/python2.7/pickle.py", line 1378, in load
    return Unpickler(file).load()
  File "/usr/lib/python2.7/pickle.py", line 858, in load
    dispatch[key](self)
  File "/usr/lib/python2.7/pickle.py", line 1090, in load_global
    klass = self.find_class(module, name)
  File "/usr/lib/python2.7/pickle.py", line 1124, in find_class
    __import__(module)
  File "/yt/disk7/hahn-data/slots/27/sandbox/lib/extract_utils.py", line 7, in <module>
    from bson import json_util
ImportError: No module named bson

--------------------- Job error ---------------------

User job failed
  Process exited with code 1

-------------------- Job stderr --------------------

Traceback (most recent call last):
  File "_nile_runner.py", line 137, in <module>
    main()
  File "_nile_runner.py", line 124, in main
    function = load_function(sys.argv[1])
  File "_nile_runner.py", line 115, in load_function
    function = pickle.load(code_file)
  File "/usr/lib/python2.7/pickle.py", line 1378, in load
    return Unpickler(file).load()
  File "/usr/lib/python2.7/pickle.py", line 858, in load
    dispatch[key](self)
  File "/usr/lib/python2.7/pickle.py", line 1090, in load_global
    klass = self.find_class(module, name)
  File "/usr/lib/python2.7/pickle.py", line 1124, in find_class
    __import__(module)
  File "/yt/disk5/hahn-data/slots/26/sandbox/lib/extract_utils.py", line 7, in <module>
    from bson import json_util
ImportError: No module named bson

--------------------- Job error ---------------------

User job failed
  Process exited with code 1

-------------------- Job stderr --------------------

Traceback (most recent call last):
  File "_nile_runner.py", line 137, in <module>
    main()
  File "_nile_runner.py", line 124, in main
    function = load_function(sys.argv[1])
  File "_nile_runner.py", line 115, in load_function
    function = pickle.load(code_file)
  File "/usr/lib/python2.7/pickle.py", line 1378, in load
    return Unpickler(file).load()
  File "/usr/lib/python2.7/pickle.py", line 858, in load
    dispatch[key](self)
  File "/usr/lib/python2.7/pickle.py", line 1090, in load_global
    klass = self.find_class(module, name)
  File "/usr/lib/python2.7/pickle.py", line 1124, in find_class
    __import__(module)
  File "/yt/disk3/hahn-data/slots/25/sandbox/lib/extract_utils.py", line 7, in <module>
    from bson import json_util
ImportError: No module named bson


---------------====== Detailed traceback ======------------------

Traceback (most recent call last):

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_module_as_main(mod_name = 'layer.yt.stg.mdb.orders.loader', alter_argv = 1)

     160 sys.argv[0] = fname
     161 return _run_code(code, main_globals, None,
  -> 162 "__main__", fname, loader, pkg_name)
     163
     164 def run_module(mod_name, init_globals=None,

Vars:
  fname = '/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py'
  loader = <pkgutil.ImpLoader instance at 0x7f1a73906f80>
  pkg_name = 'layer.yt.stg.mdb.orders'

------------------------------
/usr/lib/python2.7/runpy.py:
 in _run_code(code = <code object <module> at 0x7f1a7551aa30, file "/...t/etl/layer/yt/stg/mdb/orders/loader.py", line 3>, run_globals = {'RawOrders': <class 'layer.yt.raw.mdb.orders.table.RawOrders'>, 'StgOrders': <class 'layer.yt.stg.mdb.orders.table.StgOrders'>, '__builtins__': <module '__builtin__' (built-in)>, '__doc__': None, '__file__': '/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py', '__loader__': <pkgutil.ImpLoader instance>, '__name__': '__main__', '__package__': 'layer.yt.stg.mdb.orders', 'args': Namespace(chunk_size=None, dst_prefix='//home/ta... start_date=datetime.datetime(2018, 3, 13, 0, 0)), 'dtu': <module 'lib.datetime_utils' from '/home/robot-taxi-stat/etl/lib/datetime_utils.pyc'>, ...}, init_globals = None, mod_name = '__main__', mod_fname = '/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py', mod_loader = <pkgutil.ImpLoader instance>, pkg_name = 'layer.yt.stg.mdb.orders')

      70 __loader__ = mod_loader,
      71 __package__ = pkg_name)
   -> 72 exec code in run_globals
      73 return run_globals
      74

Vars:
  code = <code object <module> at 0x7f1a7551aa30, file "/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py", line 3>
  run_globals = {'RawOrders': layer.yt.raw.mdb.orders.table.RawOrders,
                 'StgOrders': layer.yt.stg.mdb.orders.table.StgOrders,
                 '__builtins__': <module '__builtin__' (built-in)>,
                 '__doc__': None,
                 '__file__': '/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py',
                 '__loader__': <pkgutil.ImpLoader instance at 0x7f1a73906f80>,
                 '__name__': '__main__',
                 '__package__': 'layer.yt.stg.mdb.orders',
                 'args': Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 15, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 3, 13, 0, 0)),
                 'dtu': <module 'lib.datetime_utils' from '/home/robot-taxi-stat/etl/lib/datetime_utils.pyc'>,
                 'extract_value': <function lib.extract_utils.extract_value>,
                 'extractors': {'fixed_price.destination.lat': <function lib.extract_utils.<lambda>>,
                  'fixed_price.destination.lon': <function lib.extract_utils.<lambda>>,
                  'id': <function lib.extract_utils.<lambda>>,
                  'request.class': <function layer.yt.stg.mdb.orders.impl.request_class_extractor>,
                  'request.destinations.accepts_exact5': <function lib.extract_utils.<lambda>>,
                  'request.destinations.country': <function lib.extract_utils.<lambda>>,
                  'request.destinations.description': <function lib.extract_utils.<lambda>>,
                  'request.destinations.exact': <function lib.extract_utils.<lambda>>,
                  'request.destinations.flight': <function lib.extract_utils.<lambda>>,
                  'request.destinations.fullname': <function lib.extract_utils.<lambda>>,
                  'request.destinations.geopoint.lat': <function lib.extract_utils.<lambda>>,
                  'request.destinations.geopoint.lon': <function lib.extract_utils.<lambda>>,
                  'request.destinations.locality': <function lib.extract_utils.<lambda>>,
                  'request.destinations.object_type': <function lib.extract_utils.<lambda>>,
                  'request.destinations.oid': <function lib.extract_utils.<lambda>>,
                  'request.destinations.porchnumber': <function lib.extract_utils.<lambda>>,
                  'request.destinations.premisenumber': <function lib.extract_utils.<lambda>>,
                  'request.destinations.terminal': <function lib.extract_utils.<lambda>>,
                  'request.destinations.thoroughfare': <function lib.extract_utils.<lambda>>,
                  'request.destinations.type': <function lib.extract_utils.<lambda>>,
                  'request.destinations.use_geopoint': <function lib.extract_utils.<lambda>>,
                  'request.requirements': <function layer.yt.stg.mdb.orders.impl.requirements_extractor>,
                  'request.source.geopoint.lat': <function lib.extract_utils.<lambda>>,
                  'request.source.geopoint.lon': <function lib.extract_utils.<lambda>>,
                  'type': <function lib.extract_utils.<lambda>>},
                 'impl': <module 'layer.yt.stg.mdb.orders.impl' from '/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/impl.pyc'>,
                 'load': <function __main__.load>,
                 'path_extractor': <function lib.extract_utils.path_extractor>}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py:
 in <module>()

      66
      67
      68 if __name__ == '__main__':
      69 args = args.parse()
   -> 70 load(dtu.period(args.start_date, args.end_date))

Vars:
  load = <function __main__.load>
  dtu = <module 'lib.datetime_utils' from '/home/robot-taxi-stat/etl/lib/datetime_utils.pyc'>
  dtu.period = <function lib.datetime_utils.period>
  args = Namespace(chunk_size=None, dst_prefix='//home/taxi-dwh', end_date=datetime.datetime(2018, 3, 15, 0, 0), month=None, src_prefix='//home/taxi-dwh', start_date=datetime.datetime(2018, 3, 13, 0, 0))
  args.start_date = datetime.datetime(2018, 3, 13, 0, 0)
  args.end_date = datetime.datetime(2018, 3, 15, 0, 0)

------------------------------
/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/loader.py:
 in load(period = <lib.datetime_utils.Period object>)

      62 month.end,
      63 default_extractor=extract_value,
   -> 64 **extractors
      65 )
      66

Vars:
  global extractors = {'fixed_price.destination.lat': <function lib.extract_utils.<lambda>>,
                       'fixed_price.destination.lon': <function lib.extract_utils.<lambda>>,
                       'id': <function lib.extract_utils.<lambda>>,
                       'request.class': <function layer.yt.stg.mdb.orders.impl.request_class_extractor>,
                       'request.destinations.accepts_exact5': <function lib.extract_utils.<lambda>>,
                       'request.destinations.country': <function lib.extract_utils.<lambda>>,
                       'request.destinations.description': <function lib.extract_utils.<lambda>>,
                       'request.destinations.exact': <function lib.extract_utils.<lambda>>,
                       'request.destinations.flight': <function lib.extract_utils.<lambda>>,
                       'request.destinations.fullname': <function lib.extract_utils.<lambda>>,
                       'request.destinations.geopoint.lat': <function lib.extract_utils.<lambda>>,
                       'request.destinations.geopoint.lon': <function lib.extract_utils.<lambda>>,
                       'request.destinations.locality': <function lib.extract_utils.<lambda>>,
                       'request.destinations.object_type': <function lib.extract_utils.<lambda>>,
                       'request.destinations.oid': <function lib.extract_utils.<lambda>>,
                       'request.destinations.porchnumber': <function lib.extract_utils.<lambda>>,
                       'request.destinations.premisenumber': <function lib.extract_utils.<lambda>>,
                       'request.destinations.terminal': <function lib.extract_utils.<lambda>>,
                       'request.destinations.thoroughfare': <function lib.extract_utils.<lambda>>,
                       'request.destinations.type': <function lib.extract_utils.<lambda>>,
                       'request.destinations.use_geopoint': <function lib.extract_utils.<lambda>>,
                       'request.requirements': <function layer.yt.stg.mdb.orders.impl.requirements_extractor>,
                       'request.source.geopoint.lat': <function lib.extract_utils.<lambda>>,
                       'request.source.geopoint.lon': <function lib.extract_utils.<lambda>>,
                       'type': <function lib.extract_utils.<lambda>>}

------------------------------
/home/robot-taxi-stat/etl/layer/yt/stg/mdb/orders/impl.py:
 in raw_to_day_partitions(raw_table = <class 'layer.yt.raw.mdb.orders.table.RawOrders'>, stg_table = <class 'layer.yt.stg.mdb.orders.table.StgOrders'>, start_date = datetime.datetime(2018, 3, 13, 0, 0), end_date = datetime.datetime(2018, 3, 15, 0, 0), default_extractor = <function extract_value>, **extractors = {'fixed_price.destination.lat': <function <lambda>>, 'fixed_price.destination.lon': <function <lambda>>, 'id': <function <lambda>>, 'request.class': <function request_class_extractor>, 'request.destinations.accepts_exact5': <function <lambda>>, 'request.destinations.country': <function <lambda>>, 'request.destinations.description': <function <lambda>>, 'request.destinations.exact': <function <lambda>>, 'request.destinations.flight': <function <lambda>>, 'request.destinations.fullname': <function <lambda>>, ...})

      83 stream.call(cluster_utils.sort_if_need, meta).put(meta.rotation_path())
      84
   -> 85 job.run()
      86
      87 etl.rotation_to_target(stg_metas)

Vars:
  job = Job 'TAXIDWH stg.mdb.orders orders':
            remote_input_table_output = RemoteInputTable(
                path=Path('//home/taxi-dwh/raw/mdb/orders/2018-03-01'),
                ignore_missing=False)
            (map_output0, map_output1, map_output2) = remote_input_table_output | Map(
                operator=Operator(
                    function=<function layer.yt.stg.mdb.orders.impl.mapper>,
                    name='mapper',
                    outputs=('output0', 'output1', 'output2'),
                    input_format=Records(),
                    output_format=Records(),
                    files=frozenset(),
                    consumes_full_input=True,
                    hints=_Hints(
                        outputs=('output0', 'output1', 'output2'),
                        outputs_count=3)),
                files=(),
                intensity='data',
                memory_limit=None,
                ordered=False,
                enable_row_index=False)
            sort_output = map_output0 | Sort(fields=('id',))
            sort2_output = map_output1 | Sort(fields=('id',))
            sort3_output = map_output2 | Sort(fields=('id',))
            sort2_output | RemoteOutputTable(
                path=Path('//home/taxi-dwh/rotation/stg/mdb/orders/2018-03-14'),
                allow_override=True)
            sort_output | RemoteOutputTable(
                path=Path('//home/taxi-dwh/rotation/stg/mdb/orders/2018-03-13'),
                allow_override=True)
            sort3_output | RemoteOutputTable(
                path=Path('//home/taxi-dwh/rotation/stg/mdb/orders/2018-03-15'),
                allow_override=True)

  job.run = <bound method Job.run of Job(driver=YTDriver(proxy='hahn.yt.yandex.net', token='...', pool='taxi-dwh-priority', clean_cache=False), name='TAXIDWH stg.mdb.orders orders', uuid_by_name=False, environment=Environment(templates={'tmp': '$tmp_root/by-uuid/$job_uuid', 'job_root': '$home/$job_name', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_root': 'tmp/nile/$user_name', 'job_name': 'TAXIDWH stg.mdb.orders orders', 'checkpoints_root': '$tmp/checkpoints', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'user_name': u'robot-taxi-stat', 'job_uuid': 'eecf9986-2869-11e8-a2e9-8dd8666f8e10', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/pyt
 hon2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_bindings/wheelhouse'), reference_date='2018-03-14', packages=frozenset([DevelopPackage(path='/home/robot-taxi-stat/etl', add_to_archive=None), Package(requirement='enum34', path=None, add_to_archive=None), Package(requirement='pytz', path=None, add_to_archive=None), Package(requirement='transliterate', path=None, add_to_archive=None)]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=10, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables':
  'default'}), python_binary='python'), default_cluster_environment=Environment(templates={'checkpoints_root': '$tmp/checkpoints', 'tmp': '$tmp_root/by-uuid/$job_uuid', 'title': 'Nile job $job_name (step $current_step / $total_steps)', 'tmp_pretty': '$tmp_root/by-name/$job_name', 'tmp_root': 'tmp/nile/$user_name', 'user_name': u'robot-taxi-stat', 'tmp_files': '$tmp/files'}, files=frozenset([]), run_command_prefix=None, default_memory_limit=512, default_add_to_archive=True, default_mode='records', publish_settings={'default_allow_change_job': False, 'default_statface_job': None}, base_files=frozenset([]), operations_environment={}, base_package_paths=('/usr/lib/python2.7/dist-packages/nile/wheelhouse', '/usr/lib/python2.7/dist-packages/cyson/wheelhouse', '/usr/lib/python2.7/dist-packages/tdigest_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/qb2/wheelhouse', '/usr/lib/python2.7/dist-packages/signurl_bindings/wheelhouse', '/usr/lib/python2.7/dist-packages/metrikatraficsource_b
 indings/wheelhouse'), reference_date='2018-03-14', packages=frozenset([]), base_packages=frozenset(['qb2', 'signurl_bindings', 'nile', 'cyson', 'metrikatraficsource_bindings', 'python_tdigest_bindings', 'decorator']), yt_spec_defaults={}, auto_increase_memory_limit=True, package_paths=(), parallel_operations_limit=1, compression_level=Shape({'final_tables': 'normal', 'tmp_tables': 'lightest'}), merge_strategy=Shape({'final_tables': 'always', 'tmp_tables': 'default'}), python_binary='python'))>

------------------------------
/usr/lib/python2.7/dist-packages/nile/api/v1/job.py:
 in run(self = Job(driver=YTDriver(proxy='hahn.yt.yandex.net', ...mp_tables': 'default'}), python_binary='python')), checkpoints = (), store_checkpoints = True, hide_command = False, skip_publish = False)

     152 with CustomSysArgv(sys_argv):
     153 try:
  -> 154 execution_plan.run()
     155 except Exception:
     156 exc_info = sys.exc_info()

Vars:
  execution_plan = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7f1a645decd0>
  execution_plan.run = <bound method YTExecutionPlan.run of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7f1a645decd0>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in run(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     107 while self.queues_manager.has_more_work:
     108 self._schedule_operations()
  -> 109 self._observe_until_someone_exits()
     110 except KeyboardInterrupt:
     111 self._abort_operations()

Vars:
  self = <nile.drivers.yt.execution_plan.YTExecutionPlan at 0x7f1a645decd0>
  self._observe_until_someone_exits = <bound method YTExecutionPlan._observe_until_someone_exits of <nile.drivers.yt.execution_plan.YTExecutionPlan object at 0x7f1a645decd0>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/yt/execution_plan.py:
 in _observe_until_someone_exits(self = <nile.drivers.yt.execution_plan.YTExecutionPlan object>)

     174 if not progress.has_finished_with_success:
     175 self._abort_operations()
  -> 176 progress.raise_for_state()
     177
     178 progress.finish()

Vars:
  progress = <nile.drivers.yt.progress.YTOperationProgress at 0x7f1a64561590>
  progress.raise_for_state = <bound method YTOperationProgress.raise_for_state of <nile.drivers.yt.progress.YTOperationProgress object at 0x7f1a64561590>>

------------------------------
/usr/lib/python2.7/dist-packages/nile/drivers/common/progress.py:
 in raise_for_state(self = <nile.drivers.yt.progress.YTOperationProgress object>)

     128 raise self.exc_info[0], self.exc_info[1], self.exc_info[2]
     129 else:
  -> 130 raise CommandFailedError(self.fail_info, self.type)
     131
     132 @abc.abstractproperty

Vars:
  global CommandFailedError = nile.drivers.common.progress.CommandFailedError
  self = <nile.drivers.yt.progress.YTOperationProgress at 0x7f1a64561590>
  self.fail_info = YTFailedOperationInfo(
                       operation_id='b1ea4962-2a4000d6-3fe03e8-760d665f',
                       state=failed,
                       error='Failed jobs limit exceeded',
                       failed_jobs=(YTFailedJobInfo(
                            error='User job failed\n Process exited with code 1',
                            stderr='Traceback (most recent call last):\n File "_nile_runner.py", line 137, in <module>\n main()\n File "_nile_runner.py", line 124, in main\n function = load_function(sys.argv[1])\n File "_nile_runner.py", line 115, in load_function\n function = pickle.load(code_file)\n File "/usr/lib/python2.7/pickle.py", line 1378, in load\n return Unpickler(file).load()\n File "/usr/lib/python2.7/pickle.py", line 858, in load\n dispatch[key](self)\n File "/usr/lib/python2.7/pickle.py", line 1090, in load_global\n klass = self.find_class(module, name)\n File "/usr/lib/python2.7/pickle.py", line 1124, in find_class\n __import__(module)\n File "/yt/disk7/hahn-data/slots/27/sandbox/lib/extract_utils.py", line 7, in <module>\n from bson import json_util\nImportError: No module named bson'),
                        YTFailedJobInfo(
                            error='User job failed\n Process exited with code 1',
                            stderr='Traceback (most recent call last):\n File "_nile_runner.py", line 137, in <module>\n main()\n File "_nile_runner.py", line 124, in main\n function = load_function(sys.argv[1])\n File "_nile_runner.py", line 115, in load_function\n function = pickle.load(code_file)\n File "/usr/lib/python2.7/pickle.py", line 1378, in load\n return Unpickler(file).load()\n File "/usr/lib/python2.7/pickle.py", line 858, in load\n dispatch[key](self)\n File "/usr/lib/python2.7/pickle.py", line 1090, in load_global\n klass = self.find_class(module, name)\n File "/usr/lib/python2.7/pickle.py", line 1124, in find_class\n __import__(module)\n File "/yt/disk5/hahn-data/slots/26/sandbox/lib/extract_utils.py", line 7, in <module>\n from bson import json_util\nImportError: No module named bson'),
                        YTFailedJobInfo(
                            error='User job failed\n Process exited with code 1',
                            stderr='Traceback (most recent call last):\n File "_nile_runner.py", line 137, in <module>\n main()\n File "_nile_runner.py", line 124, in main\n function = load_function(sys.argv[1])\n File "_nile_runner.py", line 115, in load_function\n function = pickle.load(code_file)\n File "/usr/lib/python2.7/pickle.py", line 1378, in load\n return Unpickler(file).load()\n File "/usr/lib/python2.7/pickle.py", line 858, in load\n dispatch[key](self)\n File "/usr/lib/python2.7/pickle.py", line 1090, in load_global\n klass = self.find_class(module, name)\n File "/usr/lib/python2.7/pickle.py", line 1124, in find_class\n __import__(module)\n File "/yt/disk3/hahn-data/slots/25/sandbox/lib/extract_utils.py", line 7, in <module>\n from bson import json_util\nImportError: No module named bson')))
  self.type = 'map'


---------====== Detailed exception attributes ======-------------

args = ()
command_type = 'map'
info = YTFailedOperationInfo(operation_id='b1ea4962-2a4... json_util\nImportError: No module named bson')))
message = ''
