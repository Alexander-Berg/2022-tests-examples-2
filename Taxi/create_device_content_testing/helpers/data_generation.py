# pylint: skip-file
# flake8: noqa
import datetime
import hashlib
import random
import secrets

import pytz

from helpers.config import read_names_surnames, read_public_key


def _generate_mac():
    return '{:02x}:{:02x}:{:02x}:{:02x}:{:02x}:{:02x}'.format(
        random.randint(0, 255),
        random.randint(0, 255),
        random.randint(0, 255),
        random.randint(0, 255),
        random.randint(0, 255),
        random.randint(0, 255),
    )


def _generate_sw_version():
    return '{:1d}.{:1d}-{:03d}'.format(
        random.randint(1, 2), random.randint(1, 9), random.randint(0, 999),
    )


def _generate_hw_version():
    return '{:1d}.{:1d}'.format(random.randint(1, 2), random.randint(1, 9))


def _generate_imei():
    return str(random.randint(10 ** 14, 10 ** 15 - 1))


def _generate_iccid():
    return str(random.randint(10 ** 19, 10 ** 21 - 1))


def _generate_imsi():
    return str(random.randint(10 ** 15, 10 ** 16 - 1))


def _generate_phone_number():
    return '+79' + '{:8d}'.format(random.randint(0, 10 ** 9 - 1))


def _generate_serial():
    return '{:016d}'.format(random.randint(0, 10 ** 16 - 1))


def _generate_total_ram():
    return random.randint(262144, 1048576)


def _generate_comment():
    return 'generated by script'


def _generate_timestamp_ago(minutes):
    now = datetime.datetime.utcnow().replace(
        microsecond=0,
    ) - datetime.timedelta(minutes=minutes)
    return str(now.replace(tzinfo=pytz.utc)).replace(' ', 'T')


def _generate_uptime_ms():
    return random.randint(0, 10 ** 9)  # up to roughly 2 weeks


def _generate_status_memories():
    disk_total = random.randint(1048576, 1048576 * 10)
    return {
        'disk_bytes_free_space': disk_total - random.randint(10 ** 3, 10 ** 4),
        'disk_bytes_total_space': disk_total,
        'root_bytes_free_space': disk_total // 2,
        'root_bytes_total_space': disk_total // 2 - random.randint(
            10 ** 3, 10 ** 4,
        ),
        'ram_bytes_free_space': random.randint(1024, 262144),
    }


def _generate_moscow_gps():
    return {
        'lat': 55.751244 + random.random() / 10,
        'lon': 37.618423 + random.random() / 20,
    }


def _generate_gnss(gps):
    return {
        **gps,
        'speed_kmph': random.random() * 110,
        'accuracy_m': random.random() * 5,
        'direction_deg': (random.random() - 0.5) * 360,
    }


def _generate_driver_name():
    names, surnames = read_names_surnames()
    name = random.choice(names.splitlines())
    surname = random.choice(surnames.splitlines())
    return surname + ' ' + name


def _generate_plate_number():
    letters = ['А', 'В', 'Е', 'К', 'М', 'Н', 'О', 'Р', 'С', 'Т', 'У', 'Х']
    return (
        random.choice(letters)
        + ' '
        + '{:3d}'.format(random.randint(0, 10 ** 3 - 1))
        + ' '
        + random.choice(letters)
        + random.choice(letters)
        + ' '
        + '{:2d}'.format(random.randint(0, 10 ** 2 - 1))
    )


def _generate_device_name():
    return 'Camera № ' + str(random.randint(0, 1000))


def _generate_event_type():
    events = ['distraction', 'sleep']
    return random.choice(events)


def generate_timestamp_now():
    now = datetime.datetime.utcnow().replace(microsecond=0)
    return str(now.replace(tzinfo=pytz.utc)).replace(' ', 'T')


def generate_registration_payload():
    public_key = read_public_key().decode('utf-8')
    mac = {'wlan0': _generate_mac()}
    if random.random() > 0.2:
        mac['eth0'] = _generate_mac()
    if random.random() > 0.2:
        mac['usb_modem'] = _generate_mac()
    return {
        'mac_address': mac,
        'public_key': public_key,
        'hardware_version': _generate_hw_version(),
        'imei': _generate_imei(),
        'serial_number': _generate_serial(),
        'ram_bytes_total': _generate_total_ram(),
    }


def generate_admin_partner_payload(partner_passport_uid):
    return {'name': partner_passport_uid}


def generate_status_payload(device_id):
    timestamp = generate_timestamp_now()
    gps = _generate_moscow_gps()
    return {
        'device_id': device_id,
        'timestamp': timestamp,
        'status': {
            'status_at': timestamp,
            'cpu_temperature': random.randint(37, 80),
            **_generate_status_memories(),
            'gps_position': gps,
            'gnss': _generate_gnss(gps),
            'software_version': _generate_sw_version(),
            'sim_iccid': _generate_iccid(),
            'sim_imsi': _generate_imsi(),
            'sim_phone_number': _generate_phone_number(),
            'uptime_ms': _generate_uptime_ms(),
        },
    }


def generate_web_driver_payload():
    return {'name': _generate_driver_name()}


def generate_web_plate_number_payload():
    return {'plate_number': _generate_plate_number()}


def generate_device_name_payload():
    return {'name': _generate_device_name()}


def generate_videos_metadata_payload(device_id, video_bin):
    file_id = device_id + '/mnt/sd/'
    file_id += hashlib.sha256(video_bin).hexdigest()[0:16]
    file_id += '{:6d}'.format(random.randint(0, 10 ** 7 - 1))
    file_id += '.mp4'
    return {
        'device_id': device_id,
        'timestamp': generate_timestamp_now(),
        'size_bytes': len(video_bin),
        'file_id': file_id,
        'started_at': _generate_timestamp_ago(random.randint(30, 60)),
        'finished_at': _generate_timestamp_ago(random.randint(0, 30)),
    }


def generate_photos_metadata_payload(device_id, photo_bin):
    file_id = device_id + '/mnt/sd/'
    file_id += hashlib.sha256(photo_bin).hexdigest()[0:16]
    file_id += '{:6d}'.format(random.randint(0, 10 ** 7 - 1))
    file_id += '.jpeg'
    return {
        'device_id': device_id,
        'timestamp': generate_timestamp_now(),
        'size_bytes': len(photo_bin),
        'file_id': file_id,
        'taken_at': _generate_timestamp_ago(random.randint(30, 60)),
    }


def generate_event_payload(photo_file_id, video_file_id):
    return {
        'id': secrets.token_hex(16),
        'at': _generate_timestamp_ago(random.randint(1, 5)),
        'type': _generate_event_type(),
        'gnss': _generate_gnss(_generate_moscow_gps()),
        'extra': 'generated by script',
        'video_file_id': video_file_id,
        'photo_file_id': photo_file_id,
    }
