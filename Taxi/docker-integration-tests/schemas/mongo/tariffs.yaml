description: tariffs (shared between cities and parks)
settings:
    collection: tariffs
    connection: taxi
    database: dbtaxi
indexes:
  - key: categories.id
    unique: true
  - key: confirmation_id
    sparse: true
    unique: true
  - key:
      - name: date_to
        type: ascending
      - name: home_zone
        type: ascending
  - key: updated
wiki_info: |
    ####dbtaxi.tariffs - Тарифы

    ```python
    {
       'home_zone': 'str',                  # домашняя зона тарифа (имя). При создании заказа, для точки начала поездки находим тариф с ближайшей зоной.
       'activation_zone': 'str',            # название зоны, сделанный заказ откуда будет относиться к этому тарифу
       'rz': ['str'],                       # список имён зон, которые понадобятся в процессе поездки по данному тарифу
       'date_from': datetime,               # дата с которой тариф начинает работать
       'date_to': datetime | null,          # дата когда тариф деактивирован
       'p': string,                         # ID-парка или '__mrt'
       'categories': [                      # список категорий (подтарифов)
       {
           'name':  'str',                  # название (на английском) [econom, business, etc.]
           'category_type': 'str',          # название типа тарифа [application, call_center]
           'name_key': 'str',               # название тарифа в танкере, например interval.day
           'from_time': 'str',              # время начала (например '09:00').
           'to_time': 'str',                # время окончания (например, '20:59').
           'dayoff': bool,                  # DEPRECATED, в пользу 'dt'. применяется к рабочим или к выходным дням?
           'dt': int,                       # day type: 0 категория применяется по рабочим дням, 1 - по выходным, 2 - ежедневно

           'paid_cancel_fix': float,            # фиксированная стоимость отмены заказа
           'add_minimal_to_paid_cancel': bool,  # добавлять "minimal" к цене отмены заказа
           'minimal': float,                # стоимость подачи
           'dpi': TariffInterval,           # DEPRECATED: используйте для этого поле st. Правила тарификации езды по "домашней" зоне по одометру
           'tpi': TariffInterval,           # DEPRECATED: используйте для этого поле st. правила тарификации езды по "домашней" зоне по секундомеру
           'pddpi': TariffInterval,         # правила тарификации платной подачи (подача на заказ, расположенный вне "домашней" зоны) по одометру
           'dmi': int,                      # номер счетчика из массива 'm', с которым синхронизуется
           'tmi': int,                      #    соответствующий калькулятор:
           'pddmi': int,                    #    dpi -> dmi, tpi -> tmi, pddpi -> pddmi
           'waiting': float,                # число включенных минут ожидания (бесплатного)
           'waiting_price_type':string,     # тип платного ожидания [fixed, per_minute]. Default: per_minute
           'waiting_price': float,          # цена за единицу времени платного ожидания (если per_minute) или фиксированная цена ожидания (если fixed)
           'req_prices': [                  # список цен на простые аддитивные услуги
           {
               't': 'str',                  # идентификатор услуги, например 'childseat'
               'p': float,                  # цена требования
               'price': {                   # (опционально) тарификация требования
                    'included_time': float,        # количество предоплаченных минут
                    'included_distance': float,    # количество предоплаченных км
                    'time_multiplier': float,      # мультипликатор цены для счетчика времени
                    'distance_multiplier': float,  # мультипликатор цены для счетчика расстояния
                    'st': SpecialTaximeters  # список "особых таксометров" - когда поездка по зоне оплачивается иначе
                                             # данный объект рассчитывается на основе четырёх перечисленных выше параметров
                                             # и дефолтного объекта 'st' текущей категории
               }
           }
           ],
           'zp': [                          # список трансферов
           {
               'src': 'str',                # имя зоны начала трансфера
               'dst': 'str',                # имя зоны окончания трансфера
               'route_without_jams': bool,  # производить расчет без учета пробок (по-умолчанию False)
               'p': {                       # информация о цене
                   'minimal': float,        # цена за трансфер ограничена снизу вот этим числом
                   'once': float,           # цена за посадку
                   'waiting': float,        # число включенных минут бесплатного ожидания
                   'waiting_price': float,  # цена за единицу времени дополнительного ожидания
                   'dpi': TariffInterval,   # правила тарификации езды по одометру
                   'tpi': TariffInterval,   # правила тарификации езды по секундомеру
                   'dmi': int,              # такое же значение, как у соответствующих полей
                   'tmi': int,              #     в корне category
               }
           }
           ],
           'dynamic_transfers': [           # DEPRECATED. список динамических трансферов
           {
               'src': 'str',                # имя зоны начала трансфера
               'dst': 'str',                # имя зоны окончания трансфера
               'p': {                       # информация о цене
                   'coeff': float,          # коэффициент применяемый к расчету по special_taximeters
                   'waiting': float,        # число включенных минут бесплатного ожидания
                   'waiting_price': float,  # цена за единицу времени дополнительного ожидания
                   'dpi': TariffInterval,   # правила тарификации езды по одометру
                   'tpi': TariffInterval,   # правила тарификации езды по секундомеру
                   'dmi': int,              # такое же значение, как у соответствующих полей
                   'tmi': int,              #     в корне category
               }
           }
           ],
           'st': SpecialTaximeters,         # список "особых таксометров" - когда поездка по зоне оплачивается иначе,
           'id': 'str',                     # id тарифа для синхронизации с такометром
           'currency': 'str',               # валюта, в которой указаны цены в тарифе

           'm': [                           # массив счетчиков, один на категорию, на которые ссылаются все tmi, dmi, pddmi внутри категории
           {                                # счетчик это:
              'ppd': float,                 # DEPRECATED. число предоплаченых юнитов (для tmi - минут, для dmi - километров), сейчас надо просто обновлять все счетчики
              's': int,                     # когда включать счетчик:
                                            #     0 - при наступлении статуса driving,
                                            #     1 - waiting,
                                            #     2 - transporting,
                                            #     3 - когда ссылающийся на нас калькулятор активизировался первый раз
                                            #     4 - каждый раз когда активизируется ссылающийся на нас калькулятор
           }
           ]
       }
       ],
    }
    ```

    **SpecialTaximeters**

    ```python
    [                               # список "особых таксометров" - когда поездка по зоне оплачивается иначе
      {
        'z': 'str',                 # название зоны (из geoareas)
        'p': {
          'tpi': TariffInterval,    # такое же значение, как у соответствующих полей
          'tmi': int,               #     в корне category, но только применимо лишь при
          'dpi': TariffInterval,    #     поездке по зоне 'z'
          'dmi': int,               #
        }
      }
    ]
    ```


    **TariffInterval**

    ```python
    [ # это список объектов, записывающих некоторую ступенчатую функцию
    {
        'b': float,           # начало интервала
        'e': optional float,  # конец интервала (может быть None, если этот интервал без конца)
        'p': float,           # цена
        's': optional float,  # шаг, step, с которым надо снимать деньги за поездку, в единицах тех же что и 'b', 'e', то есть например 2 (километра) или 5 (минут)
        'm': optional string, # метод начисления стоимости проеханного step, до начала очередного step-интервала пишем prepay, иначе postpay.
    }
    ]
    ```

    Чтобы подсчитать цену услуги, записанной через TariffInterval надо перебирать все интервалы, находить тот, у которого ##[b, e)## пересекается с ##[0, cur_val)##, и умножать ##p## на длину отрезка пересечения.
