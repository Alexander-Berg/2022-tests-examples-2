settings:
    collection: template
    connection: document_templator
    database: document_templator
indexes:
  - key: base_template_id
  - key: base_template_version
  - key: item_settings.persistent_id
  - key: name
    partialFilterExpression:
        removed: false
    unique: true
  - key: persistent_id
    partialFilterExpression:
        removed: false
    unique: true
  - key:
      - name: persistent_id
        type: ascending
      - name: version
        type: descending
    unique: true
  - key: removed
wiki_info: |
    #### document_templator.template
    *Назначение:* содержит шаблоны динамических документов.

    *Структура документа*:

    ```python
    template = {
        # uuid идентификатор шаблона (меняется от версии к версии) (обязательное
        # поле)
        '_id': ObjectId(),
        # неизменяемый uuid идентификатор шаблона (новые версии шаблона будут
        # иметь id старой версии) (обязательное поле)
        'persistent_id': ObjectId(),
        # uuid базового шаблона
        'base_template_id': ObjectId(),
        # версия шаблона (обязательное поле)
        'version': 0,
        # если, True шаблон считается удалённым (обязательное поле)
        'removed': False,
        # человекочитаемое название шаблона (обязательное поле)
        'name': 'шаблон1',
        # описание назначения шаблона (обязательное поле)
        'description': 'описание шаблона1',
        # обязательные параметры шаблона
        'params': [
            {
                # название параметрa (обязательное поле)
                'name': 'параметр1',
                # тип параметра (обязательное поле)
                'type': 'object', # array/object/string/number
                # описание параметра шаблона
                'description': 'описание параметра шаблона'
                # схема структуры данных параметра
                'schema': {},
                # включен ли параметр? (обязательное поле)
                'enabled': True,
                # унследован ли параметр? (обязательное поле)
                'inherited': False,
            },
            {
                # для унаследованных параметров в БД хранятся лишь 3 поля:
                # название унаследованного параметра (обязательное поле)
                'name': 'параметр2',
                # включен ли параметр? (обязательное поле)
                'enabled': True,
                # унследован ли параметр? (обязательное поле)
                'inherited': True,
            }
        ],
        # список элементов шаблона (см. ниже)
        'items': items,
        # список запросов
        'requests': [
            {
                # uuid записи в коллекции requests (обязательное поле)
                'id': ObjectId(),
                # имя запроса (обязательное поле)
                'name' 'запрос1',
                # включен ли запрс? (обязательное поле)
                'enabled': True,
                # унследован ли запрс? (обязательное поле)
                'inherited': False,
            },
            {
                # для унаследованных запросов в БД хранятся лишь 3 поля:
                # имя запроса (обязательное поле)
                'name' 'запрос2',
                # включен ли запрос? (обязательное поле)
                'enabled': True,
                # унследован ли запрос? (обязательное поле)
                'inherited': True,
            }
        ],
        # идентификатор создателя, yandex staff nickname (обязательное поле)
        'created_by': 'venimaster',
        # время создания документа (обязательное поле)
        'created_at': datetime.datetime,
        # идентификатор пользователя, внесшего изменения, yandex staff nickname
        # (обязательное поле)
        'modified_by': 'russhakirov',
        # время изменения шаблона (обязательное поле)
        'modified_at': datetime.datetime,
    }
    ```

    Где ```items``` — список документов ```item``` со следующей структурой:
    ##### item
    ```python
    # неунаследованный элемент шаблона
    item = {
        # uuid элемента (обязательное поле)
        'id': ObjectId(),
        # список параметров, установленных из родительского шаблона, строится на
        # базе обязательных параметров шаблона
        'params': [
            {
                # название обязательного параметра дочернего шаблона
                # (обязательное поле)
                'name': 'параметр1',
                # человекочитаемое название параметра
                'description': 'описание параметра1',
                # тип параметра (обязательное поле)
                'type': 'string', # array/object/string/number
                # обозначает источник данных
                'data_usage': 'OWN_DATA', # OWN_DATA/PARENT_TEMPLATE_DATA/SERVER_DATA
                # значение параметра или путь в схеме для SERVER_DATA или
                # PARENT_TEMPLATE_DATA
                'value': '',
            }
        ],
        # описание элемента шаблона
        'description': 'строка',
        # название дочернего шаблона - или uuid или некое строковое обозначение
        'template_id': 'строка',
        # список необходимых свойств дочернего шаблона
        'properties'[{},{}],
        # содержимое шаблона, используется если не указан template_id
        'content': '',
        # список дочерних шаблонов, используются для кастомных шаблонов
        'items' : items,
        # включен ли элемент? (обязательное поле)
        'enabled': True,
        # унследован ли элемент? (обязательное поле)
        'inherited': False,
    }
    ```

    Если же item унаследован, то он имеет следующую структуру:
    ```python
    # унаследованный элемент шаблона
    item = {
        # uuid элемента (обязательное поле)
        'id': ObjectId(),
        # включен ли элемент? (обязательное поле)
        'enabled': True,
        # унследован ли элемент? (обязательное поле)
        'inherited': True,
    }
    ```
