description: cities
settings:
    collection: cities
    connection: taxi
    database: dbtaxi
indexes:
  - key: country
  - key: updated
wiki_info: |
    ####dbtaxi.cities - Города
    ```python
    city = {
        '_id': 'Москва',                                               # название города на локальном языке
        'eng': 'moscow',                                               # название города на английском в нижнем регистре
        'country': 'rus',                                              # id страны
        'tl': [37.0001, 55.0001],                                      # верхний левый угол
        'br': [37.0002, 55.0002],                                      # правый нижний угол
        'disabled': boolean,                                           # город деактивирован
        'tz': 'Europe/Moscow',                                         # название таймзоны так, чтобы pytz понял
        'geo_id': integer,                                             # идентификатор города из геобазы
        'hotspots': hotspots,                                          # хотспоты - места, откуда часто заказывают такси
        'localized_hotspots': localized_hotspots                       # локализованные хотспоты
        'areas': areas,                                                # зоны для трансферов и т.п.
        'geocoder_objects': geocoder_objects,                          #  объекты для обратного геокодирования
        'requirements': {                                              # требования которые поддерживаются в данном городе(задается через админку)
            # опциональные атрибуты
            'nosmoking': boolean,                                      # True, если в городе есть машины с некурящим салоном
            'willsmoke': boolean,                                      # True, если в городе есть машины где можно курить; водитель может курить
            'conditioner': boolean,                                    # True, если в городе есть машины с кондиционером
            'universal': boolean,                                      # True, если в городе есть машина - универсал
            'animaltransport': boolean,                                # True, если в городе поддерживается возможность перевозить животных
            'childchair': boolean,                                     # True, если в городе может быть выполнено требование "детское кресло"
            'check': boolean,                                          # True, если в городе поддерживается возможность выписать документ строгой отчётности
            'coupon': boolean,                                         # True, если в городе поддерживается требование "оплата купоном"
            'creditcard': boolean,                                     # True, если в городе поддерживается оплата картой
            'corp': boolean,                                           # True, если в городе поддерживается поездка по корпоративному счёту
            'bicycle': boolean,                                        # True, если в городе есть машины поддерживающие перевозку велосипеда
            'yellowcarnumber': boolean,                                # True, если в городе можно вызвать машину с желтыми номерами
            'applepay': boolean,                                       # True, если в городе можно платить по Apple Pay
        },
        'updated': datetime,                                           # время последнего обновления документа
        'base_driver_score': 0.5773503,                                # рейтинг водителя по умолчанию (для новичков)
        'mrt_id': 'string',                                            # идентификатор тарифа действующего в данном городе
        'app_download_long_link': 'https://app.adjust.io/dq3bei_o6eovl?campaign=MSK&blah blah',    # оригинальная длинная ссылка для скачивания приложения в городе (не показывается нигде, хранится на случай вдруг сломается)
        'app_download_short_link': 'https://clck.ru/9THbf',            # короткая ссылка для скачивания приложения (длинная ссылка пропущенная через Кликер, показывается клиентам в смс)

        # опциональные атрибуты
        'donate_discounts_multiplier': '1.06',                          # множитель для автоматизированных выплат скидочных субсидий (т.е если скидочная субсидия 100 рублей, то выплачиваем decimal.Decimal(donate_discounts_multiplier) * 100)
        'donate_multiplier': '1.06',                                    # множитель для автоматизированных выплат субсидий и промокодов, кроме скидочных (т.е если субсидия 100 рублей, то выплачиваем decimal.Decimal(donate_multiplier) * 100)
        'permit_require': True,                                         # True, если в этом городе не допускаются к работе водители без лицензии
        'req_destination': True,                                        # True, если в этом городе обязательно указывать точку назначения
        'req_destination_rules': {                                      # Условия обязательности точки Б
            'min_timedelta': 1500
        },
        'precalc_cost': True,                                           # True, если в этом городе можно посчитать стоимость поездки заранее
        'calc_with_jams': True,                                         # True, если в этом городе калькулятор тарифов учитывает пробки при расчете стоимости
        'tariff_calc': True,                                            # True, если в этом городе действует калькулятор тарифов
        'aliases': ['Химки', ...],                                      # список алиасов города
        'taxicount_limit': 15,                                          # число машин, которое говорит о том, что заказ возьмут
        'taxicount_airport_limit': 5,                                   # TAXICOUNT для случаев, когда место подачи - аэропорт
        'currency': 'RUB',                                              # валюта для тарифов
        'max_card_payment': 3200,                                       # оплата заказов по карте с большей стоимостью в этом городе будет проводиться вручную
        'max_corp_payment': 20000,                                      #оплата корпоративных заказов с большей стоимостью в этом городу будет проводиться вручную
        'class': ['econom', 'business', 'vip'],                         # список допустимых классов в городе (deprecated!!!нигде не используется)
        'cars_by_classes': [                                            # (deprecated! нигде не используется. выпилить)наиболее популярные марки авто по классам
            {
                'class': 'econom',                                      # класс
                'cars': ['Nexia', 'Logan'],                             # список марок (по данному классу приедут машины не хуже)
            },
            ...
        ],
        'car_price_limit': {                                            # нижняя граница стоимости автомобиля по классам
            'econom': 150000,                                           # deprecated!!! надо выпилить отовсюду
            'business': 425000,                                         # вместо него используется поле classification_rules
            'vip': 800000
        },
        'service_level_params': service_level_param,                    # параметры service_levels
        'holidays': ['2014-05-01', ...],                                # список праздничных дней
        'workdays': ['2014-10-12', ...],                                # список рабочих дней
        'orderbysms_points': orderbysms_points,                         # список точек, определяемых по кодам заведений (см. ниже)
        'waves_distance': [                                             # ограничения радиуса поиска водителей в зависимости от длины волны:
            {'wave': 0, 'max_distance': 3000},                          # 3 км для первой волны
            {'wave': 1, 'max_distance': 5000},                          # 5 км для второй волный
            {'wave': 'default', 'max_distance': 10000},                 # 10 км для остальных волн
        ],

        'pessimization_urgent_30': 0.6,                                 # коэффицент пессимизации на 30% для срочных заказов
        'pessimization_exact_30': 0.6,                                  # коэффицент пессимизации на 30% для отложенных заказов
        'pessimization_urgent_60': 0.3,                                 # коэффицент пессимизации на 60% для срочных заказов
        'pessimization_exact_60': 0.3,                                  # коэффицент пессимизации на 60% для отложенных заказов
        'allowed_cars': allowed_cars,                                   # (deprecated!!! убрать отовсюду)допустимые классы авто для данного города
                                                                        # вместо данного поля используется classification_rules
        '_use_forwarding': boolean,                                     # True если в данном городе работает переадресация звонков через шлюзы
        'forwarding_types': [                                           # Типы переадресаций, включенные в городе.
            'onuser4driver',                                            # Если отсутствует, подразумевается onuser4driver, onuser4dispatch
            'onuser4dispatch',
            'onuser4qa',
            'ondriver4user',
            'ondispatch4user',
        ],
        'mqc_time': integer,                                            # время в секундах больше которого не вызываем водителя ехать к МКК
        'mqc_distance': integer,                                        # расстояние в метрах больше которого не вызываем водителя на проверку МКК
        'mqc_timeout': integer,                                         # таймаут в секундах в течение которого водителя гарантированно не призовут в МКК
        'burn_threshold': 0.9,                                          # соотношение по заказам found/total, ниже которого устанавливается флаг is_burning
        'is_burning': True,                                             # если флаг установлен, то город "горит"
        'tariff_interval_names': [                                      # название тарифа, по которому была рассчитана стоимость поездки
            {
                # обязательные поля
                'schedule': {...},                                      # расписание интервала, как в tariffs31.itervals.0.schedule
                'tanker_key': 'tariff_schedule_name.day',               # часть ключа в танкере, будет дополнена service_level-ом
            },
            ...
        ],

        'exam_score_add': {                                             # Бонусные баллы, начисляемые за экзамен в данном городе
            '5': 0.25,
            '4': 0.125,
            ...
        },

        'use_unified_profile',                                          # Использовать ли в этом городе алгоритмы склейки (требуется, чтобы автопарки отдавали номера прав)

        'card_payment_settings': {                                      # Настройки платежей для банковских карт
            'max_refund': 1500,                                         # максимальный рефанд пользователю в рублях
            'max_compensation': 3200,                                   # максимальная компенсация таксопарку в рублях
            'max_manual_charge': 5000,                                  # максимальная сумма списания
        },
        'classification_rules': [                                       # Список правил для классификации автомобилей, принятый в данном городе.
                                                                        # в случае отсутствия берется из dbtaxi.static.findOne({'_id': 'classification_rules_defaults'})
            ['econom',                                                  # к какому классу относится правило
             'delete',                                                  # add - разрешаюшее, delete - запрещающее
             '350000',                                                  # значение (всегда строка!)
             4],                                                        # ограничение на возраст авто
            ['vip',
             'add',
             'Nissan Teana*',
             2],
        ],
        'antifraud_config': antifraud_config,                           # настройки антифрода
        'exact_orders': True,                                           # Разрешены ли в городе заказы на точное время; отсутствие равносильно False
        'persistent_reqs': [                                            # Требования, значения которых должны сохраняться на стороне клиента между заказами
            'nosmoking', 'childchair/booster'
        ],
        'reorder_suggestion_interval': integer,                         # Время, через которое в этом городе предлагается reorder. Если не выставлено, то 120 секунд
        'weight_multiplication_rules': [
            [1, 'Toyota Camry', 'business', 3.0],                       # Правила для увеличения веса машин в розыгрыше: возраст (меньше либо равен), марка, класс, усиление
        ],
        'subventions': [                                                # история изменения компенсаций в городе
            (datetime.datetime(2015, 9, 7, 19, 10), ('base', 165)),     # гарантированная доплата до 165 рублей
            (datetime.datetime(2015, 8, 24, 18, 55), ('base', 150)),
            (datetime.datetime(2015, 7, 31, 21), ('fixed', 60)),        # фиксированная доплата 60 рублей
            (datetime.datetime(2015, 6, 30, 21), ('fixed', 70)),
        ],
        'feedback_choices': {                                           # варианты фидбэка, которые поддерживаются в данном городе
            'cancelled_reason': {                                       # варианты причины отмены
                'usererror': true,                                      # "заказал по ошибке"
                'longwait': true,                                       # "слишком долго ждать"
            'othertaxi': true,                                      # "уехал на другом такси"
            'driverrequest': true,                                  # "водитель попросил отменить"
            'droveaway' : true                                      # "водитель ехал в другую сторону"
            },
            'low_rating_reason': {                                      # варианты причины низкого рейтинга
                'smellycar': true,                                      # "запах в машине"
                'rudedriver': true,                                     # "грубый водитель"
                'carcondition': true,                                   # "состояние автомобиля"
                'nochange': true,                                       # "не было сдачи"
                'badroute': true,                                       # "ездил кругами"
                'driverlate': true                                      # "водитель опоздал"
            }
        },
        'give_promocodes_to_billing': true,                             # отдавать ли сумму промокодов в открутках биллингу
        'estimated_waiting_power_coeff': 0.8                            # показатель степени для функции, сглаживающей ожидаемо время подачи
        'accepted_permit_issuers': ['moscow', 'mosobl'],                # список модулей, данные из которых надо использовать для проверки лицензий
        'check_contracts': true,                                        # Если true, то обновлять договоры и балансы у парков из этого города. Необязательное поле, значение по умолчанию false
        'cladr_code': '770000000'                                       # Код для создания договоров в биллинге
        'promocode_subvention_periods':                                 # Список периодов, в которые в городе не действовал взаимозачет комиссий и промокодов
           [[datetime_begin_1, datetime_end_1], [datetime_begin_2, datetime_end_2]]
    }
    ```

    #####+hotspots
    ```python
    # хотспоты - места, откуда часто заказывают такси
    'hotspots': {
        '(uuid хотспота)': {
             # обязательные параметры
             'id': '(uuid хотспота)',
             'full_text': 'полная информация об объекте',
             'short_text': 'краткая информация об объекте',
             'country': 'Россия',
             'city': 'Санкт-Петербург',
             'type': <'organization'|'address'>,
             'object_type': <'аэропорт'|'улица'|'организация'|...|'другое'>,
             'point': [(долгота, широта)],
             'priority': 1,                                         # порядок расположения хотспотов в списке - чем меньше число, тем выше
             'radius': 300,                                         # радиус притяжения хотспота в метрах
             # опциональные параметры
             'street': 'Свердловская набережная',
             'house': '44',
             'description': 'Россия, Санкт-Петербург',              # мелко-подробности
         },
         ...
    }
    ```

    #####+localized_hotspots
    ```python
    # локализованные хотспоты
    localized_hotspots = [
        {
            'id': '(uuid хотспота)',
            'priority': 1,                        # порядок расположения хотспотов в списке; чем меньше число, тем выше хотспот
            'object': {                           # общая для всех локалей информация по объекту
                'point': [37.412352, 55.973637],
                'object_type': 'аэропорт',
                'type': 'address',
                'radius': 500
            },
            'object_locale': {                    # информация, специфичная для локали (должны быть представлены ВСЕ поддерживаемые бакэндом локали)
                'ru': {
                    'full_text': 'Россия, Московская область, Химки, аэропорт Шереметьево',
                    'short_text': 'аэропорт Шереметьево',
                    'country': 'Россия',
                    'city': 'Москва',
                    'street': 'аэропорт Шереметьево',
                    'house': '',
                    'description': 'Москва, Россия'
                },
                'en': {
                    'full_text': 'Rossiya, Moscow Oblast, Khimki, aeroport Sheremetevo',
                    'short_text': 'aeroport Sheremetevo',
                    'country': 'Rossiya',
                    'city': 'Moscow',
                    'street': 'aeroport Sheremetevo',
                    'house': '',
                    'description': 'Moscow, Rossiya'
                },
                ...
            }
        },
        ...
    ]
    ```

    #####+areas
    ```python
    areas = {
        '(id зоны)': {
            'id': '(id зоны)',
            'name': {
                'ru': 'Домодедово',
                'en': 'Domodedovo',
            },
            'geometry': [
                [
                    [долгота1, широта1], [долгота2, широта2], ...
                ], ...
            ],
            'scope': {
                'transfer': True,                              # используется для трансферов
                'taximeter': True                              # используется для счётчика
            },
            'type': 'airport',                                 # тип - airport|other
            'priority': 5,                                     # от 1 до 9, используется для сортировки
        }, ...
    }
    ```

    #####+geocoder_objects
    ```python
    # объекты для обратного геокодирования
    geocoder_objects = [
        {
            'id': string,                                          # идентификатор объекта, uuid4().hex
            'object': {                                            # непосредственно объект, который вернётся в ответе ручки geosearch
                'full_text': u'Россия, Московская область, Химки, аэропорт Шереметьево, терминал A',
                'short_text': u'аэропорт Шереметьево терминал A',
                'country': u'Россия',
                'city': u'Москва',
                'street': u'аэропорт Шереметьево',
                'house': u'',
                'point': [37.441044, 55.982544],
                'object_type': u'аэропорт',
                'type': u'organization',
                'exact': True,
                'description': 'Россия, Москва',
                'accepts_exact5': True,  # Если присутствует и равен True, отложенный заказ с назначением в данный объект может быть exact5
            },
            'object_locale': {
                'ru': {
                    'full_text': u'Россия, Московская область, Химки, аэропорт Шереметьево, терминал A',
                    'short_text': u'аэропорт Шереметьево терминал A',
                    'country': u'Россия',
                    'city': u'Москва',
                    'street': u'аэропорт Шереметьево',
                    'house': u'',
                    'description': 'Россия, Москва',
                },
                ...
            },
            'geometry': [                                          # геометрия объекта
                [
                    [долгота1, широта1], [долгота2, широта2], ...
                ],
                ...
            ]
        },
        ...
    ]
    ```


    #####+allowed_cars
    ```python
    # допустимые классы авто для данного города (будет проверяться до автоклассификатора)
    allowed_cars = [
        {
         'id': (uuid),                           # id модели; uuid4().hex
         'model': 'Ford Focus',                  # модель
         'age': 2013,                            # год выпуска
         'category': 'business',                 # наивысший допустимый класс для данной модели
        },
        ...
    ]
    ```

    #####+orderbysms_points
    ```python
    # список точек, определяемых по кодам заведений
    orderbysms_points = [
        {
         'id': 'whiskey_bar',                    # id точки (для ссылок); берется первый элемент из codes; может меняться при изменении codes
         'codes': ['whiskey_bar', 'виски бар']   # коды для данного заведения (автоматически упорядочиваются по алфавиту при изменении через админку)
         'address': 'ул. Толстого, 6'            # адрес заведения
         'comment': 'Бар «Виски»',               # название заведения
         'created': utcnow()                     # дата создания точки
        },
        ...
    ]
    ```

    #####+service_level_params
    ```python
    service_level_params = {                  # параметры service_levels
        '0': {
            'lname': {                        # локализованное название service_level
                'en': u'cheaper',
                'ru': u'дешевле'
            },
            'allowed_classes': [              # допустимые классы авто на заказ
                'econom'
            ],
            'max_price_factor': 1.1,          # медианный множитель
            'cars': [                         # список типовых авто, выполняющих заказы
                u'Renault Logan',
                'Nissan Almera'
            ],
        },
        ...
    }
    ```


    #####antifraud_config
    ```python
    antifraud_config = {                      # Конфиг для антифрода, специфичный для города:
        'enabled': True,                      #   - антифрод включен/выключен
        'hold_full_sum_one_time': False,      #   - брать всю сумму за раз
        'pause_before_hold_full_sum': 900,    #   - пауза перед началом действия процедуры при заказах с фиксированной стоимостью
        'personal': [{                        #   - антифрод, зависящий от групп/тарифов:
            'group_id': 1,                    #     - идентификатор группы
            'tariff_class': 'econom',         #     - категория тарифа
            'config': {                       #     - конфиг для указанных группы/тарифа:
                'payment_thresholds': [500],  #       - пороги для списания, напр. ['min', 500, 1000, 1500]
                'last_payment_delta': 500,    #       - дельта после превышения последнего порога
                'pause_before_hold': 300,     #       - пауза перед началом действия процедуры
            },
        }, ...],
    }
    ```
