description: orders
settings:
    collection: orders
    connection: taxi
    database: dbtaxi
sharding:
    key: _shard_id
# WARNING! If you want to add new index please contact @vitja or @lol4t0 first.
indexes:
  - key: _shard_id
  - key: _type
  - key: billed
  - key:
      - name: city
        type: ascending
      - name: created
        type: descending
  - key: created
  - key: payment_tech.need_accept
    sparse: true
  - key: payment_tech.need_disp_accept
    sparse: true
  - key:
      - name: performer.clid
        type: ascending
      - name: request.due
        type: descending
  - key:
      - name: performer.clid
        type: ascending
      - name: taxi_status
        type: ascending
      - name: request.due
        type: descending
  - key: performer.taxi_alias.id
  - key: reorder.id
    sparse: true
  - key: request.due
  - key: status
  - key:
      - name: taxi_status
        type: ascending
      - name: request.due
        type: descending
  - key: updated
  - key:
      - name: updated
        type: ascending
      - name: payment_tech.finish_handled
        type: ascending
    partialFilterExpression:
        payment_tech.finish_handled:
            $eq: true
  - key: user_id
  - key: user_phone_id
wiki_info: |
    ####(orders)dbtaxi.orders - Заказы

    Обратите внимание, что требования к курящему и некурящему салон не могут быть установлены одновременно. Забота об этом лежит целиком на клиенте БД.

    Цепочка переназначений при reorder-е:

    ```
    order1
      child_id = order2
    order2
      parent_id = order1
      child_id = order3
    order3
      parent_id = order2
    ```

    ```python
    order = {
        # обязательные атрибуты
        '_type': 'тип_заказа',
        # exact - это заказ на время, которое наступит позже, чем через 20-30 минут (есть не во всех регионах), отдается паркам сразу, чтобы они заранее назначили машину
        # exacturgent - это заказ, который по факту хранится на сервере и отдаётся паркам перед временем подачи как urgent,
        # urgent - это заказ на точное время в пределах 20 минут (раньше было до +35 минут от момента создания заказа),
        # delayed - это очень старый тип заказов, с приложений раннего 2014 года и раньше, аналог exact
        # soon - заказ на ближайшее время. Наиболее распространенный тип заказа
        'city': 'Москва|Санкт-Петербург',  # город, в котором заказывают машину
        'created': utcnow(),               # время создания заказа
        'updated': utcnow(),               # время обновления документа
        'user_id': '(строка)',             # идентификатор пользователя, отправившего заказ
        'uber_id': '(строка)',             # uber-идентификатор пользователя, отправившего заказ. Отсутствует, если заказ не из Uber
        'source': '...'                    # "uber", или отутствует
        'user_phone_id': ObjectId(),       # ссылка на документ с номером телефона пользователя
        'user_uid': 'string',              # uid, выдаваемый паспортом
        'nz': 'mytishchi',                 # название ближайшей тарифной зоны
        'request': {                                     # параметры заказа:
            'due': utcnow(),                             #   * время подачи
            'source': source,                            #   * место подачи (см. ниже)
            'destinations': destinations,                #   * точки маршрута (см. ниже)
            'payment': {                                 #   * способ оплаты, выбранный при создании заказа:
                'type': 'card|cash|corp|applepay',                #      * способ оплаты
                # опциональные атрибуты
                'payment_method_id': 'card-1234',        #      * payment_id способа оплаты
            },
            # Требования creditcard и corp считаются устаревшими и более не используются.
            # Изначальные платежные требования к заказу можно получить в поле request.payment.type
            # Текущий (актуальный) способ оплаты можно получить в поле payment_tech.type
            'requirements': {                            #   * опциональные требования к заказу:
                # опциональные атрибуты
                'yamoney': True,                         #      * можно расплачиваться Я.Деньгами (deprecated)
                'nosmoking': True,                       #      * некурящий салон
                'willsmoke': True,                       #      * можно курить
                'conditioner': True,                     #      * кондиционер
                'animaltransport': True,                 #      * перевозка животных
                'universal': True,                       #      * универсал
                'childchair': 0.5,                       #      * детское кресло для определённого возраста, или список кресел, например [1, 3, 7], или [1], если нужно несколько кресел
                'check': True,                           #      * бланки строгой отчётности (чеки)
                'bicycle': True,                         #      * перевозка велосипеда
                'coupon': True,                          #      * оплата купоном
                'creditcard': True,                      #      * оплата картой или производным от карты, например Apple Pay (OBSOLETE)
                'corp': True,                            #      * оплата по корпоративному счёту (OBSOLETE)
            },
            'commit_state': 'done',                      # состояние коммита заказа; нужно смотреть только на заказы в статусе done

            # только для срочных заказов:
            'class': ['econom', 'business', 'vip', 'minivan'],      #   * категории тарифов
            'excluded_parks': ['clid'],                             #   * список исключённых таксопарков

            # опциональные атрибуты
            'service_level': integer,                    #   * положение селектора "дешевле-комфортнее", от 0 до 100
            'comment': 'Комментарий к заказу',
            'corp_comment': 'Комментарий от КК',         # устарел, смотри order.request.corp.client_comment
            'corp': {
                'cost_center': '1',
                'user_id': '1ca8f1f4285d4aad9b896b76667952c4',
                'client_comment': 'comment from corp client',
                'client_id': 'corp client id'
            },
            'updated_requirements': [{
                'requirement': 'creditcard',  # требование
                'value': False,  # новое значение
                'reason': {                              # причина изменения требования
                    'code': 'UNUSABLE_CARD'              # код причины изменения (UNUSABLE_CARD|CANCEL_IN_TRANSPORTING)
                },
            },
            'selected_promotions': ['tesla'],             # список промо-акций, в которых пользователь захотел участвовать
            'sp': 1.03,                                   # коэффициент сурж-прайсинга, по которому пользователь захотел ехать
            'sp_alpha': 0.7,                              # коэффициент alpha сурж-прайсинга, по которому пользователь захотел ехать
            'sp_beta': 0.3,                               # коэффициент beta сурж-прайсинга, по которому пользователь захотел ехать
            'sp_surcharge': 100,                          # коэффициент surcharge сурж-прайсинга, по которому пользователь захотел ехать
            'spr': 1.03,                                  # коэффициент суржа, который пользователь должен подтвердить реордером
            'spr_alpha': 0.8,                             # коэффициент alpha суржа, который пользователь должен подтвердить реордером
            'spr_beta': 0.2,                              # коэффициент beta суржа, который пользователь должен подтвердить реордером
            'spr_surcharge': 120,                         # коэффициент surcharge суржа, который пользователь должен подтвердить реордером
            'offer': '889f3cfcd4da4d9caba8e6298fe76770',  # id пердложения из dbtaxi.order_offers
            ...],
            'is_roaming_user': True,                     # см. в dbusers.users
        },
        'status': 'состояние_заказа',        # draft|pending|assigned|timeout|cancelled|finished|reordered
        'status_updated': utcnow(),          # время, когда последний раз обновлялся status или taxi_status
        'statistics': statistics,            # вспомогательные параметры для подсчета статистики

        'payment_tech': payment_tech,        # см. ниже
        'billing_tech': billing_tech,        # см. ниже
        'voucher_tech': voucher_tech,        # см. ниже
        'driverchange_tech': driverchange_tech,  # см. ниже

        # опциональные атрибуты
        'demo': True,                        # демонстрационный заказ
        'hidden': True,                      # не показывать заказ в истории поездок
        'experiments': ['string'],           # список экспериментов, которые были активированы в заказе
        'device_id': '(строка)',             # Идентификатор устройства (device_id в ручке launch).
                                             # Может быть None, если клиент не предоставил эту информацию.
                                             # Может отсутствовать у достаточно старых заказов.
        'parent_id': 'id заказа',            # идентификатор оригинального заказа (до реордера)
        'child_id': 'id заказа',             # идентификатор созданного во время реордера заказа
        'exact_id': 'id заказа',             # идентификатор оригинального заказа (до подстраховки)
        'sure_id': 'id заказа',              # идентификатор заказа, созданного для подстраховки
        'start_search': utcnow()             # для exacturgent заказов время начала поиска водителя на заказ
        'start_driving_time': utcnow(),      # время начала движения водителя к месту подачи
        'driver_way_time': integer,          # время от установки статуса driving до установки статуса waiting в секундах
        'taxi_status': 'процесс_выполнения', # None|assigned|accept|driving|waiting|transporting|preexpired|complete|cancelled|failed|expired
        'fail_reason': 'причина фейла',      # например, "ошибка при передаче заказа таксопарку"
        'taxi_aliases': taxi_aliases,        # алиасы срочного заказа такси
        'queue': {
            'uid': 'уникальный id',          # id обработчика очереди кандидатов
            'last_updated': utcnow(),        # время последнего обновления очереди обработчиком
            'candidates': [                  # список водителей, желающих выполнить заказ
                {
                    'id': 'id водителя',     # id водителя
                    'plate': 'A000AA96',     # госномер автомобиля
                    'clid_type': 'taxipark', # таксопарк/диспетчерская
                    'score': float,          # рейтинг водителя
                }, ...
            ],
        },
        'caracks_received': [],              # таксопарки, приславшие carack и участвующие в розыгрыше заказа
        'failed_parks': [],                  # таксопарки, которые были забанены за плохую реакцию на setcar
        'performer': performer,              # информация об исполнителе
        'chosen_drivers': [[{                # список информации о запрошенных для срочного заказа водителях:
            'driver': driver,                #  * документ из коллекции dbtaxi.drivers, обогащённый треком
            'distance2point': 5000.,         #  * расстояние от водителя до места подачи по прямой, в м
            'distance': 5500.,               #  * расстояние от водителя до места подачи по данным маршрутизатора, в м
            'time': 600,                     #  * время водителя в пути до места подачи, по данным маршрутизатора, в сек
            'max_class': 'business',         #  * максимальная категория тарифа, по которой водитель может взять заказ
            'tariff_id': 'id тарифа',        #  * идентификатор тарифа, по которому водителю предложено взять заказ
            'stage': integer,                #  * номер волны
        }]],
        'chosen_parks': ['clid', ...],       # список парков, которым было отправлен exact-заказ
        'feedback': {                        # отзыв пользователя
            'rating': integer(1,5),
            'msg': 'комментарий',
            'answer': 'ответ таксопарка',
            'spam': True,                    # пользователь был забанен за спам
            'mqc': True,                     # оценка поставлена в ходе проверки МКК
            'choices': {
                'cancelled_reason':          # причина отмены
                     ['driverrequest'],
                'low_rating_reason':         # причина низкой оценки
                     ['rudedriver'],
            },
            'ct': datetime.datetime(),       # время, когда пользователь поставил оценку.
            'iac': True,                     # если True, то пользователь поставил оценку после завершения заказа.
            'c': True,                       # пользователь попросил связаться с ним
        },
        'calibrate': '5',                    # число минут, на которое нужно сдвинуть заказ
                                             # для повышения вероятности нахождения исполнителя
        'pre_cost': integer(random()),       # предварительная стоимость поездки (если была прислана в carack для выбранного водителя)
        'cost': integer(random()),           # стоимость поездки (появляется после завершения заказа)
        'disp_cost': {
            'disp_cost': 500,                # Цена диспетчерской
            'taximeter_cost': 99,            # Цена таксометра (или фикспрайс или минималка)
            'operator_login': 'loginX',      # Пользователь диспетчерской
        },
        'user_ready': true,                  # пользователь нажал на кнопку "Уже выхожу"
        'dont_call': true,                   # пользователь включил опцию "Не звонить" в приложении
        # информация о контракте парка исполнителя
        'billing_contract': {
            'is_set': False,             # Если True, значит информация о контракте сохранена
            'currency': 'USD',           # Валюта, в которой происходит расчет с парком
            'currency_rate': '63.8569',  # Курс на момент начала поездки, из валюты заказа в валюту контракта
            'acquiring_percent': '0.035' # процент с парка за операции с картами
            'offer_currency': 'EUR',     # Валюта, в которой происходят автоматические выплаты субсидий
            'offer_currency_rate': '72.234', # Курс из валюты заказа в offer_currency
            'donate_multiplier': '1.06'  # множитель для выплат субсидий и промокодов (зависит от системы налогообложения парка)
        },
        'twc': true,                     # если true, то посчитались первые версии транзакционных логов для комиссий, субсидий и промокодов.
        'billing': {
            'commit': utcnow(),              # время снятия денег с таксопарка за этот заказ
            'rollback': utcnow(),            # время возврата денег таксопарку за этот заказ (не используется)
            'cost': integer,                 # комиссия по заказу в целых фишкоцентах
            'real_cost': integer,            # стоимость заказа в целых рублях
            'promocode': integer,            # сумма промокода, примененного в заказе, для отдачи в биллинг
                                             # (будет 0 для городов с give_promocodes_to_billing = false)
            # необязательные поля
            'commission': '21.89',           # строка (чтобы избежать ошибок округлений с double) со значением комиссии (без НДС)
            'precise_real_cost': '199'       # строка (чтобы избежать ошибок округлений с double) со стоимостью заказа
            'cwd': '21.89',                  # строка (чтобы избежать ошибок округлений с double) со значением комиссии (без НДС и без скидки 3% за короба)
            'cpm': 'cash',                   # метод оплаты заказа, по которому считали комиссию (cash|corp|card)
            'cfc': '199',                    # стоимость заказа, от которой мы считали комиссию, строка (чтобы избежать ошибок округлений с double)
            'cfs': 203.43,                   # полная стоимость заказа (без учета скидки), от которой мы считали субсидии
            'no_cost': true,                 # если true, то не удалось определить сумму заказа для расчета комиссии
            'no_contract': true,             # если true, то не удалось найти контракт из commission_contracts
            'commission_info': {
                'contract_description': 'x',  # строка с описанием контракта комисси
                'contract_id': 'abcdef',      # ссылка на dbtaxi.commission_contracts
            },
            'contract_currency': {
                'commission': '3.23',         # комиссия в валюте договора
                'promocode': '1.02',          # промокод в валюте договора
                'cost': '9.23',               # цена в валюте договора
            }
        },
        'yamoney_paid': integer,             # DEPRECATED: оплаченная Яндекс.Деньгами сумма
        'yamoney_card': True,                # DEPRECATED: заказ оплачен банковской картой
        'quota_cost': integer,               # количество квоты, снятое за этот заказ
        'loyalty_processed': utcnow(),       # дата обработки лояльности
        'experiment': 'метка',               # метка эксперимента, к которому относится этот заказ
        'vendor_id': 'clid поставщика',      # идентификатор производителя телефона для предустановленных приложений
        'coupon': {
            'id': 'код купона',              # секретный идентификатор использованного купона (незашифрованный)
            'valid': boolean,                # валидность купона
            'valid_any': boolean,            # если купон не валидный, есть ли у него шанс стать валидным
            'value': integer,                # номинал купона
            'was_used': True,                # выставляется у preexpired заказов с transporting, чтобы не освобождать купон в случае статуса expired

            # опциональные атрибуты для процентных промокодов
            'percent': 50,                   # процент скидки по процентному промокоду
            'limit': 500,                    # максимальное значение лимита по процентному промокоду (при отсутствии процентный промокод безлимитный)
            'series': string,                # имя серии (полезно для аналитики бессерийных купонов)
        },
        'calc': {
            'allowed_tariffs': {             # допустимые тарифы и стоимость поездки по данным тарифам
                'park_id': {                 # идентификатор таксопарка
                    'tariff_id': 234.0,      # ориентировочная стоимость поездки по тарифу tariff_id
                    ...
                },
                ...
            },
            'time': 250.0,                   # ориентировочная продолжительность поездки (агрегированный показатель)
            'distance': 5000.0,              # ориентировочная протяжённость поездки (агрегированный показатель)
        },
        'user_locale': 'ru',                 # локаль пользователя
        'user_agent': 'yandex-taxi/...',     # заголовок User-Agent из запроса order
        'referral_id': '12345',              # id источника данных рефералки Агафонова
        'carack_cost': {                     # стоимость поездки из запроса carack (по всем присланным carack'ам)
            'clid_uuid': 350,                # ключами являются driver['_id'] выбранных водителей
            ...
        },
        'driver_weight':  {                  # вес водителей в розыгрыше заказа (всех, кто прислал carack)
            'driver_id': 3.14,
        },
        'candidates': [                      # id водителей, участвующих в розыгрыше заказа (в weighted_choice)
            'clid1_uuid1',                   # отличаются от id в 'driver_weight' тем, что уникальны по госномерам
            'clid2_uuid2',                   # т.е. из нескольких профилей с одинаковым госномером будет выбран только один
        ],
        'driver_trace': driver_trace         # трек водителя в период между 20-й и 5-й минутами до времени подачи (см. ниже)
        # DEPRECATED: forwardings и talks для новых заказов хранится в dbtaxi.order_talks
        'forwardings': {                     # инфо о использовании переадресации в заказе, наличие данного поля говорит о том что переадресация была
            'onuser4driver': forwarding,     # переадресация номера пользователя, которую использует водитель
            'onuser4dispatch': forwarding,   # ..., которую использует таксопарк/диспетчерская
            'onuser4qa': forwarding,         # ..., которую использует контроль качества таксопарка
            'ondriver4user': forwarding,     # переадресация номера водителя, которую использует пользователь
            'ondispatch4user': forwarding,   # переадресация номера таксопарка/диспетчерской, которую использует пользователь
        },
        'talks': [{                          # список разговоров по данному заказу
             'forwarding_id': '123456789',   # идентификатор переадресации
             'talk_id': '123456',            # идентификатор разговора, создаётся сервером
             'start':  datetime,             # время начала разговора в формате ISO 8601
             'length': 1400,                 # продолжительность разговора в секундах
             'caller': '+79009009090',       # вызывающий номер
             'callee': '+79009009090',       # вызываемый номер
        }, {...}],
        'creditcard': {                      # информация по оплате кредитной картой:
            'credentials': {                 #   - актуальные данные, которые можно использовать для оплаты:
                'user_ip': '1.2.3.4',        #     - IP, с которого клиент отправил заказ (или повторную попытку оплаты)
                'card_id': 'card-...',       #     - идентификатор карты в системе биллинга
                'card_number': '555***444',  #     - последние цифры из номера карты
                'card_system': 'Visa',       #     - платёжная система
                'card_alive': False,         #     - True, если карта проверена (списан и возвращён 1 рубль)
            },                               #
            # опциональные поля              #
            'tips_perc_default': 5,          #   - дефолтные чаевые, с которыми пользователь пришёл в заказ
        },
        'client_notifications': {            # нотификации, отправленные клиенту в процессе выполнения заказа (только те, про которые важно знать)
            'moved_to_cash': {               # пуш, отправленный при переходе на наличку
                'sent': utcnow(),            # время отправки пуша (другие параметры не важны пока)
            },
            ...
            # другие типы нотификаций, которые появятся в будущем
            # у каждого типа нотификаций могут быть свои параметры, условия, счетчики и т.п.
        },
        'status_change_positions': [{           # положения водителя в момент смены статуса, согласно Этапу 3 партнерского протокола
            'taxi_status': 'driving',           # статус, присланный партнером (см. выше)
            'updated': utcnow(),                # моменты смены статуса
            'geopoint': (37.617458,55.752633),  # (долгота, широта) автомобиля в момент смены статуса
            'avg_speed': 21.0,                  # скорость автомобиля в момент смены статуса (км/ч)
            'direction': 45.0,                  # направление - угол в градусах (0 - 360)
            'accuracy': 22.0,                   # точность позиционирования (м)
            'time': utcnow()                    # время (назначение параметра не вполне ясно)
        }],
        'granted_promotions': ['string']        # список промоакций, которые были активировны в заказе. Появляется в документе при получении им статуса assigned.
        'terminal_id': 'string',                # идентификатор терминала, с которого делали заказ
        'scr': [{                               # правила расчета субсидий, которые подходят к заказу
            'id': ObjectId(),                  # ссылка на документ из dbtaxi.subvention_rules
            'type': 'add|guarantee|discount_payback',  # тип субсидии (подробнее в описании dbtaxi.subvention_rules)
            'sum': 40                           # сумма субсидии (для типа add) или гарантированная стоимость заказа (для типа guarantee), 0 для discount_payback (подробнее в описании dbtaxi.subvention_rules)
        }],
        'fraud_filter': 100001,                 # правило, по которому заказ считается фродерским (deprecated, по состоянию на 2017-07-19 больше не ставим!)

        # фиксированная стоимость заказа
        'fixed_price': {
            'price': 250,  # стоимость заказа, которую мы передали на таксометр, если поле присутствует
                           # заказ выполняется по фиксированной стоимости, fixed_price.price + waiting_cost
            'destination': [37.5878411037443, 55.78234577333468],  # точка Б
            'max_distance_from_b': 500,  # максимальное расстояние до точки Б, при котором цена остаётся фиксированной
            'paid_supply_price': 73  # цена платной подачи (необязательное поле, приходит из order_offers)
        },

        # сделан ли этот заказ при "Нет машин"
        'no_cars_order': false,

        # гос. номер машины, участвующей в проекте "Шереметьево"
        'svo_car_number': 'A777AA',

        # скидка пользователю (аналогично order_proc.order.discount)
        'discount': {
            'value': 0.12,          # 12%
            'original_value': 0.10  # 10% значение скидки до модификации из-за поля discard_surge
            'price': 200,           # цена, по которой считалась скидка
            'method': 'full',  # (опционально) метод применения скидки (full или time-dist)
            'reason': 'newbie',  # (опционально) причина скидки (for_all, newbie, analytics, big_first)
            'id': '79f170bd-3851-426f-ba76-eb97e2e215a1',  # (опционально) уникальный id скидки
            'discard_surge': false,  # (опционально) флаг, что скидка не учитывает сурдж при расчете
            'by_classes': [  #  (опционально) скидка по классам
                {
                    'class': 'econom',
                    'value': 0.32,
                    'price': 200,
                }
            ],
        },

       # ручные выплаты субсидий
       'sb': [
          {
            'c': utcnow(),
            'v': '30.0',  # ручная выплата 30
          },
          {
            'c': utcnow(),
            'v': '40.0',  # ручная выплата 40. Внимание: в этом примере мы выплатили всего 40р. В первый раз 30р. Во второй раз 10р (40 - 30).
          }
       ],

       'check_offer': True  # True, или отутствует. Если отсутствует, тогда считается что False. Если True - тогда оффер проверяется при создании заказа и если оффера нет, тогда заказ не создаётся(даже для одной точки).
       'is_coupon_driver_fraud': True,  # True или отсутствует. Если True, то по заказу не надо компенсировать купон водителю.
    }
    ```

    Где ```source```, ```destinations```, ```performer```, ```statistics```, ```driver_trace```, ```forwardings```, ..., — документы со следующей структурой:

    ##### source
    ```python
    # место подачи автомобиля
    source = {
        # обязательные атрибуты
        'fullname': 'полный адрес',
        'country': 'страна',
        'geopoint': (37.617458,55.752633), # долгота, широта

        # опциональные атрибуты
        'locality': 'населёный пункт',
        'thoroughfare': 'улица',
        'porchnumber': 'номер подъезда',
        'premisenumber': 'номер дома',
        'flight': 'номер рейса',
        'terminal': 'терминал аэропорта',
        'closest_station': 'ближайшая к месту подачи станция метро',
        'use_geopoint': True,  # Координата имеет приоритет, адрес - просто справочная информация
        'type': 'address',  # Адрерс или организация: address|orgranization
        'object_type': 'аэропорт',  # Описание объекта
        'exact': True,  # Смогли ли карты точно определить адрес
        'description': 'Россия, Москва',  # Доп. сведения об объектек
        'oid': '12345',  # Идентификатор организации (для type=organization),
        'accepts_exact5': True,  # Только для отложенных заказов и request.destination. True, если данное назначение принимает Отложенные 5.0
    }
    ```
    ##### destinations
    ```python
    # точки маршрута `destinations` представляют собой список объектов, структура
    # которых аналогична структуре `source`, за исклюением атрибутов `geopoint`,
    # ставшего опциональным, и `closest_station`
    destinations = [source]
    ```
    ##### taxi_aliases
    ```python
    taxi_aliases = [{
             'id': 'id1',                       # идентификатор псевдо заказа
             'due': datetime,                   # время псевдозаказа
             'chosen_drivers': [[...], [...]]   # исполнители на псевдозаказ (аналогично структуре данных order.chosen_drivers)
        },
    ]
    ```
    ##### performer
    ```python
    # информация об исполнителе и условиях, на которых он согласился выполнять заказ
    performer = {
        # обязательные атрибуты
        'clid': 'id таксопарка',
        'taxi_alias': {
            'id': 'id алиаса', # идентификатор заказа партнера
        },

        # опциональные атрибуты
        'uuid': 'id водителя',
        'real_clid': 'id таксопарка второго уровня',
        'car': 'марка и модель автомобиля',
        'car_number': 'госномер автомобиля',
        'driver_license': 'номер водительского удостоверения',
        'tariff': {
            # обязательные поля
            'id': 'id тарифа',
            'currency': 'руб',

            # опциональные поля
            'class': 'econom|business|vip|minivan', # категория тарифа по которой выполнялся заказ
            'ci': '0123456789abcdef',  # ссылка на tariffs.categories.id (None для заказов по старым тарифом, отсутствует для старых заказов)
        },
       'is_supercar': True,  # True, если это суперкар
        'old_performers': [
                {'uuid': '123', 'car_number': 'A127AA177', 'driver_license': '1111111'},
        ],                    # сюда сохраняются данные о водителях которые были переназначены
        'sr'                  # список soft-requirements, поддержанных водителем
        'db_id': '012345678',  # внутренний (РИТ) id парка у водителя
        'has_sticker': true,    # У исполнителя есть оклейка
        'has_branding': true,   # У исполнителя есть лайтбокс
        'has_co_branding': true, # У исполнителя есть скидка за собрендирование.
        'hiring_date': datetime,  # время найма водителя
        'hiring_type': 'commercial',  # тип найма водителя
        'paid_supply': false  # едет ли исполнитель на условиях платной подачи
    }
    ```
    ##### statistics
    ```python
    # статистика
    statistics = {
        # опциональные атрибуты
        'application': 'iphone/android/web/win/mobileweb/sms',
        'urgency': integer,                  # разность между временем подачи и временем создания заказа (срочность) в секундах
        'cancel_time': integer,              # разность между временем отмены и временем создания заказа в секундах
        'cancel_distance': integer,          # расстояние по прямой между клиентом и водителем в момент отмены (в метрах, поле отсутствует, если заказ отменен до того, как на него найден водитель)
        'driver_delay': integer,             # разность между временем подачи и временем прибытия водителя в секундах (если водитель приехал раньше времени подачи, то 0)
        'driver_arrived': boolean,           # приехал ли водитель
        'fake': boolean,                     # True, если заказ ложный
        'late_cancel': boolean,              # True, если заказ отменен на стадиях waiting или transporting
        'carack_time': integer,              # разность между временем успешного carack и временем создания заказа в секундах
        'route_distance': integer,           # прогнозируемое расстояние от назначенного водителя до места подачи в метрах (только для срочных)
        'route_time': integer,               # сейчас не пишется, прогнозируемое время прибытия назначенного водителя на место подачи в секундах (только для срочных)
        'start_waiting_time': utcnow(),      # время начала ожидания (!!pull request!! https://github.yandex-team.ru/taxi/backend/pull/1866)
        'start_transporting_time': utcnow(), # время начала поездки
        'travel_time': integer,              # разность между временем начала поездки и временем завершения заказа в секундах (только для complete)
        'complete_time': utcnow(),           # время получения статуса complete
        'calibrate': '<0|1>',                # информация из последнего запроса к taxicount о необходимости калибровки
        'fake_waiting': boolean,             # True, если водитель прислал ложный статус waiting
        'sure_toolate': boolean,             # True, если водитель слишком опаздывает на заказ, нужна подстраховка
        'online': {                          # количество свежих, протухших и отсутствующих сигналов о местоположении водителя
            'fresh': integer,
            'overdue': integer,
            'missing': integer,
        },
    }
    ```
    ##### driver_trace
    ```python
    # список точек местонахождения водителя между 20-й и 5-й минутой до момента подачи
    # обновляется каждую минуту (tasks/sure.py), каждый элемент списка представляет собой словарь вида:
    driver_trace_point = {
        # обязательное поле
        'created': utcnow(),                 # время добавления данной точки в список driver_trace

        # почти всегда обязательные поля; могут отсутствовать, если нет данных по треку
        'geopoint': [lon, lat],              # последнее известное местонахождение водителя
        'timestamp': utcnow(),               # таймстамп geopoint'а

        # могут отсутствовать, если роутер упал или не дал оценки
        'router_time': integer,              # оценка прибытия водителя по роутеру (в секундах)
        'router_distance': integer           # оценка расстояния от водителя до места подачи по роутеру (в метрах)
    }
    ```
    ##### forwarding (deprecated)

    forwardings и talks для новых заказов хранится в dbtaxi.order_talks

    ```python
    # настройки переадресации номера телефона
    forwarding = {
        'gateway_id': 'rtk',                            # идентификатор шлюза
        'forwarding_id': 'orderid+type'/'clid+smth',    # идентификатор переадресации
        'phone': '+78002000600',                        # телефон шлюза переадресации
        'ext': '1234'/'12345',                          # добавочный номер переадресации
        'created': datetime.utcnow(),                   # время создания переадресации
        'updated': datetime.utcnow(),                   # время обновления переадресации
        'expires': datetime,                            # время протухания переадресации
        'callee': '+79009009090                         # телефон, на который устанавливается переадресация
    }
    ```

    ##### payment_tech

    Информация по оплате заказа картой или наличными. Все суммы во внутреннем формате (сумма * 10^4; например, 199 рублей будут представлены в виде 1,990,000).

    ```python
    payment_tech = {                     # Информация по оплате заказа:
        'sum_to_pay': {                  #   - сумма, которую необходимо передать парку (принятое решение):
            'ride': 0,                   #     - за поездку
            'tips': 0,                   #     - чаевые
        },
        'without_vat_to_pay': {          #   - сумма без НДС (принятое решение):
            'ride': 0,                   #     - за поездку
            'tips': 0,                   #     - чаевые
        },
        'user_to_pay': {                 #   - сумма, которую необходимо снять с пользователя (принятое решение):
            'ride': 0,                   #     - за поездку
            'tips': 0,                   #     - чаевые
        },
        'driver_without_vat_to_pay': {   #   - сумма без НДС, которую необходимо передать парку [только если поездка по декаплингу]:
            'ride': 0,                   #     - за поездку
            'tips': 0,                   #     - чаевые
        },
        'type': 'card',                  #   - способ оплаты: card (карта) | cash (наличные) | corp (корпоративный счёт) | applepay (Apple pay)
        'prev_type': 'card',             #   - предыдущий способ оплаты, нужен для логики переводов кэш->карта
        'main_card_payment_id'           #   - идентификатор способа оплаты, значения
            card.card_id                 #     cards.card_id | 'corp-' + corp_client.client_id | apple_token-XXX_{{APPLE_PAY_ORDER_TAG}} | None
        'main_card_billing_id':          #   - идентификатор катры в биллинге, значения:
            card.billing_card_id,        #     cards.billing_id | corp_client.client_id | APPLE_PAY_ORDER_TAG | None
        'main_card_persistent_id': '123' #   - persistent_id карты в биллинге
        'main_card_possible_moneyless': True  #  Флаг от биллинга, что это временная карта, на которой может быть мало денег
        'last_known_ip': '1.2.3.4',      #   - последний известный IP-адрес пользователя

        # Флаги для пользователя
        'debt': True,                    #   - флаг наличия долга по заказу
        'need_cvn': True,                #   - флаг, показывающий, требуется cvn для проведения платежа или нет
        'need_accept': False,            #   - если нужен акцепт, установлен в True; иначе отсутствует (для sparse индексов)
        'need_disp_accept': True         #   - если нужен акцепт по цене диспетчерской, установлен в True; иначе отсутствует
        'antifraud_group_recalculated': False,
                                         #   - устанавливается в True сразу после учёта заказа для расчёта группы антифрода
        'antifraud_group': None,         #   - группа антифрода: 1, 2, 3 или None (если антифрод не работает)

        'unsuccessful_payment': False,   #   - флаг наличия неуспешной оплаты по карте
        'allowed_debt_by_config': False, #   - флаг, показывающий, что юзеру разрешено ехать в долг при неуспешной оплате

        # Флаги-мьютексы
        'check_card_is_finished': True,  #   - флаг, показывающий, что проверка процедура проверки карты завершена
        'antifraud_finished': True,      #   - флаг, показывающий, что процедура антифрода завершена
        'finish_handled': True,          #   - флаг, показывающий, что терминальный статус заказа обработан

        # Флаги для списания
        'hold_initiated': True,          #   - флаг, показывающий, что пользователь инициировал попытку оплаты;
                                         #     при установленном флаге будет осуществлена попытка холда средств;
                                         #     сбрасывается после попытки холда, независимо от результата

        'notifications': {               #   - нотификация для партнёра:
            'updaterequest': {           #     - для запроса /1.x/updaterequest:
                'to_send': {             #       - структура того, что нужно отправить
                    'warn_no_card': True,
                    'wait_payment_complete': False,
                    'paid_by_card': False
                },
                'sent': None,            #       - то, что отправили по факту (после отправки значение совпадает с to_send)
                'attempts': 0,           #       - счётчик попыток
            },
            'payment': {                 #     - для запроса /1.x/payment
                'to_send': {
                    'ride_sum': 199.00,
                    'tips_sum': 19.90,
                    'updated': utcnow(),
                },
                'sent': None,
                'attempts': 0,
            },
        },
        'ctt': false,                    # Если false, то _update_transactions не будет брать чаевые. Значение по умолчанию: true.
        'pcv': 11800,                    # для корпоративных заказов: НДС парка-исполнителя во внутреннем формате (необязательное поле, выставляется после finish_ride)
        'nds_for_receipt': 18,           # НДС для выставления чека пользователю. (Только Российские заказы)
        'was_auto_compensated': True,    # Была ли произведена автокомпенсация.

        'history': [{                    #   - история принятых решений:
            'created': utcnow(),         #     - время принятия решения
            'operator_login': 'pavel-b', #     - логин оператора, принявшего решение
            'otrs_ticket': '1492232...', #     - номер (__не__ URL) тикета в OTRS или None
            'decision': '...',           #     - принятое решение: compensate_ride | refund | accept | decline | pay_by_cash | compensation_refund

            # Только для compensate_ride
            'compensation_sum': {        #     - сумма для компенсации:
                'ride': 300.00,          #       - основная услуга (поездка)
            },

            # Только для refund
            'refund_sum': {              #     - сумма для возврата денег пользователю:
                'ride': 300.00,          #       - основная услуга (поездка)
                                         #       - чаевых нет, так как они устанавливаются в 0 при любой сумме компенсации
            },

            # Только для compensation_refund
            'compensation_refund_sum': { #    - сумма для возврата денег от парка нам
                'ride': 300.00,          #      - основаная услуга (поездка)
            },
        }, ...],
        is_decoupling: false             # Корпоративная поездка по декаплингу
    }
    ```

    ##### billing_tech

    Информация по взаимодействию с биллингом (транзакции, компенсации). Если ```payment_tech``` - решение, то ```billing_tech``` - исполнение принятого решения. То есть, добавляет/изменяет текущие транзакции, чтобы они соответствовали ```payment_tech.sum_to_pay```.

    Все суммы во внутреннем формате (сумма * 10^4; например, 199 рублей будут представлены в виде 1,990,000).

    ```python
    billing_tech = {                     # Информация по взаимодействию с биллингом:
        'version': 1,                    #   - версия данного блока
        'service_orders': {              #   - созданные при помощи CreateServiceOrderOrSubscription услуги:
            'ride': None,                #     - для поездки
            'tips': None,                #     - для чаевых
        },
        'refresh_attempts_count': 0,     #   - число попыток обновления pending-статусов
        'transactions': [{               #   - транзакции, созданные при помощи CreateBasket:
            'created': utcnow(),         #     - дата создания транзакции
            'updated': utcnow(),         #     - дата получения последнего терминального статуса
            'holded': None,              #     - дата успешного холда
            'card_billing_id':           #     - идентификатор карты в биллинге, с которой списывали деньги
                card.billing_card_id,
            'card_owner_uid':            #     - yandex_uid владельца карты
                card.owner,
            'wait_for_cvn': True,        #     - True, если ожидали cvn
            'status': 'hold_init',       #     - статусы транзакции; холд, клиринг и рефанд:
                                         #       - hold_init | hold_pending | hold_success | hold_resize | hold_fail
                                         #       - clear_init | clear_pending | clear_success | clear_fail
                                         #       - refund_pending | refund_fail
            'sum': {                     #     - сумма транзакции, каждое из полей присутствует, если по услуге списывали деньги:
                'ride': 1990000,         #       - поездка
                'tips': 190000,          #       - чаевые
            },
            'refunds': [{                #     - рефанды по транзакции:
                'created': utcnow(),     #       - дата создания рефанда
                'updated': utcnow(),     #       - дата получения последнего терминального статуса
                'status': 'refund_*',    #       - статус: refund_pending | refund_success | refund_fail
                'sum': {                 #       - сумма рефанда, каждое из полей присутствует, если по услуге возвращали деньги
                    'ride': 1990000,     #         - поездка
                    'tips': 190000,      #         - чаевые
                },
                'trust_refund_id': '..', #       - идентификатор рефанда
                'billing_response':      #       - ответ биллинга в терминальном статусе
                    None,
            }, ...],
            'trust_payment_id': '...',   #     - идентификатор корзины
            'billing_service_id': '650', #     - ID сервиса Биллинга, опциональное поле для декаплинга (650 - клиентский договор, 651 - парковый договор)
            'billing_response': None,    #     - ответ биллинга в терминальном статусе
        }, ...],
        'compensations': [{              #     - компенсации парку или водителю:
            'created': utcnow(),         #       - дата создания компенсации
            'updated': utcnow(),         #       - дата получения последнего терминального статуса
            'type': 'compensation',      #       - тип компенсации: compensation
            'status':                    #       - статус компенсации:
                'compensation_init',     #         compensation_init | compensation_pending | compensation_success | compensation_fail
            'sum': {                     #       - сумма компенсации:
                'ride': 1990000,         #         - основная услуга (поездка)
            },
            'trust_payment_id': '...',   #       - идентификатор компенсации (корзины)
            'billing_response': None,    #       - ответ биллинга в терминальном статусе

            # опциональные атрибуты
            'refunds': [{                #     - рефанды по транзакции:
                'created': utcnow(),     #       - дата создания рефанда
                'updated': utcnow(),     #       - дата получения последнего терминального статуса
                'status': 'refund_*',    #       - статус: refund_pending | refund_success | refund_fail
                'sum': {                 #       - сумма рефанда, каждое из полей присутствует, если по услуге возвращали деньги
                    'ride': 1990000,     #         - поездка
                    'tips': 190000,      #         - чаевые
                },
                'trust_refund_id': '..', #       - идентификатор рефанда
                'billing_response':      #       - ответ биллинга в терминальном статусе
                    None,
            }, ...],
            'full_sum': {                #       - сумма компенсации без учета эквайринга:
                'ride': 1990000,         #         - основная услуга (поездка)
            },
        }],
        'invalid_payment_methods': [     #       - способы оплаты, по которым не получилось соверщить оплату из-за ошибка invalid_payment_method
            {
                 'payment_id': 'card-x', #         - метод оплаты
                 'ts': utcnow(),         #         - дата и время получения ошибки
            },
        ],
    }
    ```
    ##### voucher_tech

    Информация о предоплаченных ваучерах (используется в безналичных заказах из Шереметьево).

    Все суммы во внутреннем формате (сумма * 10^4; например, 199 рублей будут представлены в виде 1,990,000).

    ```python
    voucher_tech = {
       "updated": utcnow(),
       "transactions": [
            {
              "billing_payment_id": "112334608608512974625211223",  # id для биллинга
              "created": 1528530661.821,                            # дата создания транзакции
              "payment_fd": "33623",                                # фискальный документ
              "payment_fn": "6538734806731400",                     # фискальный номер
              "payment_id": "v1::6538734806731400::33623",          # id от партнеров
              "sum": {
                "ride": 22000000                                    # сумма транзакции
              }
            }
          ]
    }
    ```
    ##### driverchange_tech

    Появляется в заказах за наличные в тех случаях, когда водитель отдает сдачу на Личный Счет клиента.
    Сумма указана во внутреннем формате. Поскольку заказ с таким полем обрабатывается в
    update_taximeter_balance_changes, то поле trust_payment_id содержит id связанного с заказом документа из
    коллекции payment_orders.

    ```python
    driverchange_tech = {
        "sum": 3200000,                                 # сумма во внутреннем формате
        "currency": "RUB",                              # валюта
        "trust_payment_id": "uuid4 hex string",         # id из payment_orders
        "created": utcnow()                             # дата создания записи
    }
    ```
