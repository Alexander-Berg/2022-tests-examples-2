settings:
    collection: order_proc
    connection: noncritical
    database: dbprocessing
sharding:
    key: _shard_id
# WARNING! If you want to add new index please contact @vitja or @lol4t0 first.
indexes:
  - key: _shard_id
  - key: aliases.due
  - key: aliases.id
  - key: candidates.alias_id
  - key:
      - name: candidates.driver_id
        type: ascending
      - name: updated
        type: ascending
  - key: created
  - key:
      - name: order.user_id
        type: ascending
      - name: status
        type: ascending
  - key: order.user_phone_id
  - key: order_info.umbrella_order_id
    sparse: true
  - key: processing.need_start
    sparse: true
  - key: reorder.id
    sparse: true
  - key: status
    partialFilterExpression:
        status:
            $eq: assigned
  - key:
      - name: status
        type: ascending
      - name: commit_state
        type: ascending
      - name: created
        type: ascending
    partialFilterExpression:
        commit_state:
            $eq: init
        status:
            $eq: draft
  - key: updated
  - key: voucher.id
    sparse: true
wiki_info: |
    #### order_proc

    *Назначение:* содержит оперативную информацию, необходимую для обработки
    заказа: изменение статуса заказа, поиск исполнителя, upsale, автореордер
    и т.д.

    Документы тесно связаны с заказами. Порядок:

    1. Создаём черновик заказа (коллеция orders).
    2. Делаем commit заказа, во время которого создаётся `order_proc`.
    3. Далее любое изменение в заказе сначала производится в документе
       `order_proc`, а потом документ `orders` синхронизируется с
       `order_proc`.

    *Структура документа*:

    ```python
    {
        # Дата создания и дата последнего обновления документа
        'created': utcnow(),
        'updated': utcnow(),

        # Признак того, что для связи `пассажир -> водитель` требуется,
        # по возможности, использовать номер телефона, полученный от провайдера.
        'fwd_driver_phone': False,

        # Статус обработки заказа:
        #
        #   * pending  - ищем исполнителя
        #   * assigned - исполнитель найден, заказ выполняется
        #   * finished - обработка заказа завершена
        #
        'status': 'pending',

        # Данные, используемые для поиска исполнителя на заказ
        'lookup': {
            # Версия поиска (для исключения гонок)
            'version': 1,

            # Тип поиска (plg.lookup.*.Lookup.name)
            'name': 'soon',

            # Поколение поиска и время инкремента поколения поиска; цифра
            # увеличивается на единицу при изменении каких-либо условий
            # заказа и при автореордере
            'generation': 1,
            'generation_updated': utcnow(),

            # Время начала поиска исполнителей и флажок "нужно начинать
            # поиск"
            'start_eta': utcnow(),
            'need_start': True,

            # Состояние поиска; произвольная структура, заполняемая и
            # используемая процедурой поиска исполнителей
            'state': {...},

            # Дополнительные параметры поиска, которые могут влиять, на какие-то
            # внешние процессы, например, setcar, requestcar
            'params': {
                # Для exact5 хранится требование наличия need_accept
                'need_accept': {
                    # Требуется ли подтверждение
                    'enabled': True,
                    # С какого времени начинать ожидать accept и до какого
                    'start': utcnow(),
                    'end': utcnow(),
                    # Флаг, который отвечает за то, получен ли accept или нет
                    'accepted': True,
                },
            },
        },

        # Данные для осного таска обработки заказа
        'processing': {
            # Версия для избежания гонок
            'version': 1,
            # Флажок "нужен запуск таска"; на него установлен sparse-индекс,
            # поэтому если запуск не нужен, поле unset-ится
            'need_start': True,
        },

        # Данные для реордера со стороны пользователя
        'reorder': {
            # Идентификатор, который отдаём пользователю вместо reorder-а.
            # Совпадает с suggestions.id
            'id': None,

            # Время следующего вызова процедуры поиска вариантов; если None,
            # то вызывать процедуру не нужно
            'next_call_eta': utcnow(),

            # Варианты для реордера
            'suggestions': {
                # Идентификатор подсказки; в случае выбора этой подсказки
                # пользователем становится идентификтором заказа, который
                # показываем пользователю
                'id': uuid.uuid4().hex,

                # Класс подсказки:
                #   * add_business - предложить пользователю добавить
                #     категорию "комфорт"
                'type': 'add_business',

                # Поколение lookup, когда действует подсказка; если цифра
                # меньше `lookup.generation`, то предложение считается
                # отозванным
                'generation': 1,

                # Изменения в `order.request`, структура та же
                'request': {...},
            },

            # Принятые пользователем решения (выбранные подсказки)
            'decisions': [{'id': 'suggestion_id'}, ...]
        },

        # Принятые (сервисом) решения об автореордере
        'autoreorder': {
            'decisions': [{
                # Время принятия решения; полностью совпадает с
                # `lookup.generation_updated`, что позволяет понимать, было
                # ли принято решения об автореордерере сейчас или ранее
                'created': utcnow(),
            }],
        },

        # Список выбранных кандидатов в исполнители
        'candidates': [{
            # Время добавления кандидата (сразу после окончания процедуры поиска)
            'created': utcnow(),

            # Идентификатор alias-а, видимый для парка и биллинга
            'alias_id': 'alias_id',

            # Данные о водителе/машине
            'driver_id': 'clid_uuid',
            'car_number': 'A777AA199',
            'driver_license': '1234324213',
            'name': 'Иванов Иван Иванович',
            'phone': '+78003000600',
            'forwarding': {                 # голосовой шлюз (необязательное поле)
                'phone': '+749577777777',
                'ext': '007',
            },
            'car_model': 'Mercedes-Benz M-Class',
            'car_color': 'синий',
            'car_color_code': '0000FF'

            # Данные о тарифе (идентификатор и категория), по которому
            # предлагаем выполнить заказ
            'tariff_id': '1',
            'tariff_class': 'econom',

            # Информация о местоположении водителя, расстоянии по прямой, а
            # также о расстоянии и времени по маршрутизатору до точки подачи;
            # может отсутствовать
            'point': [37.5, 55.7],  # lon, lat
            'line_dist': 800.0,  # метров
            'dist': 950.0,  # метров
            'time': 461.0,  # секунда

            "adjusted_point": {             # притянутое значение "point" (или null, если не было притягивания)
              "direction": 90,
              "geopoint": [                 # [lon, lat]
                37.60720939,
                55.74357618],
              "avg_speed": 0,
              "time": 1491550812            # unix timestamp
            },

            # Информация о setcar-е: время установки, время последнего
            # фейла, время последней блокировки (когда не стали отправлять
            # setcar, потому что водитель уже как бы на заказе)
            'last_setcar': utcnow(),
            'last_failed_setcar': utcnow(),
            'last_locked_setcar': utcnow(),

            # Информация о requestcar-ах и cancelrequest-ах: статус, время
            # фейла, кол-во попыток отправки
            'requestcar_status': 'init|done',
            'cancel_status': 'init|done',
            'last_failed_cancelrequest': utcnow(),
            'cancelrequest_attemts': 4,

            # Дата получения carack-а и предварительная стоимость заказ по
            # версии парка. Только отправившие carack будут # учавствовать
            # в розыгрыше
            'precost': None,
            'caracked': utcnow(),

            # Флаг отключения робота. Если True, робот не будет
            # использоваться для взятия заказа.
            'rd': True,

            # внутренний (РИТ) id парка, необязательное поле
            'db_id': 'abcdef',

            # ссылка на db.tariff.categories.id, нет у старых заказов, None у заказов
            # по старым тарифам
            'ci': '0123456789abcdef',

            # Время отправки предложения (setcar) при прямом назначении
            'ost': utcnow(),

            # Версия таксометра
            'taximeter_version': '8.02',

            # Предсказанное время seen таймаута, полученное от сервиса gprs-timings
            'gprs_time': 2.95,  # в секундах

            # Блок с информацией о родительском заказе в цепочке заказов,
            # Присутствует, если у текущего заказа есть родительский в цепочке заказов
            'cp' : {
                'dest' : [37.47793766055588, 56.73324826440328],  # тчока Б предыдущего заказа
                'id' : "81e8848942364f59b8033f8e0c382d38"  # идентификатор предыдущего заказа
            },

            # эксперименты, в которые попадает водитель
            'driver_experiments': ['autocancel_delay_seconds_15', ...],

            # Если кандидат был выбрал для выполнения нескольких заказов одновременно
            # (aka pool, пул), трекер вернет для этого кандидата несколько дополнительных
            # параметров. Сохраним их тут.
            'pool': {
                'e': boolean,  # enabled. Флаг того что найденный кандидат будет выполнять несколько заказов одновременно
                'umbr_id': string | null, # umbrella_id, идентификатор обобщающего заказа. Null, если обобщающего заказа если не создано
                'suggested_route': [{  # Может быть пустым или null. Последовательность точек обобщающего и этого заказа,
                                       # которая не приводит к значительному увеличению длины поедзки. Эта последовательность будет отправлена
                                       # на таксометр как рекомендуемая. Может быть none, что означает что в обобщающем заказе не осталось
                                       # непосещенных точек, то есть таксометру надо отправить source + destinations.
                  'type': string,                # type. source или destination. Чтобы водитель имел понимание надо ли высадить пассажира или ожидать.
                  'point': [float, float],       # point.
                  'embedded_order_id': string,   # embedded_order_id, идентификатор заказа к которому принадлежит точка.
                }, ...]
            },
            # Режим перемещения
            'reposition_mode': 'home',

            # Величина скидки
            'dv': 0.3,
            # Цена, по которой считалась скидка
            'dp': 200,

            # Acceptance rate и completion rate водителя на момент заказа
            'ar': 0.5,
            'cr': 0.85,
            # Карма водителя на момент назначения заказа
            'driver_points': 100.0,
            # когда был продан водитель
            'hiring_date': datetime.datetime(),
            # тип найма
            'hiring_type': 'commercial',

            # Поедет на условиях платной подачи или нет
            'paid_supply': false
            },
            # Информация для водителя по поездке от сервиса driver_metrics
            # используется для setcar и рассчета активности
            'driver_metrics' : {
                  # параметры блокировки за активность
                  'activity_blocking' : {
                      'activity_threshold' : 11,
                      'duration_sec' : 21600
                  },
                  # тип подачи
                  'dispatch' : 'short',
                  'properties' : [
                      'dispatch_short',
                      'new_gen'
                  ],
                  # значение Активности на момент начала заказа
                  'activity' : 96,
                  # прогноз изменения активности в зависимости от действий по
                  # заказу
                  'activity_prediction' : {
                      'a' : -10,
                      'c' : 1,
                      'd' : 0
                  },
                  # каким образом был получен рассчет (сервис, фолбек)
                  'type' : 'dm_service',
                  'id' : '9f79ccf6220c2a68abf25c2d020085bb'
            }
        ],

        # информация о изменениях параметра заказа (через change* методов)
        'changes': {
            # для первого изменения каждого типа в этот массив добавится искусственное
            # изменение со статусом applied, статусом доставки delivered и числом
            # попыток доставки 0.
            'objects': [
                {
                    # уникальный идентификатор изменения
                    'id': '0123456789abcdef',
                    # device id, с которого было сделано изменение
                    'ci': 'abcdef',
                    # тип изменения
                    'n': 'action|dont_call|dont_sms|comment|corp_cost_center|porchnumber|destinations|payment',
                    # значение изменения (структура зависит от типа изменения)
                    # для 'n' == 'user_ready', 'vl' == true|false
                    # для 'n' == 'destinations', 'vl' - такая же структура, как и order.request.destinations
                    # для 'n' == 'payment', 'vl' или строка 'cash' или структура
                    #               "vl" : {
                    #                   "ip" : "::fff",
                    #                   "yandex_uid" : "123456",
                    #                   "tips" : {
                    #                       "type" : "percent",
                    #                       "value" : 0
                    #                   },
                    #                   "payment_method_type" : "card",
                    #                   "payment_method_id" : "card-x6666",
                    #                   # надо ли ждать окончания транзакции для успешного
                    #                   # перевода
                    #                   "wait_sync" : true
                    #               }
                    # для 'n' == 'porchnumber', vl = 'строка c указанием подъезда'
                    # для 'n' == 'comment', vl = 'строка c комментарием'
                    # для 'n' == 'dont_call|dont_sms', vl == true | false
                    # для 'n' == 'corp_cost_center', vl == 'строка'
                    #
                    'vl': anything,
                    # версия заказа в момент, когда пользователь изменил заказ
                    'vr': 3,
                    # статус изменения
                    's': 'pending|processing|rejecting|rejected|applying|applied|skipped'
                    # время создания изменения, utc
                    'c': datetime.datetime(),
                    # клиентское время создания изменения (для версионирования и гонок)
                    't': datetime.datetime(),
                    # доставка об изменении для водителя
                    'si': {
                         # время последней попытки доставки, utc
                        't': datetime.datetime(),
                         # число попыток доставки
                        'c': 3,
                         # статус доставки
                        's': 'init|processing|failed|delivered|skipped',
                    }
                },
                ..
            ]
        }

        # Список созданных на заказ alias-ов. Алиасы видны паркам и биллингу
        # как идентификаторы заказов
        'aliases': {
            # Идентификатор
            'id': uuid.uuid4().hex,
            # Поколение поиска; если меньше, чем в `lookup.generation`,
            # алиас считается устаревшим, будут инициированы cancelrequest-ы
            'generation': 1,
            # Время подачи
            'due': utcnow(),
        },

        # Данные об исполнителе
        'performer': {
            # Индекс кандидата в массиве `candidates`
            'candidate_index': None,
            # Идентификатор парка
            'park_id': None,
            # Идентификатор алиаса, по которому выполняется заказ
            'alias_id': None,
            # Флажок "можно отправлять setcar", нужен для исключения гонок
            'presetcar': False,
            # Флажок "нужно синхронизировать с заказом", означает, что
            # документ orders требует обновления
            'need_sync': False,
        },

        # Данные о заказе. Почти та же структура, что у orders.
        'order': {
            'version': 1,
            'created': utcnow(),
            '_type': 'soon',
            'city': 'Москва',
            'nz': 'moscow',
            'user_id': '123...',
            'uber_id': '124...',
            'source': 'uber',   # 'uber', 'yauber'
            'device_id': 'AB-132...',
            'user_phone_id': ObjectId(),
            'user_uid': 'ab1223...',
            'status': 'pending',
            'taxi_status': None,
            'status_updated': utcnow(),
            'granted_promotions': [],
            'multiorder_order_name': 'Заказ №2', # Имя заказа при мультизаказе
            'terminal_id': None,
            'operator_login': 'text', # Логин оператора при заказе через колл-центр
            'referral_id': None,
            'referral_timestamp': None,
            'experiments': [],
            'user_experiments': [], # Эксперименты пользователя, зафиксированные на заказ
            'cost': 100.0,  # Стоимость для пассажира
            'tariff_cost': 100.0  # Стоимость по тарифу для пользователя
            'vendor_id': None,
            'user_locale': 'ru',
            'user_agent': '3.5.4/iphone...',
            'application': 'iphone',
            'coupon': {},
            'performer': {},  # см. performer в dbtaxi.orders
            'user_fraud': true,            # Заказ от юзера-мошенника
            'svo_car_number': 'A777AA177',
            # Скидка. Опциональное поле. Пока только для эконома.
            'discount': {
                'value': 0.32,   # итоговая скидка
                'price': 200,    # цена, по которой считалась скидка
                # Причина, по которой дали скидку:
                # * analytics - из выгрузки аналитиков
                # * newbie - новичок
                # * for_all - давали скидку всем
                'reason': 'analytics',
                'method': 'full',  # метод, по которому применяется скидка (full или time-dist)
                'by_classes': [  # скидка по классам
                    {
                        'class': 'econom',
                        'value': 0.32,
                        'price': 200,
                    }
                ],
            },
            # Цена выставлена через диспетчерскую или водителем
            'disp_cost': {
                # Цена диспетчерской
                'disp_cost': 500,
                # Цена водителя
                'driver_cost': 550,
                # Цена таксометра
                'taximeter_cost': 99,
                # Пользователь диспетчерской
                'operator_login': 'loginX',
            },
            # флаг расчёта фиксированной стоимости для пассажира (приходит от requestconfirm)
            'calc_method': 'taximeter|fixed|other|order-cost|pool',
            # флаг расчёта фиксированной стоимости для пассажира до изменения точки B (приходит из (track)-order-cost)
            'taximeter_calc_method': 'taximeter|fixed|other|order-cost|pool'

            # driver_cost содержит итоговую цену, посчитанную для водителя, а также информацию о том, откуда она взялась.
            # Если driver_cost отсутствует, цену для водителя нужно восстановить из order.cost.
            # Иначе она будет посчитана и лежать в driver_cost.cost.

            'driver_cost': {
                'cost': 100.0, # Стоимость для водителя
                # флаг расчёта фиксированной стоимости для водителя (приходит от requestconfirm)
                'calc_method': 'taximeter|fixed|other',
                # флаг расчёта фиксированной стоимости для водителя до изменения точки B (приходит из (track)-order-cost)
                'taximeter_calc_method': 'taximeter|fixed|other|order-cost|pool',
                # восстанавливалась ли цена для водителя
                'reason': 'fixed|taximeter|disp|restored',
                'tariff_cost': 100.0  # Стоимость по тарифу для водителя
            },

            # стоимость заказа по таксометру
            'calc_total': 200.00,
            # информация по расчёту таксометра для пассажира (опционально).
            'calc_info': {
                # время платного ожидания в минутах
                'waiting_time': 4,
                # стоимость платного ожидания
                'waiting_cost': 35
            },
            # информация по расчёту таксометра для водителя (опционально).
            'driver_calc_info': {
                # время платного ожидания в минутах
                'waiting_time': 4,
                # стоимость платного ожидания
                'waiting_cost': 40
            }

            # фиксированная стоимость заказа
            'fixed_price': {
                'price': 250,  # стоимость заказа, которую мы передали на таксометр, если поле присутствует
                               # заказ выполняется по фиксированной стоимости, fixed_price.price + waiting_cost
                'price_original': 250, # равно 'price', изначальная стоимость заказа по фиксированной стоимости (если поменяли точку Б, поле 'price' исчезнет)
                'driver_price': 250,  # стоимость заказа для водителя
                'destination': [37.5878411037443, 55.78234577333468],  # точка Б
                'max_distance_from_b': 500,  # максимальное расстояние до точки Б, при котором цена остаётся фиксированной
                'paid_supply_price': 73  # цена платной подачи (необязательное поле, приходит из order_offers)
            },

            # сделан ли этот заказ при "Нет машин"
            'no_cars_order': false,

            # теги пользователя (опционально)
            'user_tags': ['tag1', 'tag2'],

            # детализация стоимости поездки
            'taximeter_receipt': {
                'area_ids': {
                    'ufa': 'f2313a01f2b14ae883147cce1b34eb36'
                },
                'areas': [
                    'ufa'
                ],
                'calc_method': 2,
                'calc_total': 157.0,
                'details': [
                    {
                        'count': 1,
                        'name': 'child_chair.booster',
                        'meter_type': 'distance',
                        'meter_value': 10703.691472337661,
                        'per': 1000.0,
                        'price': 8.0,
                        'service_type': 'free_route',
                        'sum': 85.62953177870129,
                        'zone_names': [
                            'ufa'
                        ]
                    },
                    {
                        'meter_type': 'time',
                        'meter_value': 1283.0,
                        'per': 60.0,
                        'price': 1.0,
                        'service_type': 'free_route',
                        'sum': 21.383333333333333,
                        'zone_names': [
                            'ufa'
                        ]
                    }
                ],
                'distances_by_areas': {
                    'ufa': 10703.691472337661
                },
                'dst_actual_point': {
                    'lat': 54.70032,
                    'lon': 55.994981666666675
                },
                'dst_address': 'addr1',
                'dst_order_point': {
                    'lat': 54.701095,
                    'lon': 55.995109
                },
                'durations_by_areas': {

                    'ufa': 1283.0
                },
                'min_price': 49.0,
                'src_address': 'addr2',
                'src_point': {
                    'lat': 54.775290524,
                    'lon': 56.0231119848
                },
                'sum': 155.0,
                'tariff_id': 'cc9db53fbfcf4223a594cf291d4da436',
                'total': 155.0,
                'total_distance': 10703.691472337661,
                'total_duration': 1283.0,
                'transfer': False,
                'version': '8.35 (290)'
            },
            'track_costs' : { # стоимости заказа посчитанные на основе трека
                'taximeter_cost' : 86.0, # стоимость, посчитанная таксометром
                'taximeter_track_cost' : 90.58464, # стоимость, посчитанная бэком на основе трека от таксометра
                'gps_service_track_cost' : 80.68014 # стоимость, посчитанная бэком на основе трека от сервиса треков (geotracks)
            },
            'decoupling': decoupling,  # см. ниже
        },

        # Данные о ваучере
        'voucher': {
          'id': 'ee034e752aa743a4bd90050dd0c32a62'
        },


        # Данные для заказа; используются для синхронизации с заказом
        'order_info': {
            # Документ коллекции `orders` должен быть синхронизирован
            'need_sync': False,

            # Заказ с валидным промокодом
            'with_coupon': True,

            # Точка из адреса подачи
            'source_point': [37.5, 55.7],

            # Когда клиент таксометра последний раз передал цену заказа на бэкенд
            # (необязательное поле)
            'lta': datetime.datetime(2017, 2, 12, 10, 3, 51),

            # правила расчета субсидий (такая же структура, как и в db.orders['scr']
            'scr': [
                {
                    '_id': ObjectId(),
                    'type': 'add|guarantee',
                    'sum': 40,
                }
            ],

            # Статистика
            'statistics': {
                # Время назначения исполнителя
                'setcared': utcnow(),

                # Флажок "отчёт на почту отправлен" (устарело)
                'ride_report_sent': False,

                # Последовательность изменения статусов заказа
                'status_updates': [{
                    # Время установки статуса
                    'c': utcnow(),

                    # Статус и причина установки статуса
                    's': 'finished',
                    't': 'failed',
                    'r': u'Водитель проткнул колесо',

                    # Координаты водителя на момент установки статуса
                    'd': [37.5, 55.7],  # lon, lat

                    # Индекс исполнителя в массиве `candidates`
                    'i': 4,

                    # Поколение поиска на момент установки исполнителя
                    'g': 1,

                    # Код причины установки данного статуса:
                    #   * `'create'` - заказ только что был создан
                    #   * `'reorder'` - произошёл reorder
                    #   * `'autoreorder'` - произошёл autoreorder
                    #   * `'seen'` - с устройства водителя пришло подтверждение
                    #     получения setcar (была отображена форма назначения)
                    #   * `'seen_timeout'` - seen не пришёл за установленное время
                    #   * `'reject'` - предложение не принято; в этом случае в 'r'
                    #     будет отдно из следущих значений:
                    #     * `'seenimpossible'` - невозможно показать водителю
                    #       заказ (потому что водитель на другом заказе, например)
                    #     * `'missingtariffs'` - тарифы не успели загрузиться
                    #     * `'autocancel'` - таймаут с устройства (должно приходить
                    #       до offer_timeout-а)
                    #     * `'manual'` - водитель отказался вручную
                    #     * `'wrongway'` - заказ в спину, в ответ на seen, бекенд
                    #       отменяет выбранного кандидата
                    #   * `'offer_timeout'` - произошёл offer_timeout
                    #   * `'unset_unconfirmed_performer'` - получили 410 на setcar,
                    #     считаем, что исполнитель не сможет подтвердить получение
                    #     заказа
                    'q': 'create',

                    # Если `True`, требуется обработка статуса
                    'h': True,

                    # аргумент для события (произвольное значение)
                    # например, для смены метода оплаты - словарь с ключами
                    # change_value, billing_card_id и card_id
                   'a': 'any_value',

                    # Структура с информацией с девайса водителя, совпадает
                    # со структурой `status_change_positions` документа
                    # коллекции `orders`
                    'p': {...},

                    # Дистаниция водителя, которую он проехал по текущему
                    # заказу по данным таксометра. Не заполняется, если
                    # таксометр не возвращает соответствующую информацию
                    # или обновление статуса инициировано не таксометром
                    'l': 7500.42,
                }, ...],
            },
        },
        'destinations_statuses': [  # статусы точек из поля order.request.destinations
            {
              'updated': datetime.datetime.utcnow(),  # дата изменения статуса
              'passed': bool,                         # статус точки (проехали или нет)
            },
            ...
        ],

        # Идентификатор страховой компании - документа коллекции insurers
        'insurer_id': uuid.uuid4().hex,

        # Название нежелательной геозоны в пункте назначения (опционально)
        'adverse_destination': 'murino',
    }
    ```

    ##### decoupling

    Корпоративный заказ по декаплингу.

    ```python
    decoupling = {
        'success' : true,                                        # - получилось ли выполнить декаплинг
        'driver_price_info' : {                                  # - водительские данные
            'fixed_price' : 500,                                 # - стоимость поездки по фиксе, если поездка была по фиксе
            'tariff_id' : '5d08d6863ebca0630937b7f2',            #   - id тарифа
            'category_id' : '827d9277046641b8a3c88b8438f05fdb',  #   - id категории
            'cost': 600,                                         #   - окончательная стоимость поездки, берется из fixed_price (если поездка была по фиксе) или из таксометра
            'sp' : 1.6,                                          #   - параметры суржа
            'sp_surcharge' : 200,
            'sp_alpha' : 0.7,
            'sp_beta' : 0.3,
            'cost_is_unusual': False                             #   - флаг "подозрительной" стоимости
        },
        'user_price_info' : {                                    # - пользовательские данные (аналогично водительским)
            'fixed_price' : 250,
            'tariff_id' : '5d08d6863ebca0630937b7f2-8501a376959648d5b2d13339642f4a55-7b534e0a8e5c4ca3b7c90ea36ecec61f',
            'category_id' : '36ac148c2f8a40b8832229637a3389f2',
            'cost': 300,
            'sp' : 1,
            'sp_surcharge' : 200,
            'sp_alpha' : 0.7,
            'sp_beta' : 0.3,
            'cost_is_unusual': False
        },
        'error': {                                               # - конкретизирует ошибку в случае success = false
            'reason': 'get_corp_tarif_fail',
            'stage': 'calculating_offer',
        },
    }
    ```
