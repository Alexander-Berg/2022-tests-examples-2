import pytest

ROBOT_YANDEX_LOGIN = 'robot_yandex_login'
CORP_CLIENT_ID = 'corporate_client_identifier_test'
YANDEX_UID = 'some-uid'


@pytest.mark.parametrize(
    'corp_clients_code, expected_code, yandex_uid',
    (
        (200, 200, YANDEX_UID),
        (406, 200, None),
        (400, 500, None),
        (500, 500, None),
    ),
)
async def test_func_create_corp_client_id(
        taxi_cargo_crm,
        mockserver,
        corp_clients_code,
        expected_code,
        yandex_uid,
):
    @mockserver.json_handler('corp-clients-uservices/v1/clients/create')
    def _handler(request):
        assert request.json['yandex_login'] == ROBOT_YANDEX_LOGIN
        assert request.json['features'] == ['cargo-corp-autogenerated']

        author = (
            f' Author\'s uid: {yandex_uid}' if yandex_uid is not None else ''
        )
        assert request.json['description'] == (
            'Phoenix client, card payment.'
            ' // Клиент феникса, оплата картой.' + author
        )
        body = None
        if corp_clients_code == 200:
            body = {'id': CORP_CLIENT_ID}
        if corp_clients_code == 400:
            body = {
                'message': 'Request error',
                'code': 'REQUEST_ERROR',
                'details': {},
            }
        if corp_clients_code == 406:
            body = {
                'message': 'Not Acceptable',
                'code': 'NOT_ACCEPTABLE',
                'details': {
                    'reason': 'Duplicate',
                    'client_id': CORP_CLIENT_ID,
                },
            }
        return mockserver.make_response(status=corp_clients_code, json=body)

    request = {'yandex_login': ROBOT_YANDEX_LOGIN}
    if yandex_uid is not None:
        request['yandex_uid'] = yandex_uid
    response = await taxi_cargo_crm.post(
        '/functions/create-corp-client-id', json=request,
    )
    assert response.status_code == expected_code
    if expected_code == 200:
        assert response.json()['corp_client_id'] == CORP_CLIENT_ID
