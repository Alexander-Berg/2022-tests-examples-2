#ifndef USERVER_CODEGEN_IPP_INSTANTIATION_GUARD
#error DO NOT INCLUDE THIS FILE! INCLUDE THE FILE WITH *.hpp EXTENSION!
#endif

/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/docs/yaml/api/api.yaml,
// taxi/uservices/services/test-service/docs/yaml/api/openapi.yaml

#include <handlers/v1/run/post/request.hpp>

#include <codegen/impl/convert.hpp>
#include <codegen/impl/get_validation_length.hpp>
#include <codegen/impl/optional_convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <cstring>
#include <unordered_set>
#include <userver/formats/common/meta.hpp>
#include <userver/formats/json/string_builder.hpp>
#include <userver/logging/log.hpp>
#include <userver/utils/assert.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>
#include <userver/utils/underlying_value.hpp>

#include <codegen/impl/convert.hpp>

#include <boost/algorithm/string/join.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <codegen/impl/convert.hpp>
#include <codegen/impl/parsers.hpp>
#include <userver/utils/datetime/from_string_saturating.hpp>

#include <userver/formats/json/serialize.hpp>
#include <userver/formats/json/value.hpp>
#include <userver/http/common_headers.hpp>
#include <userver/http/content_type.hpp>
#include <userver/server/handlers/exceptions.hpp>
#include <userver/server/http/http_request.hpp>
#include <userver/tracing/span.hpp>
#include <userver/utils/assert.hpp>

#include <codegen/impl/split_by.hpp>
#include <codegen/prepare_json.hpp>
#include <userver/formats/parse/common_containers.hpp>

namespace handlers::v1_run::post {

Request::Request([[maybe_unused]] const server::http::HttpRequest& http_request,
                 [[maybe_unused]] const formats::json::Value* json_body,
                 [[maybe_unused]] ::server::request::RequestContext& context)
    : optional_service_info{tvm2::GetServiceAuthInfoOptional(context)}
{
  if (json_body) {
    // We already have json::Value, so it's faster to parse DOM
    // instead of parsing SAX from the beginning.
    ::tracing::Span::CurrentSpan().AddNonInheritableTag("dom_parsed", 1);

    this->body = (*json_body).As<handlers::Request>();
  } else {
    // No DOM model, just use SAX parser (if available)
    ::tracing::Span::CurrentSpan().AddNonInheritableTag("sax_parsed", 1);

    const auto body = ::codegen::PrepareJsonString(http_request.RequestBody());
    this->body = [](std::string_view sw) {
      handlers::Request result;
      // .cpp_type: handlers::Request
      // .optional_subtype: None
      // cpp_type: handlers::Request
      handlers::parser::PRequest parser;

      parser.Reset();
      ::formats::json::parser::SubscriberSink sink(result);
      parser.Subscribe(sink);

      formats::json::parser::ParserState state;
      state.PushParser(parser.GetParser());
      state.ProcessInput(sw);
      return result;
    }(body);
  }
}

void Request::SetSpanTags() const {}

}
