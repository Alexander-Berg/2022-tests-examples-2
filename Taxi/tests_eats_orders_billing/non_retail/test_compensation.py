import pytest

from tests_eats_orders_billing import consts
from tests_eats_orders_billing import helpers


@pytest.mark.parametrize(
    'input_stq_args, input_events,expected_input_stq_fail,'
    'times_called,expected_requests',
    [
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00', goods_gmv_amount='100.00',
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[
                                    helpers.make_compensation_discount_ie(
                                        discount_type='marketing_promocode',
                                        amount='10.00',
                                        discount_provider='place',
                                    ),
                                ],
                            ),
                            helpers.make_compensation_item_ie(
                                item_type='service_fee',
                                amount='9',
                                discounts=[],
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='CourierAssigned',
                    external_event_ref=f'{consts.ORDER_NR}/CourierAssigned/1',
                    data=helpers.make_courier_assigned(
                        courier_id=None,
                        assigned_at='2019-11-26T00:13:44+03:00',
                    ),
                ),
                helpers.make_db_row(
                    kind='CourierAssigned',
                    external_event_ref=f'{consts.ORDER_NR}/CourierAssigned/2',
                    data=helpers.make_courier_assigned(
                        courier_id='courier_id_2',
                        assigned_at=consts.OTHER_DATE,
                    ),
                ),
                helpers.make_db_row(
                    kind='OrderDelivered',
                    external_event_ref=f'{consts.ORDER_NR}/OrderDelivered',
                    data=helpers.make_order_delivered_ie(),
                ),
            ],
            # expected_input_stq_fail
            False,
            4,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_gmv',
                    kind='order_gmv',
                    data=helpers.make_order_gmv_data(gmv_amount='100'),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='50',
                                discounts=[],
                                product_id='product/native/native',
                                product_type='product',
                            ),
                        ],
                        service_fee_amount='9',
                        courier_id='courier_id_2',
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_delivered',
                    kind='order_delivered',
                    data=helpers.make_order_delivered_data(),
                ),
            ],
            id='Test compensations with place discounts',
        ),
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00',
                        goods_gmv_amount='100.00',
                        promocode=helpers.make_promocode(
                            promocode_type='sorrycode',
                        ),
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[
                                    helpers.make_compensation_discount_ie(
                                        discount_type='marketing_promocode',
                                        amount='10.00',
                                        discount_provider='own',
                                    ),
                                    helpers.make_compensation_discount_ie(
                                        discount_type='marketing',
                                        amount='15.00',
                                        discount_provider='own',
                                    ),
                                ],
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='OrderDelivered',
                    external_event_ref=f'{consts.ORDER_NR}/OrderDelivered',
                    data=helpers.make_order_delivered_ie(),
                ),
            ],
            # expected_input_stq_fail
            False,
            4,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_gmv',
                    kind='order_gmv',
                    data=helpers.make_order_gmv_data(gmv_amount='100'),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='50',
                                discounts=[
                                    helpers.make_discount_compensation_data(
                                        '10', 'compensation_promocode',
                                    ),
                                    helpers.make_discount_compensation_data(
                                        amount='15',
                                        compensation_type='marketing',
                                    ),
                                ],
                                product_id='product/native/native',
                                product_type='product',
                            ),
                        ],
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_delivered',
                    kind='order_delivered',
                    data=helpers.make_order_delivered_data(),
                ),
            ],
            id='Test compensations with own discounts',
        ),
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00', goods_gmv_amount='100.00',
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation1',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product', amount='50', discounts=[],
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation2',
                    data=helpers.make_compensation_ie(
                        amount='30',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product', amount='30', discounts=[],
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='OrderDelivered',
                    external_event_ref=f'{consts.ORDER_NR}/OrderDelivered',
                    data=helpers.make_order_delivered_ie(),
                ),
            ],
            # expected_input_stq_fail
            False,
            5,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_gmv',
                    kind='order_gmv',
                    data=helpers.make_order_gmv_data(gmv_amount='100'),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation1',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='50',
                                product_id='product/native/native',
                                product_type='product',
                                discounts=[],
                            ),
                        ],
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation2',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='30',
                                product_id='product/native/native',
                                product_type='product',
                                discounts=[],
                            ),
                        ],
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_delivered',
                    kind='order_delivered',
                    data=helpers.make_order_delivered_data(),
                ),
            ],
            id='Test 2 compensations',
        ),
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00', goods_gmv_amount='100.00',
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation1',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[],
                                identity='identity1',
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation2',
                    data=helpers.make_compensation_ie(
                        amount='30',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[],
                                identity='identity1',
                            ),
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='20',
                                discounts=[],
                                identity='identity2',
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='OrderDelivered',
                    external_event_ref=f'{consts.ORDER_NR}/OrderDelivered',
                    data=helpers.make_order_delivered_ie(),
                ),
            ],
            # expected_input_stq_fail
            False,
            5,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_gmv',
                    kind='order_gmv',
                    data=helpers.make_order_gmv_data(gmv_amount='100'),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation1',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='50',
                                product_id='product/native/native',
                                product_type='product',
                                discounts=[],
                            ),
                        ],
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation2',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='20',
                                product_id='product/native/native',
                                product_type='product',
                                discounts=[],
                            ),
                        ],
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_delivered',
                    kind='order_delivered',
                    data=helpers.make_order_delivered_data(),
                ),
            ],
            id='Test 2 compensations with products intersection',
        ),
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00', goods_gmv_amount='100.00',
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[
                                    helpers.make_compensation_discount_ie(
                                        discount_type='marketing_promocode',
                                        amount='10.00',
                                        discount_provider='place',
                                    ),
                                ],
                            ),
                            helpers.make_compensation_item_ie(
                                item_type='service_fee',
                                amount='9',
                                discounts=[],
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='CourierAssigned',
                    external_event_ref=f'{consts.ORDER_NR}/CourierAssigned/2',
                    data=helpers.make_courier_assigned(
                        courier_id='courier_id_2',
                        assigned_at=consts.OTHER_DATE,
                    ),
                ),
                helpers.make_db_row(
                    kind='OrderCancelled',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCancelled',
                    data=helpers.make_order_cancelled_ie(
                        is_place_fault=False,
                        is_payment_expected=False,
                        is_reimbursement_required=False,
                    ),
                ),
            ],
            # expected_input_stq_fail
            False,
            2,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='50',
                                discounts=[],
                                product_id='product/native/native',
                                product_type='product',
                            ),
                        ],
                        service_fee_amount='9',
                        courier_id='courier_id_2',
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
            ],
            id='Test compensations with order cancelled',
        ),
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00', goods_gmv_amount='100.00',
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[
                                    helpers.make_compensation_discount_ie(
                                        discount_type='marketing_promocode',
                                        amount='10.00',
                                        discount_provider='place',
                                    ),
                                ],
                            ),
                            helpers.make_compensation_item_ie(
                                item_type='service_fee',
                                amount='9',
                                discounts=[],
                            ),
                        ],
                    ),
                ),
                helpers.make_db_row(
                    kind='OrderPickedUp',
                    external_event_ref=f'{consts.ORDER_NR}/OrderPickedUp',
                    data=helpers.make_order_picked_up_ie(),
                ),
            ],
            # expected_input_stq_fail
            False,
            4,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_gmv',
                    kind='order_gmv',
                    data=helpers.make_order_gmv_data(gmv_amount='100'),
                ),
                helpers.make_create_request(
                    external_id=f'Compensation/{consts.ORDER_NR}'
                    f'/1/compensation/{consts.ORDER_NR}/Compensation',
                    kind='compensation',
                    data=helpers.make_compensation_data(
                        items=[
                            helpers.make_item_compensation_data(
                                amount='50',
                                discounts=[],
                                product_id='product/native/native',
                                product_type='product',
                            ),
                        ],
                        service_fee_amount='9',
                        order_finished_at=consts.FINISHED_DATE,
                    ),
                ),
                helpers.make_create_request(
                    external_id=f'OrderDelivered/{consts.ORDER_NR}'
                    f'/order_delivered',
                    kind='order_delivered',
                    data=helpers.make_order_delivered_data(),
                ),
            ],
            id='Test compensations with order picked up',
        ),
        pytest.param(
            # input_stq_args
            helpers.make_events_process_stq_args(consts.ORDER_NR),
            [
                helpers.make_db_row(
                    kind='OrderCreated',
                    external_event_ref=f'{consts.ORDER_NR}/OrderCreated',
                    data=helpers.make_order_created_ie(
                        goods_price='100.00', goods_gmv_amount='100.00',
                    ),
                ),
                helpers.make_db_row(
                    kind='ConfirmedByPlace',
                    external_event_ref=f'{consts.ORDER_NR}/ConfirmedByPlace',
                    data=helpers.make_confirmed_ie(),
                ),
                helpers.make_db_row(
                    kind='Compensation',
                    external_event_ref=f'{consts.ORDER_NR}/Compensation',
                    data=helpers.make_compensation_ie(
                        amount='50',
                        items=[
                            helpers.make_compensation_item_ie(
                                item_type='product',
                                amount='50',
                                discounts=[
                                    helpers.make_compensation_discount_ie(
                                        discount_type='marketing_promocode',
                                        amount='10.00',
                                        discount_provider='place',
                                    ),
                                ],
                            ),
                            helpers.make_compensation_item_ie(
                                item_type='service_fee',
                                amount='9',
                                discounts=[],
                            ),
                        ],
                    ),
                ),
            ],
            # expected_input_stq_fail
            True,
            1,
            [
                helpers.make_create_request(
                    external_id=f'OrderCreated/{consts.ORDER_NR}',
                    kind='order_created',
                    data=helpers.make_order_created_data(),
                ),
            ],
            id='Test fail for non-delivered order',
        ),
    ],
)
async def test_order_cancelled(
        stq_runner,
        experiments3,
        mock_eats_billing_processor_create,
        insert_billing_input_events,
        input_stq_args,
        input_events,
        expected_input_stq_fail,
        times_called,
        expected_requests,
        mock_customer_service_retrieve,
        mock_customer_service_retrieve_new,
        mock_order_revision_list,
        mock_order_revision_list_new,
):
    mock_order_revision_list(revisions=[{'revision_id': '123-321'}])
    mock_order_revision_list_new(revisions=[{'origin_revision_id': '123-321'}])

    experiments3.add_experiment(**helpers.make_use_core_revisions_exp())

    await helpers.input_events_process_test_func(
        stq_runner,
        mock_eats_billing_processor_create,
        insert_billing_input_events,
        input_stq_args,
        input_events,
        expected_input_stq_fail,
        times_called,
        expected_requests,
    )
