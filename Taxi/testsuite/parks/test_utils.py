import copy

import pytest

from . import utils


@pytest.mark.parametrize(
    'obj, replacement, expected',
    [
        (1, 2, 2),
        ({}, {}, {}),
        ({}, {1: 2}, {1: 2}),
        ({'1': '2'}, {'1': '3'}, {'1': '3'}),
        ({'1': '2', 2: 3}, {'1': '3'}, {'1': '3', 2: 3}),
        ({'1': '2', 2: {'1': 2}}, {'1': '3'}, {'1': '3', 2: {'1': 2}}),
        (
            {'1': '2', 3: [1, 3], 2: {'1': 2}},
            {'1': '3', 3: [4]},
            {'1': '3', 3: [4], 2: {'1': 2}},
        ),
        (
            {'1': '2', 2: {'1': 2, 3: 4}},
            {2: {3: 1}},
            {'1': '2', 2: {'1': 2, 3: 1}},
        ),
        (
            {'1': '2', 2: {'1': 2, 3: 4}},
            {2: {3: [4], 1: 10}},
            {'1': '2', 2: {'1': 2, 3: [4], 1: 10}},
        ),
        ({'1': '2'}, {'2': '3'}, {'1': '2', '2': '3'}),
        ({'1': '2'}, {'1': '3', '2': '3'}, {'1': '3', '2': '3'}),
    ],
)
def test_replace(obj, replacement, expected):
    copied = copy.deepcopy(obj)
    assert utils.replace(obj, replacement) == expected
    assert copied == obj


@pytest.mark.parametrize(
    'obj, projection, expected',
    [
        ({}, {}, {}),
        ({}, 1, {}),
        ({1: 2}, 1, {1: 2}),
        ({'1': '2'}, ['1'], {'1': '2'}),
        ({'1': '2', 2: 3, 3: 4}, ['1', 2], {'1': '2', 2: 3}),
        ({'1': '2', 2: {'1': 2, 3: 4}}, {2: '1'}, {2: {'1': 2}}),
        ({'1': '2', 2: {'1': 2, 3: 4}}, [{2: '1'}], {2: {'1': 2}}),
        (
            {'1': '2', 2: {'1': 2, 3: 4}, 3: 4},
            ['1', {2: '1'}],
            {'1': '2', 2: {'1': 2}},
        ),
        (
            {'1': '2', 2: {'1': 2, 3: 4}, 3: 4},
            ['1', {2: ['1', 3]}],
            {'1': '2', 2: {'1': 2, 3: 4}},
        ),
        ({'1': {}}, {'1': '2'}, {}),
    ],
)
def test_projection(obj, projection, expected):
    copied = copy.deepcopy(obj)
    assert utils.projection(obj, projection) == expected
    assert copied == obj


@pytest.mark.parametrize(
    'obj, remove, expected',
    [
        ({}, {}, {}),
        ({}, 1, {}),
        ({}, [1, 2], {}),
        ({}, {1: 2, 2: 3}, {}),
        ({1: 2}, 1, {}),
        ({1: 2, 3: 2}, 1, {3: 2}),
        ({1: 2, 3: 2}, [1, 2], {3: 2}),
        ({'1': '2', 2: {'1': 2, 3: 4}}, {2: '1'}, {'1': '2', 2: {3: 4}}),
        ({'1': '2', 2: {'1': 2, 3: 4}}, [{2: '1'}], {'1': '2', 2: {3: 4}}),
        (
            {'1': '2', 2: {'1': 2, 3: 4}, 3: 4},
            ['1', {2: '1'}],
            {2: {3: 4}, 3: 4},
        ),
        (
            {'1': '2', 2: {'1': 2, 3: 4}, 3: 4},
            ['1', {2: ['1', 3]}],
            {2: {}, 3: 4},
        ),
    ],
)
def test_remove(obj, remove, expected):
    copied = copy.deepcopy(obj)
    assert utils.remove(obj, remove) == expected
    assert copied == obj
