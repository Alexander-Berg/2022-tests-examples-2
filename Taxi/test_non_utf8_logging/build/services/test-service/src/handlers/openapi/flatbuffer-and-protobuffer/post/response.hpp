
/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/docs/yaml/api/api.yaml,
// taxi/uservices/services/test-service/docs/yaml/api/openapi.yaml

#pragma once

#include <variant>

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/parsing_flags.hpp>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/serialize_container.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>
#include <userver/server/http/http_response.hpp>

#include <codegen/parser/datetime_parser.hpp>
#include <codegen/parser/dummy_parser.hpp>  // TODO: for debug only
#include <codegen/parser/enum_parser.hpp>
#include <codegen/parser/extra_helper.hpp>
#include <codegen/parser/null_swallow.hpp>
#include <codegen/parser/nullable_helper.hpp>
#include <codegen/parser/parser_converter.hpp>
#include <codegen/parser/parser_dom.hpp>
#include <codegen/parser/parser_empty.hpp>
#include <codegen/parser/parser_non_null_ptr.hpp>
#include <codegen/parser/validator.hpp>
#include <codegen/parser/value_builder_helper.hpp>
#include <userver/formats/json/parser/parser.hpp>

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/parsing_flags.hpp>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>

#include <string>

namespace handlers::openapi_flatbuffer_and_protobuffer::post {

// Content-Type: application/flatbuffer
namespace application_flatbuffer {

/// Response wrapper for std::string
class Response200 {
 public:
  std::string ToString() const;

  std::string body{};
};

void FillHttpResponse(::server::http::HttpResponse& http_response,
                      const Response200& response);

}

// Content-Type: application/protobuf
namespace application_protobuf {

/// Response wrapper for std::string
class Response200 {
 public:
  std::string ToString() const;

  std::string body{};
};

void FillHttpResponse(::server::http::HttpResponse& http_response,
                      const Response200& response);

}

using Response = std::variant<application_flatbuffer::Response200,
                              application_protobuf::Response200>;

void FillHttpResponse(::server::http::HttpResponse& http_response,
                      const Response& response);

std::string ToString(const Response& response);

}
