/* THIS FILE IS AUTOGENERATED, DON'T EDIT! */

// This file was generated from file(s):
// taxi/uservices/services/test-service/docs/yaml/api/api.yaml,
// taxi/uservices/services/test-service/docs/yaml/api/openapi.yaml

#pragma once

#include <userver/formats/json/serialize_container.hpp>
#include <userver/formats/json/value.hpp>

#include <array>
#include <boost/type_traits/has_equal_to.hpp>
#include <codegen/convert_to_json_optional.hpp>
#include <codegen/format.hpp>
#include <codegen/parsing_flags.hpp>
#include <userver/formats/json/inline.hpp>
#include <userver/formats/json/string_builder_fwd.hpp>
#include <userver/formats/json/value_builder.hpp>
#include <userver/logging/log_helper_fwd.hpp>

#include <codegen/parser/datetime_parser.hpp>
#include <codegen/parser/dummy_parser.hpp>  // TODO: for debug only
#include <codegen/parser/enum_parser.hpp>
#include <codegen/parser/extra_helper.hpp>
#include <codegen/parser/null_swallow.hpp>
#include <codegen/parser/nullable_helper.hpp>
#include <codegen/parser/parser_converter.hpp>
#include <codegen/parser/parser_dom.hpp>
#include <codegen/parser/parser_empty.hpp>
#include <codegen/parser/parser_non_null_ptr.hpp>
#include <codegen/parser/validator.hpp>
#include <codegen/parser/value_builder_helper.hpp>
#include <userver/formats/json/parser/parser.hpp>

namespace server::http {
class HttpRequest;
}

namespace server::request {
class RequestContext;
}

namespace formats::json {
class Value;
}

namespace handlers::openapi_flatbuffer_and_protobuffer::post {

struct Body {};

Body Parse(const formats::json::Value& elem, formats::parse::To<Body>);

namespace parser {
class PBody final
    : public ::formats::json::parser::TypedParser<
          handlers::openapi_flatbuffer_and_protobuffer::post::Body> {
 public:
  PBody();

  void Reset() override;

  void StartObject() override;

  void Key(std::string_view key) override;

  void EndObject() override;

 private:
  std::string Expected() const override;

  std::string GetPathItem() const override;

  handlers::openapi_flatbuffer_and_protobuffer::post::Body result_;
  std::string key_;

  template <class To>
  struct ParserLocalConverterTrait {
    template <class From>
    static To Convert(From&& from);
  };

  template <class To>
  struct ParserLocalDomToType {
    static To Convert(::formats::json::Value&& value);
  };

  ::codegen::parser::EmptyParser ff_empty_;

  enum class State {
    kStart,
    kInside,
  };
  State state_;
};

}  // namespace parser

::formats::json::Value Serialize(
    const Body& value, ::formats::serialize::To<::formats::json::Value>);

void WriteToStream(const Body& value, formats::json::StringBuilder& sw,
                   bool hide_brackets = false,
                   const char* hide_field_name = nullptr);

logging::LogHelper& operator<<(logging::LogHelper& lh, const Body& v);

template <typename U>
std::enable_if_t<std::is_same<U, Body>::value, bool> operator==(const U&,
                                                                const U&)
{
  return true;
}

template <typename U>
std::enable_if_t<std::is_same<U, Body>::value, bool> operator!=(const U& lhs,
                                                                const U& rhs)
{
  return !(lhs == rhs);
}

struct Request {
  Request(const server::http::HttpRequest& http_request,
          const formats::json::Value* json_body,
          ::server::request::RequestContext& context);

  void SetSpanTags() const;

  handlers::openapi_flatbuffer_and_protobuffer::post::Body body;
};

}
