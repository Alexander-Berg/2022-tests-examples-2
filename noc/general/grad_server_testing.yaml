credentials: !include lb_credentials.yaml

logging:
  root: {file: "/var/log/grad/server.log", severity: "INFO"}
  aiortapi: {file: "/var/log/grad/server.log", severity: "ERROR"}
  #  kikimr.public.sdk.python: {file: "/var/log/grad/server.log", severity: "INFO"}
  #  kikimr.public.sdk.python.client.connection: { file: "/var/log/grad/server.log", severity: "INFO"}
  ydb.connection: { file: "/var/log/grad/server.log", severity: "INFO"}
  grad: {file: "/var/log/grad/server%(log_file_prefix)s.log", severity: "INFO"}
  grad.pollers: {file: "/var/log/grad/server%(log_file_prefix)s.log", severity: "INFO"}
  grad.lib.scheduler: {file: "/var/log/grad/server%(log_file_prefix)s.log", severity: "INFO"}
  grad.pollers.snmp_poller: {file: "/var/log/grad/server%(log_file_prefix)s.log", severity: "INFO"}
  #  grad.lib.pipeline: {file: "/var/log/grad/server%(log_file_prefix)s.log", severity: "DEBUG"}
  comocutor: {file: "/var/log/grad/server%(log_file_prefix)s.log", severity: "WARNING"}

importers:
  perhost:
    - speed
#    - loopbacks
#    - optical_threshold
#    - bgp_external_peers
#    - border_ifaces
#    - bot_data
#    - is_offline
#    - border_ifaces
  dchost: get_rt_hosts_tags

# http
port: 12346

# настройки отправки данных
server_upstream:
  LB:
    type: LB
    endpoint_host: vla.logbroker.yandex.net
    token: *lb_credentials_token
    direct_write: true

default_afterburn: 1

# Глобальный фильтр для хостов
host_filter: [
  "rt%{Nexus 3000} and {серверный свитч}", "rt%{Huawei}"
]

# Для разработки, обычно, не нужно то что ниже
statsd: False

#zookeeper:
#  server: "vla-zk01.net.yandex.net"
##  server: "iva-zk01.net.yandex.net,myt-zk01.net.yandex.net,vla-zk01.net.yandex.net"
#  lock_path: "/grad/server_test2"
#  identifier: "myt-grad1.yndx.net"
redis:
  server: "redis://localhost"
#
#error_booster:
#  token: *oauth_error_booster_token
#  topic: "/grad/error-booster"
#  environment: "testing"
#  filter:
#    message: "got error_status.+host=swc-taix-2"

pollers:
  SNMP Cisco network:
    poller: snmp
    poller version: 2
    poller params:
      counters:
        - {oid: ifmib.ifDescr, options: ["use_snmpbulkget"]}
        - {oid: ifmib.ifAlias, options: ["use_snmpbulkget"]}
        - {oid: ifmib.ifOutDiscards, options: ["use_snmpget"]}
        - {oid: ifmib.ifInDiscards, options: ["use_snmpget"]}
        - {oid: ifmib.ifHighSpeed, options: ["use_snmpget"]}
        - {oid: ifmib.ifHCInOctets, options: ["use_snmpget"]}
        - {oid: ifmib.ifHCOutOctets, options: ["use_snmpget"]}
        - {oid: ifmib.ifHCInUcastPkts, options: ["use_snmpget"]}
        - {oid: ifmib.ifHCOutUcastPkts, options: ["use_snmpget"]}
        - {oid: ifmib.ifInErrors, options: ["use_snmpget"]}
        - {oid: ifmib.ifOutErrors, options: ["use_snmpget"]}
        - {oid: ifmib.ifOperStatus, options: ["use_snmpget"]}
        - {oid: ifmib.ifAdminStatus, options: ["use_snmpget"]}
        - {oid: ifmib.ifLastChange, options: ["use_snmpget"]}
        - {oid: ifmib.ifInMulticastPkts, options: ["use_snmpget"]}
        - {oid: ifmib.ifOutMulticastPkts, options: ["use_snmpget"]}
        - {oid: ifmib.ifInBroadcastPkts, options: ["use_snmpget"]}
        - {oid: ifmib.ifOutBroadcastPkts, options: ["use_snmpget"]}
      post_fn: [rearrange_partial_data, cisco_counters_workaround,
                sum_ifmib_counters_new, check_net_data_sanity]
      skip_key_expr: {'ifname': '(Null|StackPort|unrouted|.*mpls|StackSub|dwdm)'}
    filter: ["rt%({Cisco Catalyst} or {Nexus} or {Cisco IE-2000}) and [опрос SNMP]"]
    series: network
    interval: 120
    instances: 3

  SNMP network fast huawei:
    poller: snmp
    poller version: 2
    poller params:
      timeout: 10
      counters:
        - { oid: ifmib.ifDescr, options: [ "use_snmpbulkget" ] }
        - { oid: ifmib.ifAlias, options: [ "use_snmpbulkget" ] }
        - { oid: ifmib.ifHighSpeed, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifHCInOctets, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifHCOutOctets, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifHCInUcastPkts, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifHCOutUcastPkts, options: [ "use_snmpget" ] }
        - { oid: ifmib.hwIfEtherStatInJumboPkts, options: [ "use_snmpget", "none_to_zero" ] }
        - { oid: ifmib.hwIfEtherStatOutJumboPkts, options: [ "use_snmpget", "none_to_zero" ] }
        - { oid: ifmib.hwIfEtherStatInPausePkts, options: [ "use_snmpget", "none_to_zero" ] }
        - { oid: ifmib.hwIfEtherStatOutPausePkts, options: [ "use_snmpget", "none_to_zero" ] }
        - { oid: ifmib.ifInDiscards, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifOutDiscards, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifInErrors, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifOutErrors, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifOperStatus, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifAdminStatus, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifLastChange, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifInMulticastPkts, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifOutMulticastPkts, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifInBroadcastPkts, options: [ "use_snmpget" ] }
        - { oid: ifmib.ifOutBroadcastPkts, options: [ "use_snmpget" ] }
      post_fn: [check_net_data_stage1, rearrange_partial_data, huawei_counters_workaround,
                sum_ifmib_counters_new, check_net_data_sanity]
      skip_key_expr: {ifname: '(NULL|(In)?LoopBack|.+-mplste|Sip|Virtual-Template)'}
    filter: "({Huawei} and not {Huawei NE40E}) and [опрос SNMP] and [частый опрос SNMP]"
    series: network_fast
    interval: 30
    instances: 5

series:
  snmp_poller.network_fast:
    min_interval: 30
  snmp_poller.network:
    min_interval: 30
