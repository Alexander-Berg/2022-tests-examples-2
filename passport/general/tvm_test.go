package tvmapi

import (
	"errors"
	"net/http"
	"net/url"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"

	"a.yandex-team.ru/library/go/yandex/tvm"
	"a.yandex-team.ru/passport/infra/daemons/tvmtool/internal/httpclientmock"
	"a.yandex-team.ru/passport/infra/daemons/tvmtool/internal/tvmtypes"
)

const (
	keysTestResponse    = `1:`
	ticketsTestResponse = `{"252":{"ticket":"3:serv:CNEQEOqy3dAFIgYI-wEQ_AE:FUJBmWDDMCbKTmL5llaLiK3j_L9gxSrwux5EoGv_7fMnsgh14j6I9WbUlpdGNZrEugQLOdBFll8hd84tl6kTVSwu1KFDaMkfEIrzXV4NqHhnoYlm4JvO5olBlgpKdrFA7jb3gFR1qVH3G0OiH4jFaIlVP_cZYFhUfvQdralnjk0"},"253":{"ticket":"3:serv:CNEQEOqy3dAFIgYI-wEQ_QE:Ntk3eoHXVts63D6C8CA2llTLVhO-4xfKacUxCUF40RafJxiu2dytZT2r2sBAxVq1JrwcSR3Qv7On6fAeW2SQkaQcNNtkDrdfh-2j_m6IztNla_teTlLbIvdGw4UZN1KgI005T_aMjQl2JaBnYlIxQjl2ocE9IQb5ZiT1XceYZmg"}}`
)

func TestTvmApi(t *testing.T) {
	client := &http.Client{
		Transport: httpclientmock.TestRoundTripper{
			AnswerFunc: func(req *http.Request) ([]byte, int, error) {
				if req.Method == http.MethodGet && strings.Contains(req.URL.Path, "keys") {
					return []byte(keysTestResponse), http.StatusOK, nil
				}
				if req.Method == http.MethodPost && strings.Contains(req.URL.Path, "ticket") {
					return []byte(ticketsTestResponse), http.StatusOK, nil
				}

				return nil, http.StatusOK, nil
			},
		},
	}

	tvmClient := NewTvmAPI(&url.URL{Scheme: "http", Host: "localhost:1"}, client)

	_, err := tvmClient.GetKeys()
	if err != nil {
		t.Fatal(err)
	}

	ticks, err := tvmClient.GetTickets(
		"6zQnNi5BpraJplR-EFtfVA",
		251,
		[]tvmtypes.Dst{{ID: 252}, {ID: 253}},
	)
	if err != nil {
		t.Fatal(err)
	}

	str, ok := ticks.Tickets[252]
	if !ok {
		t.Fatal("Ticket for dst 252 not found")
	}
	if len(string(str)) == 0 {
		t.Fatal("Ticket for dst 252 is empty")
	}

	str, ok = ticks.Tickets[253]
	if !ok {
		t.Fatal("Ticket for dst 253 not found")
	}
	if len(string(str)) == 0 {
		t.Fatal("Ticket for dst 253 is empty")
	}

	_, ok = ticks.Tickets[254]
	if ok {
		t.Fatal("Ticket for dst 254 is found")
	}
}

func TestUnreachableTvmApi(t *testing.T) {
	terr := errors.New("kek")
	client := &http.Client{
		Transport: httpclientmock.TestRoundTripper{
			AnswerFunc: func(req *http.Request) ([]byte, int, error) {
				if req.Method == http.MethodGet && strings.Contains(req.URL.Path, "keys") {
					return []byte(keysTestResponse), http.StatusOK, terr
				}
				if req.Method == http.MethodPost && strings.Contains(req.URL.Path, "ticket") {
					return []byte(ticketsTestResponse), http.StatusOK, terr
				}
				return nil, http.StatusOK, nil
			},
		},
	}
	tvmClient := NewTvmAPI(&url.URL{Scheme: "http", Host: "localhost:1"}, client)

	if _, err := tvmClient.GetKeys(); err == nil {
		t.Fatalf("GetKeys: err")
	}

	_, err := tvmClient.GetTickets("  sdf", 12, []tvmtypes.Dst{})
	require.EqualError(t, err, "sign request failed: invalid base64 in secret")

	_, err = tvmClient.GetTickets("asdf", 12, []tvmtypes.Dst{})
	require.EqualError(t, err, `Post "http://localhost:1/2/ticket": kek`)
}

func TestBadTvmApi(t *testing.T) {
	client := &http.Client{
		Transport: httpclientmock.TestRoundTripper{
			AnswerFunc: func(req *http.Request) ([]byte, int, error) {
				if req.Method == http.MethodGet && strings.Contains(req.URL.Path, "keys") {
					return []byte(keysTestResponse), http.StatusBadGateway, nil
				}
				if req.Method == http.MethodPost && strings.Contains(req.URL.Path, "ticket") {
					return []byte(ticketsTestResponse), http.StatusBadGateway, nil
				}

				return nil, http.StatusBadGateway, nil
			},
		},
	}

	tvmClient := NewTvmAPI(&url.URL{Scheme: "http", Host: "localhost:1"}, client)

	if _, err := tvmClient.GetKeys(); err == nil {
		t.Fatalf("GetKeys")
	}

	if _, err := tvmClient.GetTickets("asdf", 12, []tvmtypes.Dst{}); err == nil {
		t.Fatalf("GetTickets")
	}
}

func TestBadJsonTickets(t *testing.T) {
	client := &http.Client{
		Transport: httpclientmock.TestRoundTripper{
			AnswerFunc: func(req *http.Request) ([]byte, int, error) {
				return []byte("{asd"), http.StatusOK, nil
			},
		},
	}

	tvmClient := NewTvmAPI(&url.URL{Scheme: "http", Host: "localhost:1"}, client)

	if _, err := tvmClient.GetTickets("asdf", 12, []tvmtypes.Dst{}); err != errorInvalidJSONTickets {
		t.Fatal(err)
	}
}

func TestDstIsNotNumberTickets(t *testing.T) {
	client := &http.Client{
		Transport: httpclientmock.TestRoundTripper{
			AnswerFunc: func(req *http.Request) ([]byte, int, error) {
				return []byte(`{"ololo":{"ticket":"kek"}}`), http.StatusOK, nil
			},
		},
	}

	tvmClient := NewTvmAPI(&url.URL{Scheme: "http", Host: "localhost:1"}, client)

	if _, err := tvmClient.GetTickets("asdf", 12, []tvmtypes.Dst{}); err == nil {
		t.Fatalf("GetTickets: dst is not number")
	}
}

func TestErrorsInTickets(t *testing.T) {
	client := &http.Client{
		Transport: httpclientmock.TestRoundTripper{
			AnswerFunc: func(req *http.Request) ([]byte, int, error) {
				return []byte(`{"123":{"error":"kek1"},"456":{"ticket":"kek2"},"789":{}}`), http.StatusOK, nil
			},
		},
	}

	tvmClient := NewTvmAPI(&url.URL{Scheme: "http", Host: "localhost:1"}, client)

	res, err := tvmClient.GetTickets("asdf", 12, []tvmtypes.Dst{})
	if err != nil {
		t.Fatal(err)
	}

	if le := len(res.Errors); le != 2 {
		t.Fatalf("len(res.Errors): %d", le)
	}
	if str, ok := res.Errors[tvm.ClientID(123)]; !ok {
		t.Fatalf("failed to get error for 123")
	} else if str != "kek1" {
		t.Fatalf("error for 123: %s", str)
	}
	if str, ok := res.Errors[tvm.ClientID(789)]; !ok {
		t.Fatalf("failed to get error for 789")
	} else if str != unknownError {
		t.Fatalf("error for 789: %s", str)
	}

	if le := len(res.Tickets); le != 1 {
		t.Fatalf("len(res.Errors): %d", le)
	}
	if str, ok := res.Tickets[tvm.ClientID(456)]; !ok {
		t.Fatalf("failed to get ticket for 456")
	} else if str != "kek2" {
		t.Fatalf("error for 456: %s", str)
	}
}
