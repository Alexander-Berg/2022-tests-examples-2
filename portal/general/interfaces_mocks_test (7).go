// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package cookies is a generated GoMock package.
package cookies

import (
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockcookieMyParser is a mock of cookieMyParser interface.
type MockcookieMyParser struct {
	ctrl     *gomock.Controller
	recorder *MockcookieMyParserMockRecorder
}

// MockcookieMyParserMockRecorder is the mock recorder for MockcookieMyParser.
type MockcookieMyParserMockRecorder struct {
	mock *MockcookieMyParser
}

// NewMockcookieMyParser creates a new mock instance.
func NewMockcookieMyParser(ctrl *gomock.Controller) *MockcookieMyParser {
	mock := &MockcookieMyParser{ctrl: ctrl}
	mock.recorder = &MockcookieMyParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcookieMyParser) EXPECT() *MockcookieMyParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockcookieMyParser) Parse(value string) (models.MyCookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", value)
	ret0, _ := ret[0].(models.MyCookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockcookieMyParserMockRecorder) Parse(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockcookieMyParser)(nil).Parse), value)
}

// MockcookieParser is a mock of cookieParser interface.
type MockcookieParser struct {
	ctrl     *gomock.Controller
	recorder *MockcookieParserMockRecorder
}

// MockcookieParserMockRecorder is the mock recorder for MockcookieParser.
type MockcookieParserMockRecorder struct {
	mock *MockcookieParser
}

// NewMockcookieParser creates a new mock instance.
func NewMockcookieParser(ctrl *gomock.Controller) *MockcookieParser {
	mock := &MockcookieParser{ctrl: ctrl}
	mock.recorder = &MockcookieParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcookieParser) EXPECT() *MockcookieParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockcookieParser) Parse(raw string) (models.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", raw)
	ret0, _ := ret[0].(models.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockcookieParserMockRecorder) Parse(raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockcookieParser)(nil).Parse), raw)
}

// MockoriginRequestKeeper is a mock of originRequestKeeper interface.
type MockoriginRequestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockoriginRequestKeeperMockRecorder
}

// MockoriginRequestKeeperMockRecorder is the mock recorder for MockoriginRequestKeeper.
type MockoriginRequestKeeperMockRecorder struct {
	mock *MockoriginRequestKeeper
}

// NewMockoriginRequestKeeper creates a new mock instance.
func NewMockoriginRequestKeeper(ctrl *gomock.Controller) *MockoriginRequestKeeper {
	mock := &MockoriginRequestKeeper{ctrl: ctrl}
	mock.recorder = &MockoriginRequestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoriginRequestKeeper) EXPECT() *MockoriginRequestKeeperMockRecorder {
	return m.recorder
}

// GetOriginRequest mocks base method.
func (m *MockoriginRequestKeeper) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockoriginRequestKeeperMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockoriginRequestKeeper)(nil).GetOriginRequest))
}
