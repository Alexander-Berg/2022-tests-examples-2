// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`jsx-babel-plugin is a complex fragment 1`] = `
"import _childMapper from \\"utils/child-mapper\\";
import _attributesGetter from \\"utils/attributes-getter\\";

function templateFunction(type, _temp, execView) {
  return _childMapper.oneElem(\\"<div \\" + _attributesGetter({
    required: true,
    class: \`block-bundle__smile_type_\${type}\`
  }) + \\"></div>\\") + \\"<br>\\" + _childMapper.oneElem(a) + _childMapper.oneElem(_childMapper.oneElem(execView(Component, null)) + \\"b\\" + _childMapper.oneElem(c));
}"
`;

exports[`jsx-babel-plugin is a component with attributes & children 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(_temp, _temp2, execView) {
  return execView(Component, {
    required: true,
    class: \\"block-bundle__smile\\",
    \\"content\\": _childMapper.oneElem(execView(Component2, null)) + _childMapper.oneElem(execView(Component3, null))
  });
}"
`;

exports[`jsx-babel-plugin is a component with attributes 1`] = `
"function templateFunction(_temp, _temp2, execView) {
  return execView(Component, {
    required: true,
    class: \\"block-bundle__smile\\"
  });
}"
`;

exports[`jsx-babel-plugin is a component with children 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(_temp, _temp2, execView) {
  return execView(Component, {
    \\"content\\": _childMapper.oneElem(execView(Component2, null))
  });
}"
`;

exports[`jsx-babel-plugin is a component with children 2 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(_temp, _temp2, execView) {
  return execView(Component, {
    \\"content\\": _childMapper.oneElem(execView(Component2, null)) + _childMapper.oneElem(execView(Component3, null))
  });
}"
`;

exports[`jsx-babel-plugin is a component with dynamic attributes & spread operator & children 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(_temp, _temp2, execView) {
  return execView(Component, Object.assign({
    required: true,
    class: \\"block-bundle__smile\\"
  }, props, {
    title: title
  }, {
    \\"content\\": _childMapper.oneElem(execView(Component2, null)) + _childMapper.oneElem(execView(Component3, null))
  }));
}"
`;

exports[`jsx-babel-plugin is a component with dynamic attributes & spread operators 1`] = `
"function templateFunction(_temp, _temp2, execView) {
  return execView(Component, Object.assign({
    required: true,
    class: \\"block-bundle__smile\\"
  }, props, yetAnotherProps));
}"
`;

exports[`jsx-babel-plugin is a component with dynamic attributes 2 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(_temp, _temp2, execView) {
  return execView(Component, {
    title: _childMapper.oneElem(execView(Component2, null)) + _childMapper.oneElem(execView(Component3, null))
  });
}"
`;

exports[`jsx-babel-plugin is a fragment 1`] = `
"function templateFunction() {
  return \\"<div required class='block-bundle__smile'></div><br>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with attributes & children 1`] = `
"function templateFunction() {
  return \\"<div required class='block-bundle__smile'><br></div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with attributes & component children 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(_temp, _temp2, execView) {
  return \\"<div required class='block-bundle__smile'>\\" + _childMapper.oneElem(execView(Component, null)) + \\"</div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with attributes & variable children 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction() {
  return \\"<div required class='block-bundle__smile'>\\" + (_childMapper.oneElem(a) + _childMapper.oneElem(b) + _childMapper.oneElem(c)) + \\"</div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with attributes 1`] = `
"function templateFunction() {
  return \\"<div required class='block-bundle__smile'></div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with children 1`] = `
"function templateFunction() {
  return \\"<div><br></div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with children call 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction() {
  return \\"<div>\\" + (_childMapper.oneElem(a()) + \\"bc\\") + \\"</div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with dynamic attributes & spread operators 1`] = `
"import _attributesGetter from \\"utils/attributes-getter\\";

function templateFunction() {
  return \\"<div \\" + _attributesGetter(Object.assign({
    required: true,
    class: \\"block-bundle__smile\\"
  }, props, yetAnotherProps)) + \\"></div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with dynamic attributes 1`] = `
"import _attributesGetter from \\"utils/attributes-getter\\";

function templateFunction() {
  return \\"<div \\" + _attributesGetter({
    required: isRequired,
    class: \\"block-bundle__smile\\"
  }) + \\"></div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with html entities 1`] = `
"function templateFunction() {
  return \\"<div>&abc&</div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with mixed children 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction() {
  return \\"<div>\\" + (_childMapper.oneElem(a) + \\"bc\\") + \\"</div>\\";
}"
`;

exports[`jsx-babel-plugin is a tag with static children 1`] = `
"function templateFunction() {
  return \\"<div>abc</div>\\";
}"
`;

exports[`jsx-babel-plugin is an empty component 1`] = `
"function templateFunction(_temp, _temp2, execView) {
  return execView(Component, null);
}"
`;

exports[`jsx-babel-plugin is an empty tag 1`] = `
"function templateFunction() {
  return \\"<div></div>\\";
}"
`;

exports[`jsx-babel-plugin is no have value if boolean positive attribute 1`] = `
"function templateFunction() {
  return \\"<div></div>\\";
}"
`;

exports[`jsx-babel-plugin object destructing under Identifier 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(data, _temp, execView) {
  return execView(Component0, {
    \\"content\\": _childMapper.oneElem(execView(Card__title, null)),
    ...data
  });
}"
`;

exports[`jsx-babel-plugin object destructing under MemberExpression 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function templateFunction(data, _temp, execView) {
  return execView(Component0, {
    \\"content\\": _childMapper.oneElem(execView(Card__title, null)),
    ...data.abacaba
  });
}"
`;

exports[`jsx-babel-plugin plain string 1`] = `
"function templateFunction() {
  return \\"ababacaba\\";
}"
`;

exports[`jsx-babel-plugin should be a paired tag 1`] = `
"function templateFunction() {
  return \\"<div></div>\\";
}"
`;

exports[`jsx-babel-plugin should be a self-closing tag 1`] = `
"function templateFunction() {
  return \\"<br>\\";
}"
`;

exports[`jsx-babel-plugin should be lowercase on non-dynamic attribute 1`] = `
"function templateFunction() {
  return \\"<div abacaba='abacaba'></div>\\";
}"
`;

exports[`jsx-babel-plugin should be without childMapper call expression 1`] = `
"cached(function () {
  return \\"<div abacaba='abacaba'>\\" + \`abacaba\` + \\"</div>\\";
});"
`;

exports[`jsx-babel-plugin should not use attribute getter if attribute is not identifier 1`] = `
"function path() {
  return \\"<path fill-rule='evenodd'/>\\";
}"
`;

exports[`jsx-babel-plugin should use attribute getter if attribute is member expression 1`] = `
"import _attributesGetter from \\"utils/attributes-getter\\";
import _childMapper from \\"utils/child-mapper\\";

function link(data = {}) {
  return \\"<a \\" + _attributesGetter({
    href: data.href
  }) + \\">\\" + _childMapper.oneElem(data.content) + \\"</a>\\";
}"
`;

exports[`jsx-babel-plugin template function should be outermost 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function tmpl2(data, _temp, execView) {
  function elem(num) {
    return execView(Component, {
      \\"content\\": _childMapper.oneElem(num)
    });
  }

  return [1, 2, 3].map(elem);
}"
`;

exports[`jsx-babel-plugin template function should be outermost 2 1`] = `
"import _childMapper from \\"utils/child-mapper\\";

function tmpl1(data, _temp, execView) {
  return [1, 2, 3].map(num => execView(Component, {
    \\"content\\": _childMapper.oneElem(num)
  }));
}"
`;

exports[`jsx-babel-plugin view should have execView as third params of template function on components 1`] = `
"function templateFunction(_temp, _temp2, execView) {
  return execView(Component, {
    abaCaba: \\"abacaba\\"
  });
}"
`;

exports[`jsx-babel-plugin view shouldn't have execView as third params of template function on html elements 1`] = `
"function templateFunction() {
  return \\"<div abacaba='abacaba'></div>\\";
}"
`;

exports[`jsx-babel-plugin view.cached should have execView as second params of template function on components 1`] = `
"cached(function templateFunction(_temp, execView) {
  return execView(Component, {
    abaCaba: \\"abacaba\\"
  });
});"
`;

exports[`jsx-babel-plugin view.cached shouldn't have execView as third params of template function on html elements 1`] = `
"cached(function templateFunction() {
  return \\"<div abacaba='abacaba'></div>\\";
});"
`;
