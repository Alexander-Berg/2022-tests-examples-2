// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package devices is a generated GoMock package.
package devices

import (
	http "net/http"
	reflect "reflect"

	uatraits "a.yandex-team.ru/library/go/yandex/uatraits"
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	gomock "github.com/golang/mock/gomock"
)

// MocktraitsDetector is a mock of traitsDetector interface.
type MocktraitsDetector struct {
	ctrl     *gomock.Controller
	recorder *MocktraitsDetectorMockRecorder
}

// MocktraitsDetectorMockRecorder is the mock recorder for MocktraitsDetector.
type MocktraitsDetectorMockRecorder struct {
	mock *MocktraitsDetector
}

// NewMocktraitsDetector creates a new mock instance.
func NewMocktraitsDetector(ctrl *gomock.Controller) *MocktraitsDetector {
	mock := &MocktraitsDetector{ctrl: ctrl}
	mock.recorder = &MocktraitsDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktraitsDetector) EXPECT() *MocktraitsDetectorMockRecorder {
	return m.recorder
}

// DetectByHeaders mocks base method.
func (m *MocktraitsDetector) DetectByHeaders(httpHeaders http.Header) uatraits.Traits {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectByHeaders", httpHeaders)
	ret0, _ := ret[0].(uatraits.Traits)
	return ret0
}

// DetectByHeaders indicates an expected call of DetectByHeaders.
func (mr *MocktraitsDetectorMockRecorder) DetectByHeaders(httpHeaders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectByHeaders", reflect.TypeOf((*MocktraitsDetector)(nil).DetectByHeaders), httpHeaders)
}

// MockdeviceParser is a mock of deviceParser interface.
type MockdeviceParser struct {
	ctrl     *gomock.Controller
	recorder *MockdeviceParserMockRecorder
}

// MockdeviceParserMockRecorder is the mock recorder for MockdeviceParser.
type MockdeviceParserMockRecorder struct {
	mock *MockdeviceParser
}

// NewMockdeviceParser creates a new mock instance.
func NewMockdeviceParser(ctrl *gomock.Controller) *MockdeviceParser {
	mock := &MockdeviceParser{ctrl: ctrl}
	mock.recorder = &MockdeviceParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeviceParser) EXPECT() *MockdeviceParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockdeviceParser) Parse() (models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockdeviceParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockdeviceParser)(nil).Parse))
}

// SetIsTouchGramps mocks base method.
func (m *MockdeviceParser) SetIsTouchGramps(device models.Device, mordaZone string) models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsTouchGramps", device, mordaZone)
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// SetIsTouchGramps indicates an expected call of SetIsTouchGramps.
func (mr *MockdeviceParserMockRecorder) SetIsTouchGramps(device, mordaZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsTouchGramps", reflect.TypeOf((*MockdeviceParser)(nil).SetIsTouchGramps), device, mordaZone)
}

// MockoriginRequestKeeper is a mock of originRequestKeeper interface.
type MockoriginRequestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockoriginRequestKeeperMockRecorder
}

// MockoriginRequestKeeperMockRecorder is the mock recorder for MockoriginRequestKeeper.
type MockoriginRequestKeeperMockRecorder struct {
	mock *MockoriginRequestKeeper
}

// NewMockoriginRequestKeeper creates a new mock instance.
func NewMockoriginRequestKeeper(ctrl *gomock.Controller) *MockoriginRequestKeeper {
	mock := &MockoriginRequestKeeper{ctrl: ctrl}
	mock.recorder = &MockoriginRequestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoriginRequestKeeper) EXPECT() *MockoriginRequestKeeperMockRecorder {
	return m.recorder
}

// GetOriginRequest mocks base method.
func (m *MockoriginRequestKeeper) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockoriginRequestKeeperMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockoriginRequestKeeper)(nil).GetOriginRequest))
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockappInfoGetter is a mock of appInfoGetter interface.
type MockappInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockappInfoGetterMockRecorder
}

// MockappInfoGetterMockRecorder is the mock recorder for MockappInfoGetter.
type MockappInfoGetterMockRecorder struct {
	mock *MockappInfoGetter
}

// NewMockappInfoGetter creates a new mock instance.
func NewMockappInfoGetter(ctrl *gomock.Controller) *MockappInfoGetter {
	mock := &MockappInfoGetter{ctrl: ctrl}
	mock.recorder = &MockappInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappInfoGetter) EXPECT() *MockappInfoGetterMockRecorder {
	return m.recorder
}

// GetAppInfo mocks base method.
func (m *MockappInfoGetter) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockappInfoGetterMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockappInfoGetter)(nil).GetAppInfo))
}

// MockyaCookiesGetter is a mock of yaCookiesGetter interface.
type MockyaCookiesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockyaCookiesGetterMockRecorder
}

// MockyaCookiesGetterMockRecorder is the mock recorder for MockyaCookiesGetter.
type MockyaCookiesGetterMockRecorder struct {
	mock *MockyaCookiesGetter
}

// NewMockyaCookiesGetter creates a new mock instance.
func NewMockyaCookiesGetter(ctrl *gomock.Controller) *MockyaCookiesGetter {
	mock := &MockyaCookiesGetter{ctrl: ctrl}
	mock.recorder = &MockyaCookiesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyaCookiesGetter) EXPECT() *MockyaCookiesGetterMockRecorder {
	return m.recorder
}

// GetYaCookies mocks base method.
func (m *MockyaCookiesGetter) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockyaCookiesGetterMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockyaCookiesGetter)(nil).GetYaCookies))
}

// MockmordaZoneGetter is a mock of mordaZoneGetter interface.
type MockmordaZoneGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordaZoneGetterMockRecorder
}

// MockmordaZoneGetterMockRecorder is the mock recorder for MockmordaZoneGetter.
type MockmordaZoneGetterMockRecorder struct {
	mock *MockmordaZoneGetter
}

// NewMockmordaZoneGetter creates a new mock instance.
func NewMockmordaZoneGetter(ctrl *gomock.Controller) *MockmordaZoneGetter {
	mock := &MockmordaZoneGetter{ctrl: ctrl}
	mock.recorder = &MockmordaZoneGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaZoneGetter) EXPECT() *MockmordaZoneGetterMockRecorder {
	return m.recorder
}

// GetMordaZone mocks base method.
func (m *MockmordaZoneGetter) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockmordaZoneGetterMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockmordaZoneGetter)(nil).GetMordaZone))
}
