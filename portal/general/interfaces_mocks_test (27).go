// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mordazone is a generated GoMock package.
package mordazone

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	log3 "a.yandex-team.ru/portal/avocado/libs/utils/log3"
	gomock "github.com/golang/mock/gomock"
)

// MockmordazoneParser is a mock of mordazoneParser interface.
type MockmordazoneParser struct {
	ctrl     *gomock.Controller
	recorder *MockmordazoneParserMockRecorder
}

// MockmordazoneParserMockRecorder is the mock recorder for MockmordazoneParser.
type MockmordazoneParserMockRecorder struct {
	mock *MockmordazoneParser
}

// NewMockmordazoneParser creates a new mock instance.
func NewMockmordazoneParser(ctrl *gomock.Controller) *MockmordazoneParser {
	mock := &MockmordazoneParser{ctrl: ctrl}
	mock.recorder = &MockmordazoneParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordazoneParser) EXPECT() *MockmordazoneParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockmordazoneParser) Parse() (models.MordaZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(models.MordaZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockmordazoneParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockmordazoneParser)(nil).Parse))
}

// MockdomainGetter is a mock of domainGetter interface.
type MockdomainGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdomainGetterMockRecorder
}

// MockdomainGetterMockRecorder is the mock recorder for MockdomainGetter.
type MockdomainGetterMockRecorder struct {
	mock *MockdomainGetter
}

// NewMockdomainGetter creates a new mock instance.
func NewMockdomainGetter(ctrl *gomock.Controller) *MockdomainGetter {
	mock := &MockdomainGetter{ctrl: ctrl}
	mock.recorder = &MockdomainGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainGetter) EXPECT() *MockdomainGetterMockRecorder {
	return m.recorder
}

// GetDomain mocks base method.
func (m *MockdomainGetter) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockdomainGetterMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockdomainGetter)(nil).GetDomain))
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockgeoKeeper is a mock of geoKeeper interface.
type MockgeoKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockgeoKeeperMockRecorder
}

// MockgeoKeeperMockRecorder is the mock recorder for MockgeoKeeper.
type MockgeoKeeperMockRecorder struct {
	mock *MockgeoKeeper
}

// NewMockgeoKeeper creates a new mock instance.
func NewMockgeoKeeper(ctrl *gomock.Controller) *MockgeoKeeper {
	mock := &MockgeoKeeper{ctrl: ctrl}
	mock.recorder = &MockgeoKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoKeeper) EXPECT() *MockgeoKeeperMockRecorder {
	return m.recorder
}

// GetGeo mocks base method.
func (m *MockgeoKeeper) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockgeoKeeperMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockgeoKeeper)(nil).GetGeo))
}

// OverrideWithMordaZone mocks base method.
func (m *MockgeoKeeper) OverrideWithMordaZone(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OverrideWithMordaZone", arg0)
}

// OverrideWithMordaZone indicates an expected call of OverrideWithMordaZone.
func (mr *MockgeoKeeperMockRecorder) OverrideWithMordaZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverrideWithMordaZone", reflect.TypeOf((*MockgeoKeeper)(nil).OverrideWithMordaZone), arg0)
}

// MockappInfoGetter is a mock of appInfoGetter interface.
type MockappInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockappInfoGetterMockRecorder
}

// MockappInfoGetterMockRecorder is the mock recorder for MockappInfoGetter.
type MockappInfoGetterMockRecorder struct {
	mock *MockappInfoGetter
}

// NewMockappInfoGetter creates a new mock instance.
func NewMockappInfoGetter(ctrl *gomock.Controller) *MockappInfoGetter {
	mock := &MockappInfoGetter{ctrl: ctrl}
	mock.recorder = &MockappInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappInfoGetter) EXPECT() *MockappInfoGetterMockRecorder {
	return m.recorder
}

// GetAppInfo mocks base method.
func (m *MockappInfoGetter) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockappInfoGetterMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockappInfoGetter)(nil).GetAppInfo))
}

// MockappSearchShortChecker is a mock of appSearchShortChecker interface.
type MockappSearchShortChecker struct {
	ctrl     *gomock.Controller
	recorder *MockappSearchShortCheckerMockRecorder
}

// MockappSearchShortCheckerMockRecorder is the mock recorder for MockappSearchShortChecker.
type MockappSearchShortCheckerMockRecorder struct {
	mock *MockappSearchShortChecker
}

// NewMockappSearchShortChecker creates a new mock instance.
func NewMockappSearchShortChecker(ctrl *gomock.Controller) *MockappSearchShortChecker {
	mock := &MockappSearchShortChecker{ctrl: ctrl}
	mock.recorder = &MockappSearchShortCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappSearchShortChecker) EXPECT() *MockappSearchShortCheckerMockRecorder {
	return m.recorder
}

// IsAppSearchShort mocks base method.
func (m *MockappSearchShortChecker) IsAppSearchShort(appInfo models.AppInfo, apiInfo models.APIInfo, geos []uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAppSearchShort", appInfo, apiInfo, geos)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAppSearchShort indicates an expected call of IsAppSearchShort.
func (mr *MockappSearchShortCheckerMockRecorder) IsAppSearchShort(appInfo, apiInfo, geos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAppSearchShort", reflect.TypeOf((*MockappSearchShortChecker)(nil).IsAppSearchShort), appInfo, apiInfo, geos)
}

// MockmordaZoneMetrics is a mock of mordaZoneMetrics interface.
type MockmordaZoneMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockmordaZoneMetricsMockRecorder
}

// MockmordaZoneMetricsMockRecorder is the mock recorder for MockmordaZoneMetrics.
type MockmordaZoneMetricsMockRecorder struct {
	mock *MockmordaZoneMetrics
}

// NewMockmordaZoneMetrics creates a new mock instance.
func NewMockmordaZoneMetrics(ctrl *gomock.Controller) *MockmordaZoneMetrics {
	mock := &MockmordaZoneMetrics{ctrl: ctrl}
	mock.recorder = &MockmordaZoneMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaZoneMetrics) EXPECT() *MockmordaZoneMetricsMockRecorder {
	return m.recorder
}

// UpdateMordaZone mocks base method.
func (m *MockmordaZoneMetrics) UpdateMordaZone(arg0 string, arg1 log3.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMordaZone", arg0, arg1)
}

// UpdateMordaZone indicates an expected call of UpdateMordaZone.
func (mr *MockmordaZoneMetricsMockRecorder) UpdateMordaZone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMordaZone", reflect.TypeOf((*MockmordaZoneMetrics)(nil).UpdateMordaZone), arg0, arg1)
}

// MockspokSettings is a mock of spokSettings interface.
type MockspokSettings struct {
	ctrl     *gomock.Controller
	recorder *MockspokSettingsMockRecorder
}

// MockspokSettingsMockRecorder is the mock recorder for MockspokSettings.
type MockspokSettingsMockRecorder struct {
	mock *MockspokSettings
}

// NewMockspokSettings creates a new mock instance.
func NewMockspokSettings(ctrl *gomock.Controller) *MockspokSettings {
	mock := &MockspokSettings{ctrl: ctrl}
	mock.recorder = &MockspokSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspokSettings) EXPECT() *MockspokSettingsMockRecorder {
	return m.recorder
}

// GetSpokDomains mocks base method.
func (m *MockspokSettings) GetSpokDomains() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpokDomains")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSpokDomains indicates an expected call of GetSpokDomains.
func (mr *MockspokSettingsMockRecorder) GetSpokDomains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpokDomains", reflect.TypeOf((*MockspokSettings)(nil).GetSpokDomains))
}

// MockdeviceSetter is a mock of deviceSetter interface.
type MockdeviceSetter struct {
	ctrl     *gomock.Controller
	recorder *MockdeviceSetterMockRecorder
}

// MockdeviceSetterMockRecorder is the mock recorder for MockdeviceSetter.
type MockdeviceSetterMockRecorder struct {
	mock *MockdeviceSetter
}

// NewMockdeviceSetter creates a new mock instance.
func NewMockdeviceSetter(ctrl *gomock.Controller) *MockdeviceSetter {
	mock := &MockdeviceSetter{ctrl: ctrl}
	mock.recorder = &MockdeviceSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeviceSetter) EXPECT() *MockdeviceSetterMockRecorder {
	return m.recorder
}

// SetIsTouchGramps mocks base method.
func (m *MockdeviceSetter) SetIsTouchGramps(mordaZone string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIsTouchGramps", mordaZone)
}

// SetIsTouchGramps indicates an expected call of SetIsTouchGramps.
func (mr *MockdeviceSetterMockRecorder) SetIsTouchGramps(mordaZone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsTouchGramps", reflect.TypeOf((*MockdeviceSetter)(nil).SetIsTouchGramps), mordaZone)
}
