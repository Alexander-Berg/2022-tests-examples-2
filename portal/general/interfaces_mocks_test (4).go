// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package base is a generated GoMock package.
package base

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	log3 "a.yandex-team.ru/portal/avocado/libs/utils/log3"
	exports "a.yandex-team.ru/portal/avocado/morda-go/pkg/exports"
	morda_data "a.yandex-team.ru/portal/avocado/proto/morda_data"
	gomock "github.com/golang/mock/gomock"
)

// MockoriginRequestKeeper is a mock of originRequestKeeper interface.
type MockoriginRequestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockoriginRequestKeeperMockRecorder
}

// MockoriginRequestKeeperMockRecorder is the mock recorder for MockoriginRequestKeeper.
type MockoriginRequestKeeperMockRecorder struct {
	mock *MockoriginRequestKeeper
}

// NewMockoriginRequestKeeper creates a new mock instance.
func NewMockoriginRequestKeeper(ctrl *gomock.Controller) *MockoriginRequestKeeper {
	mock := &MockoriginRequestKeeper{ctrl: ctrl}
	mock.recorder = &MockoriginRequestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoriginRequestKeeper) EXPECT() *MockoriginRequestKeeperMockRecorder {
	return m.recorder
}

// GetOriginRequest mocks base method.
func (m *MockoriginRequestKeeper) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockoriginRequestKeeperMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockoriginRequestKeeper)(nil).GetOriginRequest))
}

// MockdeviceKeeper is a mock of deviceKeeper interface.
type MockdeviceKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockdeviceKeeperMockRecorder
}

// MockdeviceKeeperMockRecorder is the mock recorder for MockdeviceKeeper.
type MockdeviceKeeperMockRecorder struct {
	mock *MockdeviceKeeper
}

// NewMockdeviceKeeper creates a new mock instance.
func NewMockdeviceKeeper(ctrl *gomock.Controller) *MockdeviceKeeper {
	mock := &MockdeviceKeeper{ctrl: ctrl}
	mock.recorder = &MockdeviceKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeviceKeeper) EXPECT() *MockdeviceKeeperMockRecorder {
	return m.recorder
}

// ForceDevice mocks base method.
func (m *MockdeviceKeeper) ForceDevice(arg0 models.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceDevice", arg0)
}

// ForceDevice indicates an expected call of ForceDevice.
func (mr *MockdeviceKeeperMockRecorder) ForceDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDevice", reflect.TypeOf((*MockdeviceKeeper)(nil).ForceDevice), arg0)
}

// GetDevice mocks base method.
func (m *MockdeviceKeeper) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockdeviceKeeperMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockdeviceKeeper)(nil).GetDevice))
}

// GetDeviceIfUpdated mocks base method.
func (m *MockdeviceKeeper) GetDeviceIfUpdated() *morda_data.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceIfUpdated")
	ret0, _ := ret[0].(*morda_data.Device)
	return ret0
}

// GetDeviceIfUpdated indicates an expected call of GetDeviceIfUpdated.
func (mr *MockdeviceKeeperMockRecorder) GetDeviceIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceIfUpdated", reflect.TypeOf((*MockdeviceKeeper)(nil).GetDeviceIfUpdated))
}

// GetDeviceOrErr mocks base method.
func (m *MockdeviceKeeper) GetDeviceOrErr() (models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOrErr")
	ret0, _ := ret[0].(models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceOrErr indicates an expected call of GetDeviceOrErr.
func (mr *MockdeviceKeeperMockRecorder) GetDeviceOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOrErr", reflect.TypeOf((*MockdeviceKeeper)(nil).GetDeviceOrErr))
}

// MockclidKeeper is a mock of clidKeeper interface.
type MockclidKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockclidKeeperMockRecorder
}

// MockclidKeeperMockRecorder is the mock recorder for MockclidKeeper.
type MockclidKeeperMockRecorder struct {
	mock *MockclidKeeper
}

// NewMockclidKeeper creates a new mock instance.
func NewMockclidKeeper(ctrl *gomock.Controller) *MockclidKeeper {
	mock := &MockclidKeeper{ctrl: ctrl}
	mock.recorder = &MockclidKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclidKeeper) EXPECT() *MockclidKeeperMockRecorder {
	return m.recorder
}

// ForceClid mocks base method.
func (m *MockclidKeeper) ForceClid(arg0 models.Clid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceClid", arg0)
}

// ForceClid indicates an expected call of ForceClid.
func (mr *MockclidKeeperMockRecorder) ForceClid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceClid", reflect.TypeOf((*MockclidKeeper)(nil).ForceClid), arg0)
}

// GetClid mocks base method.
func (m *MockclidKeeper) GetClid() models.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClid")
	ret0, _ := ret[0].(models.Clid)
	return ret0
}

// GetClid indicates an expected call of GetClid.
func (mr *MockclidKeeperMockRecorder) GetClid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClid", reflect.TypeOf((*MockclidKeeper)(nil).GetClid))
}

// GetClidIfUpdated mocks base method.
func (m *MockclidKeeper) GetClidIfUpdated() *morda_data.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClidIfUpdated")
	ret0, _ := ret[0].(*morda_data.Clid)
	return ret0
}

// GetClidIfUpdated indicates an expected call of GetClidIfUpdated.
func (mr *MockclidKeeperMockRecorder) GetClidIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClidIfUpdated", reflect.TypeOf((*MockclidKeeper)(nil).GetClidIfUpdated))
}

// MockaadbKeeper is a mock of aadbKeeper interface.
type MockaadbKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockaadbKeeperMockRecorder
}

// MockaadbKeeperMockRecorder is the mock recorder for MockaadbKeeper.
type MockaadbKeeperMockRecorder struct {
	mock *MockaadbKeeper
}

// NewMockaadbKeeper creates a new mock instance.
func NewMockaadbKeeper(ctrl *gomock.Controller) *MockaadbKeeper {
	mock := &MockaadbKeeper{ctrl: ctrl}
	mock.recorder = &MockaadbKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaadbKeeper) EXPECT() *MockaadbKeeperMockRecorder {
	return m.recorder
}

// GetAADB mocks base method.
func (m *MockaadbKeeper) GetAADB() models.AADB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAADB")
	ret0, _ := ret[0].(models.AADB)
	return ret0
}

// GetAADB indicates an expected call of GetAADB.
func (mr *MockaadbKeeperMockRecorder) GetAADB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAADB", reflect.TypeOf((*MockaadbKeeper)(nil).GetAADB))
}

// GetAntiAdblockIfUpdated mocks base method.
func (m *MockaadbKeeper) GetAntiAdblockIfUpdated() *morda_data.AntiAdblock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAntiAdblockIfUpdated")
	ret0, _ := ret[0].(*morda_data.AntiAdblock)
	return ret0
}

// GetAntiAdblockIfUpdated indicates an expected call of GetAntiAdblockIfUpdated.
func (mr *MockaadbKeeperMockRecorder) GetAntiAdblockIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAntiAdblockIfUpdated", reflect.TypeOf((*MockaadbKeeper)(nil).GetAntiAdblockIfUpdated))
}

// MockyaCookiesKeeper is a mock of yaCookiesKeeper interface.
type MockyaCookiesKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockyaCookiesKeeperMockRecorder
}

// MockyaCookiesKeeperMockRecorder is the mock recorder for MockyaCookiesKeeper.
type MockyaCookiesKeeperMockRecorder struct {
	mock *MockyaCookiesKeeper
}

// NewMockyaCookiesKeeper creates a new mock instance.
func NewMockyaCookiesKeeper(ctrl *gomock.Controller) *MockyaCookiesKeeper {
	mock := &MockyaCookiesKeeper{ctrl: ctrl}
	mock.recorder = &MockyaCookiesKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyaCookiesKeeper) EXPECT() *MockyaCookiesKeeperMockRecorder {
	return m.recorder
}

// ForceYandexUID mocks base method.
func (m *MockyaCookiesKeeper) ForceYandexUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceYandexUID", arg0)
}

// ForceYandexUID indicates an expected call of ForceYandexUID.
func (mr *MockyaCookiesKeeperMockRecorder) ForceYandexUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceYandexUID", reflect.TypeOf((*MockyaCookiesKeeper)(nil).ForceYandexUID), arg0)
}

// GetYaCookies mocks base method.
func (m *MockyaCookiesKeeper) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockyaCookiesKeeperMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockyaCookiesKeeper)(nil).GetYaCookies))
}

// GetYaCookiesIfUpdated mocks base method.
func (m *MockyaCookiesKeeper) GetYaCookiesIfUpdated() *morda_data.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookiesIfUpdated")
	ret0, _ := ret[0].(*morda_data.YaCookies)
	return ret0
}

// GetYaCookiesIfUpdated indicates an expected call of GetYaCookiesIfUpdated.
func (mr *MockyaCookiesKeeperMockRecorder) GetYaCookiesIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookiesIfUpdated", reflect.TypeOf((*MockyaCookiesKeeper)(nil).GetYaCookiesIfUpdated))
}

// GetYaCookiesOrErr mocks base method.
func (m *MockyaCookiesKeeper) GetYaCookiesOrErr() (models.YaCookies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookiesOrErr")
	ret0, _ := ret[0].(models.YaCookies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYaCookiesOrErr indicates an expected call of GetYaCookiesOrErr.
func (mr *MockyaCookiesKeeperMockRecorder) GetYaCookiesOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookiesOrErr", reflect.TypeOf((*MockyaCookiesKeeper)(nil).GetYaCookiesOrErr))
}

// MockgeoKeeper is a mock of geoKeeper interface.
type MockgeoKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockgeoKeeperMockRecorder
}

// MockgeoKeeperMockRecorder is the mock recorder for MockgeoKeeper.
type MockgeoKeeperMockRecorder struct {
	mock *MockgeoKeeper
}

// NewMockgeoKeeper creates a new mock instance.
func NewMockgeoKeeper(ctrl *gomock.Controller) *MockgeoKeeper {
	mock := &MockgeoKeeper{ctrl: ctrl}
	mock.recorder = &MockgeoKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoKeeper) EXPECT() *MockgeoKeeperMockRecorder {
	return m.recorder
}

// ForceGeo mocks base method.
func (m *MockgeoKeeper) ForceGeo(arg0 models.Geo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceGeo", arg0)
}

// ForceGeo indicates an expected call of ForceGeo.
func (mr *MockgeoKeeperMockRecorder) ForceGeo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceGeo", reflect.TypeOf((*MockgeoKeeper)(nil).ForceGeo), arg0)
}

// GetGeo mocks base method.
func (m *MockgeoKeeper) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockgeoKeeperMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockgeoKeeper)(nil).GetGeo))
}

// GetGeoIfUpdated mocks base method.
func (m *MockgeoKeeper) GetGeoIfUpdated() *morda_data.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoIfUpdated")
	ret0, _ := ret[0].(*morda_data.Geo)
	return ret0
}

// GetGeoIfUpdated indicates an expected call of GetGeoIfUpdated.
func (mr *MockgeoKeeperMockRecorder) GetGeoIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoIfUpdated", reflect.TypeOf((*MockgeoKeeper)(nil).GetGeoIfUpdated))
}

// GetGeoOrErr mocks base method.
func (m *MockgeoKeeper) GetGeoOrErr() (models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoOrErr")
	ret0, _ := ret[0].(models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoOrErr indicates an expected call of GetGeoOrErr.
func (mr *MockgeoKeeperMockRecorder) GetGeoOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoOrErr", reflect.TypeOf((*MockgeoKeeper)(nil).GetGeoOrErr))
}

// OverrideWithMordaZone mocks base method.
func (m *MockgeoKeeper) OverrideWithMordaZone(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OverrideWithMordaZone", arg0)
}

// OverrideWithMordaZone indicates an expected call of OverrideWithMordaZone.
func (mr *MockgeoKeeperMockRecorder) OverrideWithMordaZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverrideWithMordaZone", reflect.TypeOf((*MockgeoKeeper)(nil).OverrideWithMordaZone), arg0)
}

// MockabFlagsKeeper is a mock of abFlagsKeeper interface.
type MockabFlagsKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockabFlagsKeeperMockRecorder
}

// MockabFlagsKeeperMockRecorder is the mock recorder for MockabFlagsKeeper.
type MockabFlagsKeeperMockRecorder struct {
	mock *MockabFlagsKeeper
}

// NewMockabFlagsKeeper creates a new mock instance.
func NewMockabFlagsKeeper(ctrl *gomock.Controller) *MockabFlagsKeeper {
	mock := &MockabFlagsKeeper{ctrl: ctrl}
	mock.recorder = &MockabFlagsKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockabFlagsKeeper) EXPECT() *MockabFlagsKeeperMockRecorder {
	return m.recorder
}

// ForceABFlags mocks base method.
func (m *MockabFlagsKeeper) ForceABFlags(arg0 models.ABFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceABFlags", arg0)
}

// ForceABFlags indicates an expected call of ForceABFlags.
func (mr *MockabFlagsKeeperMockRecorder) ForceABFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceABFlags", reflect.TypeOf((*MockabFlagsKeeper)(nil).ForceABFlags), arg0)
}

// GetFlags mocks base method.
func (m *MockabFlagsKeeper) GetFlags() models.ABFlags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlags")
	ret0, _ := ret[0].(models.ABFlags)
	return ret0
}

// GetFlags indicates an expected call of GetFlags.
func (mr *MockabFlagsKeeperMockRecorder) GetFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlags", reflect.TypeOf((*MockabFlagsKeeper)(nil).GetFlags))
}

// GetFlagsIfUpdated mocks base method.
func (m *MockabFlagsKeeper) GetFlagsIfUpdated() *morda_data.ABFlagsContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsIfUpdated")
	ret0, _ := ret[0].(*morda_data.ABFlagsContext)
	return ret0
}

// GetFlagsIfUpdated indicates an expected call of GetFlagsIfUpdated.
func (mr *MockabFlagsKeeperMockRecorder) GetFlagsIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsIfUpdated", reflect.TypeOf((*MockabFlagsKeeper)(nil).GetFlagsIfUpdated))
}

// GetFlagsOrErr mocks base method.
func (m *MockabFlagsKeeper) GetFlagsOrErr() (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsOrErr")
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsOrErr indicates an expected call of GetFlagsOrErr.
func (mr *MockabFlagsKeeperMockRecorder) GetFlagsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsOrErr", reflect.TypeOf((*MockabFlagsKeeper)(nil).GetFlagsOrErr))
}

// RefreshABFlags mocks base method.
func (m *MockabFlagsKeeper) RefreshABFlags() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshABFlags")
}

// RefreshABFlags indicates an expected call of RefreshABFlags.
func (mr *MockabFlagsKeeperMockRecorder) RefreshABFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshABFlags", reflect.TypeOf((*MockabFlagsKeeper)(nil).RefreshABFlags))
}

// MockrequestKeeper is a mock of requestKeeper interface.
type MockrequestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockrequestKeeperMockRecorder
}

// MockrequestKeeperMockRecorder is the mock recorder for MockrequestKeeper.
type MockrequestKeeperMockRecorder struct {
	mock *MockrequestKeeper
}

// NewMockrequestKeeper creates a new mock instance.
func NewMockrequestKeeper(ctrl *gomock.Controller) *MockrequestKeeper {
	mock := &MockrequestKeeper{ctrl: ctrl}
	mock.recorder = &MockrequestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestKeeper) EXPECT() *MockrequestKeeperMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestKeeper) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestKeeperMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestKeeper)(nil).GetRequest))
}

// GetRequestIfUpdated mocks base method.
func (m *MockrequestKeeper) GetRequestIfUpdated() *morda_data.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestIfUpdated")
	ret0, _ := ret[0].(*morda_data.Request)
	return ret0
}

// GetRequestIfUpdated indicates an expected call of GetRequestIfUpdated.
func (mr *MockrequestKeeperMockRecorder) GetRequestIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestIfUpdated", reflect.TypeOf((*MockrequestKeeper)(nil).GetRequestIfUpdated))
}

// GetRequestOrErr mocks base method.
func (m *MockrequestKeeper) GetRequestOrErr() (models.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestOrErr")
	ret0, _ := ret[0].(models.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestOrErr indicates an expected call of GetRequestOrErr.
func (mr *MockrequestKeeperMockRecorder) GetRequestOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestOrErr", reflect.TypeOf((*MockrequestKeeper)(nil).GetRequestOrErr))
}

// IsSID669ByAuth mocks base method.
func (m *MockrequestKeeper) IsSID669ByAuth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSID669ByAuth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSID669ByAuth indicates an expected call of IsSID669ByAuth.
func (mr *MockrequestKeeperMockRecorder) IsSID669ByAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSID669ByAuth", reflect.TypeOf((*MockrequestKeeper)(nil).IsSID669ByAuth))
}

// SetIsStaffLogin mocks base method.
func (m *MockrequestKeeper) SetIsStaffLogin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIsStaffLogin")
}

// SetIsStaffLogin indicates an expected call of SetIsStaffLogin.
func (mr *MockrequestKeeperMockRecorder) SetIsStaffLogin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsStaffLogin", reflect.TypeOf((*MockrequestKeeper)(nil).SetIsStaffLogin))
}

// MockmordazoneKeeper is a mock of mordazoneKeeper interface.
type MockmordazoneKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockmordazoneKeeperMockRecorder
}

// MockmordazoneKeeperMockRecorder is the mock recorder for MockmordazoneKeeper.
type MockmordazoneKeeperMockRecorder struct {
	mock *MockmordazoneKeeper
}

// NewMockmordazoneKeeper creates a new mock instance.
func NewMockmordazoneKeeper(ctrl *gomock.Controller) *MockmordazoneKeeper {
	mock := &MockmordazoneKeeper{ctrl: ctrl}
	mock.recorder = &MockmordazoneKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordazoneKeeper) EXPECT() *MockmordazoneKeeperMockRecorder {
	return m.recorder
}

// ForceMordaZone mocks base method.
func (m *MockmordazoneKeeper) ForceMordaZone(arg0 models.MordaZone) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceMordaZone", arg0)
}

// ForceMordaZone indicates an expected call of ForceMordaZone.
func (mr *MockmordazoneKeeperMockRecorder) ForceMordaZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceMordaZone", reflect.TypeOf((*MockmordazoneKeeper)(nil).ForceMordaZone), arg0)
}

// GetMordaZone mocks base method.
func (m *MockmordazoneKeeper) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockmordazoneKeeperMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockmordazoneKeeper)(nil).GetMordaZone))
}

// GetMordaZoneIfUpdated mocks base method.
func (m *MockmordazoneKeeper) GetMordaZoneIfUpdated() *morda_data.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZoneIfUpdated")
	ret0, _ := ret[0].(*morda_data.MordaZone)
	return ret0
}

// GetMordaZoneIfUpdated indicates an expected call of GetMordaZoneIfUpdated.
func (mr *MockmordazoneKeeperMockRecorder) GetMordaZoneIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZoneIfUpdated", reflect.TypeOf((*MockmordazoneKeeper)(nil).GetMordaZoneIfUpdated))
}

// GetMordaZoneOrErr mocks base method.
func (m *MockmordazoneKeeper) GetMordaZoneOrErr() (models.MordaZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZoneOrErr")
	ret0, _ := ret[0].(models.MordaZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMordaZoneOrErr indicates an expected call of GetMordaZoneOrErr.
func (mr *MockmordazoneKeeperMockRecorder) GetMordaZoneOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZoneOrErr", reflect.TypeOf((*MockmordazoneKeeper)(nil).GetMordaZoneOrErr))
}

// RefreshMordaZone mocks base method.
func (m *MockmordazoneKeeper) RefreshMordaZone() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshMordaZone")
}

// RefreshMordaZone indicates an expected call of RefreshMordaZone.
func (mr *MockmordazoneKeeperMockRecorder) RefreshMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMordaZone", reflect.TypeOf((*MockmordazoneKeeper)(nil).RefreshMordaZone))
}

// MockdomainKeeper is a mock of domainKeeper interface.
type MockdomainKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockdomainKeeperMockRecorder
}

// MockdomainKeeperMockRecorder is the mock recorder for MockdomainKeeper.
type MockdomainKeeperMockRecorder struct {
	mock *MockdomainKeeper
}

// NewMockdomainKeeper creates a new mock instance.
func NewMockdomainKeeper(ctrl *gomock.Controller) *MockdomainKeeper {
	mock := &MockdomainKeeper{ctrl: ctrl}
	mock.recorder = &MockdomainKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainKeeper) EXPECT() *MockdomainKeeperMockRecorder {
	return m.recorder
}

// ForceDomain mocks base method.
func (m *MockdomainKeeper) ForceDomain(arg0 models.Domain) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceDomain", arg0)
}

// ForceDomain indicates an expected call of ForceDomain.
func (mr *MockdomainKeeperMockRecorder) ForceDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDomain", reflect.TypeOf((*MockdomainKeeper)(nil).ForceDomain), arg0)
}

// GetDomain mocks base method.
func (m *MockdomainKeeper) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockdomainKeeperMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockdomainKeeper)(nil).GetDomain))
}

// GetDomainIfUpdated mocks base method.
func (m *MockdomainKeeper) GetDomainIfUpdated() *morda_data.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainIfUpdated")
	ret0, _ := ret[0].(*morda_data.Domain)
	return ret0
}

// GetDomainIfUpdated indicates an expected call of GetDomainIfUpdated.
func (mr *MockdomainKeeperMockRecorder) GetDomainIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainIfUpdated", reflect.TypeOf((*MockdomainKeeper)(nil).GetDomainIfUpdated))
}

// GetDomainOrErr mocks base method.
func (m *MockdomainKeeper) GetDomainOrErr() (models.Domain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainOrErr")
	ret0, _ := ret[0].(models.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainOrErr indicates an expected call of GetDomainOrErr.
func (mr *MockdomainKeeperMockRecorder) GetDomainOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainOrErr", reflect.TypeOf((*MockdomainKeeper)(nil).GetDomainOrErr))
}

// RefreshDomain mocks base method.
func (m *MockdomainKeeper) RefreshDomain() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshDomain")
}

// RefreshDomain indicates an expected call of RefreshDomain.
func (mr *MockdomainKeeperMockRecorder) RefreshDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshDomain", reflect.TypeOf((*MockdomainKeeper)(nil).RefreshDomain))
}

// MockappInfoKeeper is a mock of appInfoKeeper interface.
type MockappInfoKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockappInfoKeeperMockRecorder
}

// MockappInfoKeeperMockRecorder is the mock recorder for MockappInfoKeeper.
type MockappInfoKeeperMockRecorder struct {
	mock *MockappInfoKeeper
}

// NewMockappInfoKeeper creates a new mock instance.
func NewMockappInfoKeeper(ctrl *gomock.Controller) *MockappInfoKeeper {
	mock := &MockappInfoKeeper{ctrl: ctrl}
	mock.recorder = &MockappInfoKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappInfoKeeper) EXPECT() *MockappInfoKeeperMockRecorder {
	return m.recorder
}

// GetAppInfo mocks base method.
func (m *MockappInfoKeeper) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockappInfoKeeperMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockappInfoKeeper)(nil).GetAppInfo))
}

// GetAppInfoIfUpdated mocks base method.
func (m *MockappInfoKeeper) GetAppInfoIfUpdated() *morda_data.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfoIfUpdated")
	ret0, _ := ret[0].(*morda_data.AppInfo)
	return ret0
}

// GetAppInfoIfUpdated indicates an expected call of GetAppInfoIfUpdated.
func (mr *MockappInfoKeeperMockRecorder) GetAppInfoIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfoIfUpdated", reflect.TypeOf((*MockappInfoKeeper)(nil).GetAppInfoIfUpdated))
}

// MockcspKeeper is a mock of cspKeeper interface.
type MockcspKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockcspKeeperMockRecorder
}

// MockcspKeeperMockRecorder is the mock recorder for MockcspKeeper.
type MockcspKeeperMockRecorder struct {
	mock *MockcspKeeper
}

// NewMockcspKeeper creates a new mock instance.
func NewMockcspKeeper(ctrl *gomock.Controller) *MockcspKeeper {
	mock := &MockcspKeeper{ctrl: ctrl}
	mock.recorder = &MockcspKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcspKeeper) EXPECT() *MockcspKeeperMockRecorder {
	return m.recorder
}

// GetCSP mocks base method.
func (m *MockcspKeeper) GetCSP() models.CSP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSP")
	ret0, _ := ret[0].(models.CSP)
	return ret0
}

// GetCSP indicates an expected call of GetCSP.
func (mr *MockcspKeeperMockRecorder) GetCSP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSP", reflect.TypeOf((*MockcspKeeper)(nil).GetCSP))
}

// GetCSPIfUpdated mocks base method.
func (m *MockcspKeeper) GetCSPIfUpdated() *morda_data.CSP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSPIfUpdated")
	ret0, _ := ret[0].(*morda_data.CSP)
	return ret0
}

// GetCSPIfUpdated indicates an expected call of GetCSPIfUpdated.
func (mr *MockcspKeeperMockRecorder) GetCSPIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSPIfUpdated", reflect.TypeOf((*MockcspKeeper)(nil).GetCSPIfUpdated))
}

// MockcookieKeeper is a mock of cookieKeeper interface.
type MockcookieKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockcookieKeeperMockRecorder
}

// MockcookieKeeperMockRecorder is the mock recorder for MockcookieKeeper.
type MockcookieKeeperMockRecorder struct {
	mock *MockcookieKeeper
}

// NewMockcookieKeeper creates a new mock instance.
func NewMockcookieKeeper(ctrl *gomock.Controller) *MockcookieKeeper {
	mock := &MockcookieKeeper{ctrl: ctrl}
	mock.recorder = &MockcookieKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcookieKeeper) EXPECT() *MockcookieKeeperMockRecorder {
	return m.recorder
}

// GetCookie mocks base method.
func (m *MockcookieKeeper) GetCookie() models.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie")
	ret0, _ := ret[0].(models.Cookie)
	return ret0
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockcookieKeeperMockRecorder) GetCookie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockcookieKeeper)(nil).GetCookie))
}

// GetCookieIfUpdated mocks base method.
func (m *MockcookieKeeper) GetCookieIfUpdated() *morda_data.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookieIfUpdated")
	ret0, _ := ret[0].(*morda_data.Cookie)
	return ret0
}

// GetCookieIfUpdated indicates an expected call of GetCookieIfUpdated.
func (mr *MockcookieKeeperMockRecorder) GetCookieIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookieIfUpdated", reflect.TypeOf((*MockcookieKeeper)(nil).GetCookieIfUpdated))
}

// MockmordaContentKeeper is a mock of mordaContentKeeper interface.
type MockmordaContentKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentKeeperMockRecorder
}

// MockmordaContentKeeperMockRecorder is the mock recorder for MockmordaContentKeeper.
type MockmordaContentKeeperMockRecorder struct {
	mock *MockmordaContentKeeper
}

// NewMockmordaContentKeeper creates a new mock instance.
func NewMockmordaContentKeeper(ctrl *gomock.Controller) *MockmordaContentKeeper {
	mock := &MockmordaContentKeeper{ctrl: ctrl}
	mock.recorder = &MockmordaContentKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentKeeper) EXPECT() *MockmordaContentKeeperMockRecorder {
	return m.recorder
}

// ForceMordaContent mocks base method.
func (m *MockmordaContentKeeper) ForceMordaContent(newContent models.MordaContent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceMordaContent", newContent)
}

// ForceMordaContent indicates an expected call of ForceMordaContent.
func (mr *MockmordaContentKeeperMockRecorder) ForceMordaContent(newContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceMordaContent", reflect.TypeOf((*MockmordaContentKeeper)(nil).ForceMordaContent), newContent)
}

// GetMordaContent mocks base method.
func (m *MockmordaContentKeeper) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockmordaContentKeeperMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockmordaContentKeeper)(nil).GetMordaContent))
}

// GetMordaContentIfUpdated mocks base method.
func (m *MockmordaContentKeeper) GetMordaContentIfUpdated() *morda_data.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContentIfUpdated")
	ret0, _ := ret[0].(*morda_data.MordaContent)
	return ret0
}

// GetMordaContentIfUpdated indicates an expected call of GetMordaContentIfUpdated.
func (mr *MockmordaContentKeeperMockRecorder) GetMordaContentIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContentIfUpdated", reflect.TypeOf((*MockmordaContentKeeper)(nil).GetMordaContentIfUpdated))
}

// GetMordaContentOrErr mocks base method.
func (m *MockmordaContentKeeper) GetMordaContentOrErr() (models.MordaContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContentOrErr")
	ret0, _ := ret[0].(models.MordaContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMordaContentOrErr indicates an expected call of GetMordaContentOrErr.
func (mr *MockmordaContentKeeperMockRecorder) GetMordaContentOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContentOrErr", reflect.TypeOf((*MockmordaContentKeeper)(nil).GetMordaContentOrErr))
}

// MocktimeKeeper is a mock of timeKeeper interface.
type MocktimeKeeper struct {
	ctrl     *gomock.Controller
	recorder *MocktimeKeeperMockRecorder
}

// MocktimeKeeperMockRecorder is the mock recorder for MocktimeKeeper.
type MocktimeKeeperMockRecorder struct {
	mock *MocktimeKeeper
}

// NewMocktimeKeeper creates a new mock instance.
func NewMocktimeKeeper(ctrl *gomock.Controller) *MocktimeKeeper {
	mock := &MocktimeKeeper{ctrl: ctrl}
	mock.recorder = &MocktimeKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeKeeper) EXPECT() *MocktimeKeeperMockRecorder {
	return m.recorder
}

// GetTime mocks base method.
func (m *MocktimeKeeper) GetTime() *models.TimeData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(*models.TimeData)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MocktimeKeeperMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MocktimeKeeper)(nil).GetTime))
}

// GetTimeIfUpdated mocks base method.
func (m *MocktimeKeeper) GetTimeIfUpdated() *morda_data.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeIfUpdated")
	ret0, _ := ret[0].(*morda_data.Time)
	return ret0
}

// GetTimeIfUpdated indicates an expected call of GetTimeIfUpdated.
func (mr *MocktimeKeeperMockRecorder) GetTimeIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeIfUpdated", reflect.TypeOf((*MocktimeKeeper)(nil).GetTimeIfUpdated))
}

// Init mocks base method.
func (m *MocktimeKeeper) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MocktimeKeeperMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MocktimeKeeper)(nil).Init))
}

// RefreshTimeLocation mocks base method.
func (m *MocktimeKeeper) RefreshTimeLocation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshTimeLocation")
}

// RefreshTimeLocation indicates an expected call of RefreshTimeLocation.
func (mr *MocktimeKeeperMockRecorder) RefreshTimeLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTimeLocation", reflect.TypeOf((*MocktimeKeeper)(nil).RefreshTimeLocation))
}

// SyncTime mocks base method.
func (m *MocktimeKeeper) SyncTime(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SyncTime", arg0)
}

// SyncTime indicates an expected call of SyncTime.
func (mr *MocktimeKeeperMockRecorder) SyncTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTime", reflect.TypeOf((*MocktimeKeeper)(nil).SyncTime), arg0)
}

// MocklocaleKeeper is a mock of localeKeeper interface.
type MocklocaleKeeper struct {
	ctrl     *gomock.Controller
	recorder *MocklocaleKeeperMockRecorder
}

// MocklocaleKeeperMockRecorder is the mock recorder for MocklocaleKeeper.
type MocklocaleKeeperMockRecorder struct {
	mock *MocklocaleKeeper
}

// NewMocklocaleKeeper creates a new mock instance.
func NewMocklocaleKeeper(ctrl *gomock.Controller) *MocklocaleKeeper {
	mock := &MocklocaleKeeper{ctrl: ctrl}
	mock.recorder = &MocklocaleKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklocaleKeeper) EXPECT() *MocklocaleKeeperMockRecorder {
	return m.recorder
}

// ForceLocale mocks base method.
func (m *MocklocaleKeeper) ForceLocale(arg0 models.Locale) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceLocale", arg0)
}

// ForceLocale indicates an expected call of ForceLocale.
func (mr *MocklocaleKeeperMockRecorder) ForceLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceLocale", reflect.TypeOf((*MocklocaleKeeper)(nil).ForceLocale), arg0)
}

// GetLocale mocks base method.
func (m *MocklocaleKeeper) GetLocale() models.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocale")
	ret0, _ := ret[0].(models.Locale)
	return ret0
}

// GetLocale indicates an expected call of GetLocale.
func (mr *MocklocaleKeeperMockRecorder) GetLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocale", reflect.TypeOf((*MocklocaleKeeper)(nil).GetLocale))
}

// GetLocaleIfUpdated mocks base method.
func (m *MocklocaleKeeper) GetLocaleIfUpdated() *morda_data.Lang {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocaleIfUpdated")
	ret0, _ := ret[0].(*morda_data.Lang)
	return ret0
}

// GetLocaleIfUpdated indicates an expected call of GetLocaleIfUpdated.
func (mr *MocklocaleKeeperMockRecorder) GetLocaleIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocaleIfUpdated", reflect.TypeOf((*MocklocaleKeeper)(nil).GetLocaleIfUpdated))
}

// GetLocaleOrErr mocks base method.
func (m *MocklocaleKeeper) GetLocaleOrErr() (models.Locale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocaleOrErr")
	ret0, _ := ret[0].(models.Locale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocaleOrErr indicates an expected call of GetLocaleOrErr.
func (mr *MocklocaleKeeperMockRecorder) GetLocaleOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocaleOrErr", reflect.TypeOf((*MocklocaleKeeper)(nil).GetLocaleOrErr))
}

// RefreshLocale mocks base method.
func (m *MocklocaleKeeper) RefreshLocale() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshLocale")
}

// RefreshLocale indicates an expected call of RefreshLocale.
func (mr *MocklocaleKeeperMockRecorder) RefreshLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshLocale", reflect.TypeOf((*MocklocaleKeeper)(nil).RefreshLocale))
}

// MockmadmContentKeeper is a mock of madmContentKeeper interface.
type MockmadmContentKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockmadmContentKeeperMockRecorder
}

// MockmadmContentKeeperMockRecorder is the mock recorder for MockmadmContentKeeper.
type MockmadmContentKeeperMockRecorder struct {
	mock *MockmadmContentKeeper
}

// NewMockmadmContentKeeper creates a new mock instance.
func NewMockmadmContentKeeper(ctrl *gomock.Controller) *MockmadmContentKeeper {
	mock := &MockmadmContentKeeper{ctrl: ctrl}
	mock.recorder = &MockmadmContentKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmContentKeeper) EXPECT() *MockmadmContentKeeperMockRecorder {
	return m.recorder
}

// GetMadmContent mocks base method.
func (m *MockmadmContentKeeper) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockmadmContentKeeperMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockmadmContentKeeper)(nil).GetMadmContent))
}

// GetMadmContentIfUpdated mocks base method.
func (m *MockmadmContentKeeper) GetMadmContentIfUpdated() *morda_data.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContentIfUpdated")
	ret0, _ := ret[0].(*morda_data.MadmContent)
	return ret0
}

// GetMadmContentIfUpdated indicates an expected call of GetMadmContentIfUpdated.
func (mr *MockmadmContentKeeperMockRecorder) GetMadmContentIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContentIfUpdated", reflect.TypeOf((*MockmadmContentKeeper)(nil).GetMadmContentIfUpdated))
}

// GetMadmContentOrErr mocks base method.
func (m *MockmadmContentKeeper) GetMadmContentOrErr() (models.MadmContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContentOrErr")
	ret0, _ := ret[0].(models.MadmContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMadmContentOrErr indicates an expected call of GetMadmContentOrErr.
func (mr *MockmadmContentKeeperMockRecorder) GetMadmContentOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContentOrErr", reflect.TypeOf((*MockmadmContentKeeper)(nil).GetMadmContentOrErr))
}

// RefreshMadmContent mocks base method.
func (m *MockmadmContentKeeper) RefreshMadmContent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshMadmContent")
}

// RefreshMadmContent indicates an expected call of RefreshMadmContent.
func (mr *MockmadmContentKeeperMockRecorder) RefreshMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMadmContent", reflect.TypeOf((*MockmadmContentKeeper)(nil).RefreshMadmContent))
}

// MockyabsKeeper is a mock of yabsKeeper interface.
type MockyabsKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockyabsKeeperMockRecorder
}

// MockyabsKeeperMockRecorder is the mock recorder for MockyabsKeeper.
type MockyabsKeeperMockRecorder struct {
	mock *MockyabsKeeper
}

// NewMockyabsKeeper creates a new mock instance.
func NewMockyabsKeeper(ctrl *gomock.Controller) *MockyabsKeeper {
	mock := &MockyabsKeeper{ctrl: ctrl}
	mock.recorder = &MockyabsKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyabsKeeper) EXPECT() *MockyabsKeeperMockRecorder {
	return m.recorder
}

// ForceYabs mocks base method.
func (m *MockyabsKeeper) ForceYabs(arg0 models.Yabs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceYabs", arg0)
}

// ForceYabs indicates an expected call of ForceYabs.
func (mr *MockyabsKeeperMockRecorder) ForceYabs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceYabs", reflect.TypeOf((*MockyabsKeeper)(nil).ForceYabs), arg0)
}

// GetYabs mocks base method.
func (m *MockyabsKeeper) GetYabs() models.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabs")
	ret0, _ := ret[0].(models.Yabs)
	return ret0
}

// GetYabs indicates an expected call of GetYabs.
func (mr *MockyabsKeeperMockRecorder) GetYabs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabs", reflect.TypeOf((*MockyabsKeeper)(nil).GetYabs))
}

// GetYabsIfUpdated mocks base method.
func (m *MockyabsKeeper) GetYabsIfUpdated() *morda_data.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsIfUpdated")
	ret0, _ := ret[0].(*morda_data.Yabs)
	return ret0
}

// GetYabsIfUpdated indicates an expected call of GetYabsIfUpdated.
func (mr *MockyabsKeeperMockRecorder) GetYabsIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsIfUpdated", reflect.TypeOf((*MockyabsKeeper)(nil).GetYabsIfUpdated))
}

// GetYabsOrErr mocks base method.
func (m *MockyabsKeeper) GetYabsOrErr() (models.Yabs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsOrErr")
	ret0, _ := ret[0].(models.Yabs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYabsOrErr indicates an expected call of GetYabsOrErr.
func (mr *MockyabsKeeperMockRecorder) GetYabsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsOrErr", reflect.TypeOf((*MockyabsKeeper)(nil).GetYabsOrErr))
}

// MockbigbKeeper is a mock of bigbKeeper interface.
type MockbigbKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockbigbKeeperMockRecorder
}

// MockbigbKeeperMockRecorder is the mock recorder for MockbigbKeeper.
type MockbigbKeeperMockRecorder struct {
	mock *MockbigbKeeper
}

// NewMockbigbKeeper creates a new mock instance.
func NewMockbigbKeeper(ctrl *gomock.Controller) *MockbigbKeeper {
	mock := &MockbigbKeeper{ctrl: ctrl}
	mock.recorder = &MockbigbKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbigbKeeper) EXPECT() *MockbigbKeeperMockRecorder {
	return m.recorder
}

// ForceBigB mocks base method.
func (m *MockbigbKeeper) ForceBigB(arg0 models.BigB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceBigB", arg0)
}

// ForceBigB indicates an expected call of ForceBigB.
func (mr *MockbigbKeeperMockRecorder) ForceBigB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceBigB", reflect.TypeOf((*MockbigbKeeper)(nil).ForceBigB), arg0)
}

// GetBigB mocks base method.
func (m *MockbigbKeeper) GetBigB() models.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigB")
	ret0, _ := ret[0].(models.BigB)
	return ret0
}

// GetBigB indicates an expected call of GetBigB.
func (mr *MockbigbKeeperMockRecorder) GetBigB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigB", reflect.TypeOf((*MockbigbKeeper)(nil).GetBigB))
}

// GetBigBIfUpdated mocks base method.
func (m *MockbigbKeeper) GetBigBIfUpdated() *morda_data.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBIfUpdated")
	ret0, _ := ret[0].(*morda_data.BigB)
	return ret0
}

// GetBigBIfUpdated indicates an expected call of GetBigBIfUpdated.
func (mr *MockbigbKeeperMockRecorder) GetBigBIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBIfUpdated", reflect.TypeOf((*MockbigbKeeper)(nil).GetBigBIfUpdated))
}

// GetBigBOrErr mocks base method.
func (m *MockbigbKeeper) GetBigBOrErr() (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBOrErr")
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBOrErr indicates an expected call of GetBigBOrErr.
func (mr *MockbigbKeeperMockRecorder) GetBigBOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBOrErr", reflect.TypeOf((*MockbigbKeeper)(nil).GetBigBOrErr))
}

// MockauthKeeper is a mock of authKeeper interface.
type MockauthKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockauthKeeperMockRecorder
}

// MockauthKeeperMockRecorder is the mock recorder for MockauthKeeper.
type MockauthKeeperMockRecorder struct {
	mock *MockauthKeeper
}

// NewMockauthKeeper creates a new mock instance.
func NewMockauthKeeper(ctrl *gomock.Controller) *MockauthKeeper {
	mock := &MockauthKeeper{ctrl: ctrl}
	mock.recorder = &MockauthKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthKeeper) EXPECT() *MockauthKeeperMockRecorder {
	return m.recorder
}

// ForceAuth mocks base method.
func (m *MockauthKeeper) ForceAuth(auth models.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceAuth", auth)
}

// ForceAuth indicates an expected call of ForceAuth.
func (mr *MockauthKeeperMockRecorder) ForceAuth(auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceAuth", reflect.TypeOf((*MockauthKeeper)(nil).ForceAuth), auth)
}

// GetAuth mocks base method.
func (m *MockauthKeeper) GetAuth() models.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth")
	ret0, _ := ret[0].(models.Auth)
	return ret0
}

// GetAuth indicates an expected call of GetAuth.
func (mr *MockauthKeeperMockRecorder) GetAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockauthKeeper)(nil).GetAuth))
}

// GetAuthIfUpdated mocks base method.
func (m *MockauthKeeper) GetAuthIfUpdated() *morda_data.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthIfUpdated")
	ret0, _ := ret[0].(*morda_data.Auth)
	return ret0
}

// GetAuthIfUpdated indicates an expected call of GetAuthIfUpdated.
func (mr *MockauthKeeperMockRecorder) GetAuthIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthIfUpdated", reflect.TypeOf((*MockauthKeeper)(nil).GetAuthIfUpdated))
}

// GetAuthOrErr mocks base method.
func (m *MockauthKeeper) GetAuthOrErr() (models.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthOrErr")
	ret0, _ := ret[0].(models.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthOrErr indicates an expected call of GetAuthOrErr.
func (mr *MockauthKeeperMockRecorder) GetAuthOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthOrErr", reflect.TypeOf((*MockauthKeeper)(nil).GetAuthOrErr))
}

// MockmadmOptionsKeeper is a mock of madmOptionsKeeper interface.
type MockmadmOptionsKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockmadmOptionsKeeperMockRecorder
}

// MockmadmOptionsKeeperMockRecorder is the mock recorder for MockmadmOptionsKeeper.
type MockmadmOptionsKeeperMockRecorder struct {
	mock *MockmadmOptionsKeeper
}

// NewMockmadmOptionsKeeper creates a new mock instance.
func NewMockmadmOptionsKeeper(ctrl *gomock.Controller) *MockmadmOptionsKeeper {
	mock := &MockmadmOptionsKeeper{ctrl: ctrl}
	mock.recorder = &MockmadmOptionsKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmOptionsKeeper) EXPECT() *MockmadmOptionsKeeperMockRecorder {
	return m.recorder
}

// GetMadmOptions mocks base method.
func (m *MockmadmOptionsKeeper) GetMadmOptions() exports.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmOptions")
	ret0, _ := ret[0].(exports.Options)
	return ret0
}

// GetMadmOptions indicates an expected call of GetMadmOptions.
func (mr *MockmadmOptionsKeeperMockRecorder) GetMadmOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmOptions", reflect.TypeOf((*MockmadmOptionsKeeper)(nil).GetMadmOptions))
}

// MocklogGetter is a mock of logGetter interface.
type MocklogGetter struct {
	ctrl     *gomock.Controller
	recorder *MocklogGetterMockRecorder
}

// MocklogGetterMockRecorder is the mock recorder for MocklogGetter.
type MocklogGetterMockRecorder struct {
	mock *MocklogGetter
}

// NewMocklogGetter creates a new mock instance.
func NewMocklogGetter(ctrl *gomock.Controller) *MocklogGetter {
	mock := &MocklogGetter{ctrl: ctrl}
	mock.recorder = &MocklogGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklogGetter) EXPECT() *MocklogGetterMockRecorder {
	return m.recorder
}

// GetItemRequest mocks base method.
func (m *MocklogGetter) GetItemRequest() (*log3.LogItemRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemRequest")
	ret0, _ := ret[0].(*log3.LogItemRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemRequest indicates an expected call of GetItemRequest.
func (mr *MocklogGetterMockRecorder) GetItemRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemRequest", reflect.TypeOf((*MocklogGetter)(nil).GetItemRequest))
}

// GetLogContext mocks base method.
func (m *MocklogGetter) GetLogContext() *log3.ContextProtoItemType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogContext")
	ret0, _ := ret[0].(*log3.ContextProtoItemType)
	return ret0
}

// GetLogContext indicates an expected call of GetLogContext.
func (mr *MocklogGetterMockRecorder) GetLogContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogContext", reflect.TypeOf((*MocklogGetter)(nil).GetLogContext))
}

// MockrobotKeeper is a mock of robotKeeper interface.
type MockrobotKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockrobotKeeperMockRecorder
}

// MockrobotKeeperMockRecorder is the mock recorder for MockrobotKeeper.
type MockrobotKeeperMockRecorder struct {
	mock *MockrobotKeeper
}

// NewMockrobotKeeper creates a new mock instance.
func NewMockrobotKeeper(ctrl *gomock.Controller) *MockrobotKeeper {
	mock := &MockrobotKeeper{ctrl: ctrl}
	mock.recorder = &MockrobotKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrobotKeeper) EXPECT() *MockrobotKeeperMockRecorder {
	return m.recorder
}

// ForceRobot mocks base method.
func (m *MockrobotKeeper) ForceRobot(arg0 models.Robot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceRobot", arg0)
}

// ForceRobot indicates an expected call of ForceRobot.
func (mr *MockrobotKeeperMockRecorder) ForceRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceRobot", reflect.TypeOf((*MockrobotKeeper)(nil).ForceRobot), arg0)
}

// GetRobot mocks base method.
func (m *MockrobotKeeper) GetRobot() models.Robot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobot")
	ret0, _ := ret[0].(models.Robot)
	return ret0
}

// GetRobot indicates an expected call of GetRobot.
func (mr *MockrobotKeeperMockRecorder) GetRobot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobot", reflect.TypeOf((*MockrobotKeeper)(nil).GetRobot))
}

// GetRobotIfUpdated mocks base method.
func (m *MockrobotKeeper) GetRobotIfUpdated() *morda_data.Robot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotIfUpdated")
	ret0, _ := ret[0].(*morda_data.Robot)
	return ret0
}

// GetRobotIfUpdated indicates an expected call of GetRobotIfUpdated.
func (mr *MockrobotKeeperMockRecorder) GetRobotIfUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotIfUpdated", reflect.TypeOf((*MockrobotKeeper)(nil).GetRobotIfUpdated))
}

// GetRobotOrErr mocks base method.
func (m *MockrobotKeeper) GetRobotOrErr() (models.Robot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotOrErr")
	ret0, _ := ret[0].(models.Robot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotOrErr indicates an expected call of GetRobotOrErr.
func (mr *MockrobotKeeperMockRecorder) GetRobotOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotOrErr", reflect.TypeOf((*MockrobotKeeper)(nil).GetRobotOrErr))
}
