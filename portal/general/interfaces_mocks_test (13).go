// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package httpprocessor is a generated GoMock package.
package httpprocessor

import (
	reflect "reflect"

	conditions "a.yandex-team.ru/portal/avocado/libs/utils/experiments/conditions"
	its "a.yandex-team.ru/portal/avocado/morda-go/pkg/its"
	gomock "github.com/golang/mock/gomock"
)

// MockitsOptionsGetter is a mock of itsOptionsGetter interface.
type MockitsOptionsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockitsOptionsGetterMockRecorder
}

// MockitsOptionsGetterMockRecorder is the mock recorder for MockitsOptionsGetter.
type MockitsOptionsGetterMockRecorder struct {
	mock *MockitsOptionsGetter
}

// NewMockitsOptionsGetter creates a new mock instance.
func NewMockitsOptionsGetter(ctrl *gomock.Controller) *MockitsOptionsGetter {
	mock := &MockitsOptionsGetter{ctrl: ctrl}
	mock.recorder = &MockitsOptionsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockitsOptionsGetter) EXPECT() *MockitsOptionsGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockitsOptionsGetter) Get() its.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(its.Options)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockitsOptionsGetterMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockitsOptionsGetter)(nil).Get))
}

// MockabFlagsConditionsParser is a mock of abFlagsConditionsParser interface.
type MockabFlagsConditionsParser struct {
	ctrl     *gomock.Controller
	recorder *MockabFlagsConditionsParserMockRecorder
}

// MockabFlagsConditionsParserMockRecorder is the mock recorder for MockabFlagsConditionsParser.
type MockabFlagsConditionsParserMockRecorder struct {
	mock *MockabFlagsConditionsParser
}

// NewMockabFlagsConditionsParser creates a new mock instance.
func NewMockabFlagsConditionsParser(ctrl *gomock.Controller) *MockabFlagsConditionsParser {
	mock := &MockabFlagsConditionsParser{ctrl: ctrl}
	mock.recorder = &MockabFlagsConditionsParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockabFlagsConditionsParser) EXPECT() *MockabFlagsConditionsParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockabFlagsConditionsParser) Parse(condition string) (conditions.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", condition)
	ret0, _ := ret[0].(conditions.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockabFlagsConditionsParserMockRecorder) Parse(condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockabFlagsConditionsParser)(nil).Parse), condition)
}

// MockinputContext is a mock of inputContext interface.
type MockinputContext struct {
	ctrl     *gomock.Controller
	recorder *MockinputContextMockRecorder
}

// MockinputContextMockRecorder is the mock recorder for MockinputContext.
type MockinputContextMockRecorder struct {
	mock *MockinputContext
}

// NewMockinputContext creates a new mock instance.
func NewMockinputContext(ctrl *gomock.Controller) *MockinputContext {
	mock := &MockinputContext{ctrl: ctrl}
	mock.recorder = &MockinputContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockinputContext) EXPECT() *MockinputContextMockRecorder {
	return m.recorder
}

// GetBool mocks base method.
func (m *MockinputContext) GetBool(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockinputContextMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockinputContext)(nil).GetBool), arg0)
}

// GetInteger mocks base method.
func (m *MockinputContext) GetInteger(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteger", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInteger indicates an expected call of GetInteger.
func (mr *MockinputContextMockRecorder) GetInteger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteger", reflect.TypeOf((*MockinputContext)(nil).GetInteger), arg0)
}

// GetString mocks base method.
func (m *MockinputContext) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockinputContextMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockinputContext)(nil).GetString), arg0)
}

// HasKey mocks base method.
func (m *MockinputContext) HasKey(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasKey", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasKey indicates an expected call of HasKey.
func (mr *MockinputContextMockRecorder) HasKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasKey", reflect.TypeOf((*MockinputContext)(nil).HasKey), arg0)
}

// MocktrackedInputContext is a mock of trackedInputContext interface.
type MocktrackedInputContext struct {
	ctrl     *gomock.Controller
	recorder *MocktrackedInputContextMockRecorder
}

// MocktrackedInputContextMockRecorder is the mock recorder for MocktrackedInputContext.
type MocktrackedInputContextMockRecorder struct {
	mock *MocktrackedInputContext
}

// NewMocktrackedInputContext creates a new mock instance.
func NewMocktrackedInputContext(ctrl *gomock.Controller) *MocktrackedInputContext {
	mock := &MocktrackedInputContext{ctrl: ctrl}
	mock.recorder = &MocktrackedInputContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrackedInputContext) EXPECT() *MocktrackedInputContextMockRecorder {
	return m.recorder
}

// GetBool mocks base method.
func (m *MocktrackedInputContext) GetBool(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MocktrackedInputContextMockRecorder) GetBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MocktrackedInputContext)(nil).GetBool), arg0)
}

// GetInteger mocks base method.
func (m *MocktrackedInputContext) GetInteger(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInteger", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInteger indicates an expected call of GetInteger.
func (mr *MocktrackedInputContextMockRecorder) GetInteger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInteger", reflect.TypeOf((*MocktrackedInputContext)(nil).GetInteger), arg0)
}

// GetMissedKeys mocks base method.
func (m *MocktrackedInputContext) GetMissedKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissedKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetMissedKeys indicates an expected call of GetMissedKeys.
func (mr *MocktrackedInputContextMockRecorder) GetMissedKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissedKeys", reflect.TypeOf((*MocktrackedInputContext)(nil).GetMissedKeys))
}

// GetString mocks base method.
func (m *MocktrackedInputContext) GetString(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MocktrackedInputContextMockRecorder) GetString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MocktrackedInputContext)(nil).GetString), arg0)
}

// HasKey mocks base method.
func (m *MocktrackedInputContext) HasKey(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasKey", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasKey indicates an expected call of HasKey.
func (mr *MocktrackedInputContextMockRecorder) HasKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasKey", reflect.TypeOf((*MocktrackedInputContext)(nil).HasKey), arg0)
}
