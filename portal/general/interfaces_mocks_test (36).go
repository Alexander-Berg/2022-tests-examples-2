// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package compare is a generated GoMock package.
package compare

import (
	json "encoding/json"
	reflect "reflect"

	proto "a.yandex-team.ru/ads/bsyeti/eagle/collect/proto"
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	blackbox "a.yandex-team.ru/portal/avocado/libs/utils/blackbox"
	log3 "a.yandex-team.ru/portal/avocado/libs/utils/log3"
	madm "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2"
	yabs "a.yandex-team.ru/portal/avocado/libs/utils/yabs"
	contexts "a.yandex-team.ru/portal/avocado/morda-go/pkg/contexts"
	exports "a.yandex-team.ru/portal/avocado/morda-go/pkg/exports"
	its "a.yandex-team.ru/portal/avocado/morda-go/pkg/its"
	gomock "github.com/golang/mock/gomock"
)

// MockflagsGetter is a mock of flagsGetter interface.
type MockflagsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockflagsGetterMockRecorder
}

// MockflagsGetterMockRecorder is the mock recorder for MockflagsGetter.
type MockflagsGetterMockRecorder struct {
	mock *MockflagsGetter
}

// NewMockflagsGetter creates a new mock instance.
func NewMockflagsGetter(ctrl *gomock.Controller) *MockflagsGetter {
	mock := &MockflagsGetter{ctrl: ctrl}
	mock.recorder = &MockflagsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflagsGetter) EXPECT() *MockflagsGetterMockRecorder {
	return m.recorder
}

// GetFlagsOrErr mocks base method.
func (m *MockflagsGetter) GetFlagsOrErr() (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsOrErr")
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsOrErr indicates an expected call of GetFlagsOrErr.
func (mr *MockflagsGetterMockRecorder) GetFlagsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsOrErr", reflect.TypeOf((*MockflagsGetter)(nil).GetFlagsOrErr))
}

// MockmordazoneGetter is a mock of mordazoneGetter interface.
type MockmordazoneGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordazoneGetterMockRecorder
}

// MockmordazoneGetterMockRecorder is the mock recorder for MockmordazoneGetter.
type MockmordazoneGetterMockRecorder struct {
	mock *MockmordazoneGetter
}

// NewMockmordazoneGetter creates a new mock instance.
func NewMockmordazoneGetter(ctrl *gomock.Controller) *MockmordazoneGetter {
	mock := &MockmordazoneGetter{ctrl: ctrl}
	mock.recorder = &MockmordazoneGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordazoneGetter) EXPECT() *MockmordazoneGetterMockRecorder {
	return m.recorder
}

// GetMordaZone mocks base method.
func (m *MockmordazoneGetter) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockmordazoneGetterMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockmordazoneGetter)(nil).GetMordaZone))
}

// MockmadmContentGetter is a mock of madmContentGetter interface.
type MockmadmContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmadmContentGetterMockRecorder
}

// MockmadmContentGetterMockRecorder is the mock recorder for MockmadmContentGetter.
type MockmadmContentGetterMockRecorder struct {
	mock *MockmadmContentGetter
}

// NewMockmadmContentGetter creates a new mock instance.
func NewMockmadmContentGetter(ctrl *gomock.Controller) *MockmadmContentGetter {
	mock := &MockmadmContentGetter{ctrl: ctrl}
	mock.recorder = &MockmadmContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmContentGetter) EXPECT() *MockmadmContentGetterMockRecorder {
	return m.recorder
}

// GetMadmContent mocks base method.
func (m *MockmadmContentGetter) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockmadmContentGetterMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockmadmContentGetter)(nil).GetMadmContent))
}

// MockmordaContentGetter is a mock of mordaContentGetter interface.
type MockmordaContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentGetterMockRecorder
}

// MockmordaContentGetterMockRecorder is the mock recorder for MockmordaContentGetter.
type MockmordaContentGetterMockRecorder struct {
	mock *MockmordaContentGetter
}

// NewMockmordaContentGetter creates a new mock instance.
func NewMockmordaContentGetter(ctrl *gomock.Controller) *MockmordaContentGetter {
	mock := &MockmordaContentGetter{ctrl: ctrl}
	mock.recorder = &MockmordaContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentGetter) EXPECT() *MockmordaContentGetterMockRecorder {
	return m.recorder
}

// GetMordaContent mocks base method.
func (m *MockmordaContentGetter) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockmordaContentGetterMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockmordaContentGetter)(nil).GetMordaContent))
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockgeoGetter is a mock of geoGetter interface.
type MockgeoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockgeoGetterMockRecorder
}

// MockgeoGetterMockRecorder is the mock recorder for MockgeoGetter.
type MockgeoGetterMockRecorder struct {
	mock *MockgeoGetter
}

// NewMockgeoGetter creates a new mock instance.
func NewMockgeoGetter(ctrl *gomock.Controller) *MockgeoGetter {
	mock := &MockgeoGetter{ctrl: ctrl}
	mock.recorder = &MockgeoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoGetter) EXPECT() *MockgeoGetterMockRecorder {
	return m.recorder
}

// GetGeo mocks base method.
func (m *MockgeoGetter) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockgeoGetterMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockgeoGetter)(nil).GetGeo))
}

// MockyaCookiesGetter is a mock of yaCookiesGetter interface.
type MockyaCookiesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockyaCookiesGetterMockRecorder
}

// MockyaCookiesGetterMockRecorder is the mock recorder for MockyaCookiesGetter.
type MockyaCookiesGetterMockRecorder struct {
	mock *MockyaCookiesGetter
}

// NewMockyaCookiesGetter creates a new mock instance.
func NewMockyaCookiesGetter(ctrl *gomock.Controller) *MockyaCookiesGetter {
	mock := &MockyaCookiesGetter{ctrl: ctrl}
	mock.recorder = &MockyaCookiesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyaCookiesGetter) EXPECT() *MockyaCookiesGetterMockRecorder {
	return m.recorder
}

// GetYaCookies mocks base method.
func (m *MockyaCookiesGetter) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockyaCookiesGetterMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockyaCookiesGetter)(nil).GetYaCookies))
}

// MockdeviceGetter is a mock of deviceGetter interface.
type MockdeviceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdeviceGetterMockRecorder
}

// MockdeviceGetterMockRecorder is the mock recorder for MockdeviceGetter.
type MockdeviceGetterMockRecorder struct {
	mock *MockdeviceGetter
}

// NewMockdeviceGetter creates a new mock instance.
func NewMockdeviceGetter(ctrl *gomock.Controller) *MockdeviceGetter {
	mock := &MockdeviceGetter{ctrl: ctrl}
	mock.recorder = &MockdeviceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeviceGetter) EXPECT() *MockdeviceGetterMockRecorder {
	return m.recorder
}

// GetDevice mocks base method.
func (m *MockdeviceGetter) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockdeviceGetterMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockdeviceGetter)(nil).GetDevice))
}

// MocklocaleGetter is a mock of localeGetter interface.
type MocklocaleGetter struct {
	ctrl     *gomock.Controller
	recorder *MocklocaleGetterMockRecorder
}

// MocklocaleGetterMockRecorder is the mock recorder for MocklocaleGetter.
type MocklocaleGetterMockRecorder struct {
	mock *MocklocaleGetter
}

// NewMocklocaleGetter creates a new mock instance.
func NewMocklocaleGetter(ctrl *gomock.Controller) *MocklocaleGetter {
	mock := &MocklocaleGetter{ctrl: ctrl}
	mock.recorder = &MocklocaleGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklocaleGetter) EXPECT() *MocklocaleGetterMockRecorder {
	return m.recorder
}

// GetLocale mocks base method.
func (m *MocklocaleGetter) GetLocale() models.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocale")
	ret0, _ := ret[0].(models.Locale)
	return ret0
}

// GetLocale indicates an expected call of GetLocale.
func (mr *MocklocaleGetterMockRecorder) GetLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocale", reflect.TypeOf((*MocklocaleGetter)(nil).GetLocale))
}

// MockclidGetter is a mock of clidGetter interface.
type MockclidGetter struct {
	ctrl     *gomock.Controller
	recorder *MockclidGetterMockRecorder
}

// MockclidGetterMockRecorder is the mock recorder for MockclidGetter.
type MockclidGetterMockRecorder struct {
	mock *MockclidGetter
}

// NewMockclidGetter creates a new mock instance.
func NewMockclidGetter(ctrl *gomock.Controller) *MockclidGetter {
	mock := &MockclidGetter{ctrl: ctrl}
	mock.recorder = &MockclidGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclidGetter) EXPECT() *MockclidGetterMockRecorder {
	return m.recorder
}

// GetClid mocks base method.
func (m *MockclidGetter) GetClid() models.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClid")
	ret0, _ := ret[0].(models.Clid)
	return ret0
}

// GetClid indicates an expected call of GetClid.
func (mr *MockclidGetterMockRecorder) GetClid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClid", reflect.TypeOf((*MockclidGetter)(nil).GetClid))
}

// MockyabsGetter is a mock of yabsGetter interface.
type MockyabsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockyabsGetterMockRecorder
}

// MockyabsGetterMockRecorder is the mock recorder for MockyabsGetter.
type MockyabsGetterMockRecorder struct {
	mock *MockyabsGetter
}

// NewMockyabsGetter creates a new mock instance.
func NewMockyabsGetter(ctrl *gomock.Controller) *MockyabsGetter {
	mock := &MockyabsGetter{ctrl: ctrl}
	mock.recorder = &MockyabsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyabsGetter) EXPECT() *MockyabsGetterMockRecorder {
	return m.recorder
}

// GetYabs mocks base method.
func (m *MockyabsGetter) GetYabs() models.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabs")
	ret0, _ := ret[0].(models.Yabs)
	return ret0
}

// GetYabs indicates an expected call of GetYabs.
func (mr *MockyabsGetterMockRecorder) GetYabs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabs", reflect.TypeOf((*MockyabsGetter)(nil).GetYabs))
}

// GetYabsOrErr mocks base method.
func (m *MockyabsGetter) GetYabsOrErr() (models.Yabs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsOrErr")
	ret0, _ := ret[0].(models.Yabs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYabsOrErr indicates an expected call of GetYabsOrErr.
func (mr *MockyabsGetterMockRecorder) GetYabsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsOrErr", reflect.TypeOf((*MockyabsGetter)(nil).GetYabsOrErr))
}

// MockyabsURLGetter is a mock of yabsURLGetter interface.
type MockyabsURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockyabsURLGetterMockRecorder
}

// MockyabsURLGetterMockRecorder is the mock recorder for MockyabsURLGetter.
type MockyabsURLGetterMockRecorder struct {
	mock *MockyabsURLGetter
}

// NewMockyabsURLGetter creates a new mock instance.
func NewMockyabsURLGetter(ctrl *gomock.Controller) *MockyabsURLGetter {
	mock := &MockyabsURLGetter{ctrl: ctrl}
	mock.recorder = &MockyabsURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyabsURLGetter) EXPECT() *MockyabsURLGetterMockRecorder {
	return m.recorder
}

// GetYabsURL mocks base method.
func (m *MockyabsURLGetter) GetYabsURL() yabs.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsURL")
	ret0, _ := ret[0].(yabs.Request)
	return ret0
}

// GetYabsURL indicates an expected call of GetYabsURL.
func (mr *MockyabsURLGetterMockRecorder) GetYabsURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsURL", reflect.TypeOf((*MockyabsURLGetter)(nil).GetYabsURL))
}

// MockbigBGetter is a mock of bigBGetter interface.
type MockbigBGetter struct {
	ctrl     *gomock.Controller
	recorder *MockbigBGetterMockRecorder
}

// MockbigBGetterMockRecorder is the mock recorder for MockbigBGetter.
type MockbigBGetterMockRecorder struct {
	mock *MockbigBGetter
}

// NewMockbigBGetter creates a new mock instance.
func NewMockbigBGetter(ctrl *gomock.Controller) *MockbigBGetter {
	mock := &MockbigBGetter{ctrl: ctrl}
	mock.recorder = &MockbigBGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbigBGetter) EXPECT() *MockbigBGetterMockRecorder {
	return m.recorder
}

// GetBigB mocks base method.
func (m *MockbigBGetter) GetBigB() models.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigB")
	ret0, _ := ret[0].(models.BigB)
	return ret0
}

// GetBigB indicates an expected call of GetBigB.
func (mr *MockbigBGetterMockRecorder) GetBigB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigB", reflect.TypeOf((*MockbigBGetter)(nil).GetBigB))
}

// GetBigBOrErr mocks base method.
func (m *MockbigBGetter) GetBigBOrErr() (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBOrErr")
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBOrErr indicates an expected call of GetBigBOrErr.
func (mr *MockbigBGetterMockRecorder) GetBigBOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBOrErr", reflect.TypeOf((*MockbigBGetter)(nil).GetBigBOrErr))
}

// MockbigBURLGetter is a mock of bigBURLGetter interface.
type MockbigBURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockbigBURLGetterMockRecorder
}

// MockbigBURLGetterMockRecorder is the mock recorder for MockbigBURLGetter.
type MockbigBURLGetterMockRecorder struct {
	mock *MockbigBURLGetter
}

// NewMockbigBURLGetter creates a new mock instance.
func NewMockbigBURLGetter(ctrl *gomock.Controller) *MockbigBURLGetter {
	mock := &MockbigBURLGetter{ctrl: ctrl}
	mock.recorder = &MockbigBURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbigBURLGetter) EXPECT() *MockbigBURLGetterMockRecorder {
	return m.recorder
}

// GetBigBURL mocks base method.
func (m *MockbigBURLGetter) GetBigBURL() *proto.TQueryParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBURL")
	ret0, _ := ret[0].(*proto.TQueryParams)
	return ret0
}

// GetBigBURL indicates an expected call of GetBigBURL.
func (mr *MockbigBURLGetterMockRecorder) GetBigBURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBURL", reflect.TypeOf((*MockbigBURLGetter)(nil).GetBigBURL))
}

// MockcomparableContext is a mock of comparableContext interface.
type MockcomparableContext struct {
	ctrl     *gomock.Controller
	recorder *MockcomparableContextMockRecorder
}

// MockcomparableContextMockRecorder is the mock recorder for MockcomparableContext.
type MockcomparableContextMockRecorder struct {
	mock *MockcomparableContext
}

// NewMockcomparableContext creates a new mock instance.
func NewMockcomparableContext(ctrl *gomock.Controller) *MockcomparableContext {
	mock := &MockcomparableContext{ctrl: ctrl}
	mock.recorder = &MockcomparableContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcomparableContext) EXPECT() *MockcomparableContextMockRecorder {
	return m.recorder
}

// GetBigB mocks base method.
func (m *MockcomparableContext) GetBigB() models.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigB")
	ret0, _ := ret[0].(models.BigB)
	return ret0
}

// GetBigB indicates an expected call of GetBigB.
func (mr *MockcomparableContextMockRecorder) GetBigB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigB", reflect.TypeOf((*MockcomparableContext)(nil).GetBigB))
}

// GetBigBOrErr mocks base method.
func (m *MockcomparableContext) GetBigBOrErr() (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBOrErr")
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBOrErr indicates an expected call of GetBigBOrErr.
func (mr *MockcomparableContextMockRecorder) GetBigBOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBOrErr", reflect.TypeOf((*MockcomparableContext)(nil).GetBigBOrErr))
}

// GetBigBURL mocks base method.
func (m *MockcomparableContext) GetBigBURL() *proto.TQueryParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBURL")
	ret0, _ := ret[0].(*proto.TQueryParams)
	return ret0
}

// GetBigBURL indicates an expected call of GetBigBURL.
func (mr *MockcomparableContextMockRecorder) GetBigBURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBURL", reflect.TypeOf((*MockcomparableContext)(nil).GetBigBURL))
}

// GetClid mocks base method.
func (m *MockcomparableContext) GetClid() models.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClid")
	ret0, _ := ret[0].(models.Clid)
	return ret0
}

// GetClid indicates an expected call of GetClid.
func (mr *MockcomparableContextMockRecorder) GetClid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClid", reflect.TypeOf((*MockcomparableContext)(nil).GetClid))
}

// GetDevice mocks base method.
func (m *MockcomparableContext) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockcomparableContextMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockcomparableContext)(nil).GetDevice))
}

// GetFlagsOrErr mocks base method.
func (m *MockcomparableContext) GetFlagsOrErr() (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsOrErr")
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsOrErr indicates an expected call of GetFlagsOrErr.
func (mr *MockcomparableContextMockRecorder) GetFlagsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsOrErr", reflect.TypeOf((*MockcomparableContext)(nil).GetFlagsOrErr))
}

// GetGeo mocks base method.
func (m *MockcomparableContext) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockcomparableContextMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockcomparableContext)(nil).GetGeo))
}

// GetLocale mocks base method.
func (m *MockcomparableContext) GetLocale() models.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocale")
	ret0, _ := ret[0].(models.Locale)
	return ret0
}

// GetLocale indicates an expected call of GetLocale.
func (mr *MockcomparableContextMockRecorder) GetLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocale", reflect.TypeOf((*MockcomparableContext)(nil).GetLocale))
}

// GetMadmContent mocks base method.
func (m *MockcomparableContext) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockcomparableContextMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockcomparableContext)(nil).GetMadmContent))
}

// GetMordaContent mocks base method.
func (m *MockcomparableContext) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockcomparableContextMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockcomparableContext)(nil).GetMordaContent))
}

// GetMordaZone mocks base method.
func (m *MockcomparableContext) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockcomparableContextMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockcomparableContext)(nil).GetMordaZone))
}

// GetPerlAuthInfo mocks base method.
func (m *MockcomparableContext) GetPerlAuthInfo() (blackbox.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlAuthInfo")
	ret0, _ := ret[0].(blackbox.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerlAuthInfo indicates an expected call of GetPerlAuthInfo.
func (mr *MockcomparableContextMockRecorder) GetPerlAuthInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlAuthInfo", reflect.TypeOf((*MockcomparableContext)(nil).GetPerlAuthInfo))
}

// GetPerlScaleFactor mocks base method.
func (m *MockcomparableContext) GetPerlScaleFactor() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlScaleFactor")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetPerlScaleFactor indicates an expected call of GetPerlScaleFactor.
func (mr *MockcomparableContextMockRecorder) GetPerlScaleFactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlScaleFactor", reflect.TypeOf((*MockcomparableContext)(nil).GetPerlScaleFactor))
}

// GetReqTime mocks base method.
func (m *MockcomparableContext) GetReqTime() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqTime")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetReqTime indicates an expected call of GetReqTime.
func (mr *MockcomparableContextMockRecorder) GetReqTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqTime", reflect.TypeOf((*MockcomparableContext)(nil).GetReqTime))
}

// GetRequest mocks base method.
func (m *MockcomparableContext) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockcomparableContextMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockcomparableContext)(nil).GetRequest))
}

// GetYaCookies mocks base method.
func (m *MockcomparableContext) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockcomparableContextMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockcomparableContext)(nil).GetYaCookies))
}

// GetYabs mocks base method.
func (m *MockcomparableContext) GetYabs() models.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabs")
	ret0, _ := ret[0].(models.Yabs)
	return ret0
}

// GetYabs indicates an expected call of GetYabs.
func (mr *MockcomparableContextMockRecorder) GetYabs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabs", reflect.TypeOf((*MockcomparableContext)(nil).GetYabs))
}

// GetYabsOrErr mocks base method.
func (m *MockcomparableContext) GetYabsOrErr() (models.Yabs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsOrErr")
	ret0, _ := ret[0].(models.Yabs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYabsOrErr indicates an expected call of GetYabsOrErr.
func (mr *MockcomparableContextMockRecorder) GetYabsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsOrErr", reflect.TypeOf((*MockcomparableContext)(nil).GetYabsOrErr))
}

// GetYabsURL mocks base method.
func (m *MockcomparableContext) GetYabsURL() yabs.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsURL")
	ret0, _ := ret[0].(yabs.Request)
	return ret0
}

// GetYabsURL indicates an expected call of GetYabsURL.
func (mr *MockcomparableContextMockRecorder) GetYabsURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsURL", reflect.TypeOf((*MockcomparableContext)(nil).GetYabsURL))
}

// MockComparableContextExpected is a mock of ComparableContextExpected interface.
type MockComparableContextExpected struct {
	ctrl     *gomock.Controller
	recorder *MockComparableContextExpectedMockRecorder
}

// MockComparableContextExpectedMockRecorder is the mock recorder for MockComparableContextExpected.
type MockComparableContextExpectedMockRecorder struct {
	mock *MockComparableContextExpected
}

// NewMockComparableContextExpected creates a new mock instance.
func NewMockComparableContextExpected(ctrl *gomock.Controller) *MockComparableContextExpected {
	mock := &MockComparableContextExpected{ctrl: ctrl}
	mock.recorder = &MockComparableContextExpectedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComparableContextExpected) EXPECT() *MockComparableContextExpectedMockRecorder {
	return m.recorder
}

// GetBigB mocks base method.
func (m *MockComparableContextExpected) GetBigB() models.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigB")
	ret0, _ := ret[0].(models.BigB)
	return ret0
}

// GetBigB indicates an expected call of GetBigB.
func (mr *MockComparableContextExpectedMockRecorder) GetBigB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigB", reflect.TypeOf((*MockComparableContextExpected)(nil).GetBigB))
}

// GetBigBOrErr mocks base method.
func (m *MockComparableContextExpected) GetBigBOrErr() (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBOrErr")
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBOrErr indicates an expected call of GetBigBOrErr.
func (mr *MockComparableContextExpectedMockRecorder) GetBigBOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBOrErr", reflect.TypeOf((*MockComparableContextExpected)(nil).GetBigBOrErr))
}

// GetBigBURL mocks base method.
func (m *MockComparableContextExpected) GetBigBURL() *proto.TQueryParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBURL")
	ret0, _ := ret[0].(*proto.TQueryParams)
	return ret0
}

// GetBigBURL indicates an expected call of GetBigBURL.
func (mr *MockComparableContextExpectedMockRecorder) GetBigBURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBURL", reflect.TypeOf((*MockComparableContextExpected)(nil).GetBigBURL))
}

// GetClid mocks base method.
func (m *MockComparableContextExpected) GetClid() models.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClid")
	ret0, _ := ret[0].(models.Clid)
	return ret0
}

// GetClid indicates an expected call of GetClid.
func (mr *MockComparableContextExpectedMockRecorder) GetClid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClid", reflect.TypeOf((*MockComparableContextExpected)(nil).GetClid))
}

// GetDevice mocks base method.
func (m *MockComparableContextExpected) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockComparableContextExpectedMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockComparableContextExpected)(nil).GetDevice))
}

// GetExports mocks base method.
func (m *MockComparableContextExpected) GetExports() map[string][]json.RawMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExports")
	ret0, _ := ret[0].(map[string][]json.RawMessage)
	return ret0
}

// GetExports indicates an expected call of GetExports.
func (mr *MockComparableContextExpectedMockRecorder) GetExports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExports", reflect.TypeOf((*MockComparableContextExpected)(nil).GetExports))
}

// GetFlagsOrErr mocks base method.
func (m *MockComparableContextExpected) GetFlagsOrErr() (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsOrErr")
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsOrErr indicates an expected call of GetFlagsOrErr.
func (mr *MockComparableContextExpectedMockRecorder) GetFlagsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsOrErr", reflect.TypeOf((*MockComparableContextExpected)(nil).GetFlagsOrErr))
}

// GetGeo mocks base method.
func (m *MockComparableContextExpected) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockComparableContextExpectedMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockComparableContextExpected)(nil).GetGeo))
}

// GetLocale mocks base method.
func (m *MockComparableContextExpected) GetLocale() models.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocale")
	ret0, _ := ret[0].(models.Locale)
	return ret0
}

// GetLocale indicates an expected call of GetLocale.
func (mr *MockComparableContextExpectedMockRecorder) GetLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocale", reflect.TypeOf((*MockComparableContextExpected)(nil).GetLocale))
}

// GetMadmContent mocks base method.
func (m *MockComparableContextExpected) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockComparableContextExpectedMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockComparableContextExpected)(nil).GetMadmContent))
}

// GetMordaContent mocks base method.
func (m *MockComparableContextExpected) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockComparableContextExpectedMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockComparableContextExpected)(nil).GetMordaContent))
}

// GetMordaZone mocks base method.
func (m *MockComparableContextExpected) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockComparableContextExpectedMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockComparableContextExpected)(nil).GetMordaZone))
}

// GetPerlAuthInfo mocks base method.
func (m *MockComparableContextExpected) GetPerlAuthInfo() (blackbox.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlAuthInfo")
	ret0, _ := ret[0].(blackbox.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerlAuthInfo indicates an expected call of GetPerlAuthInfo.
func (mr *MockComparableContextExpectedMockRecorder) GetPerlAuthInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlAuthInfo", reflect.TypeOf((*MockComparableContextExpected)(nil).GetPerlAuthInfo))
}

// GetPerlScaleFactor mocks base method.
func (m *MockComparableContextExpected) GetPerlScaleFactor() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlScaleFactor")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetPerlScaleFactor indicates an expected call of GetPerlScaleFactor.
func (mr *MockComparableContextExpectedMockRecorder) GetPerlScaleFactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlScaleFactor", reflect.TypeOf((*MockComparableContextExpected)(nil).GetPerlScaleFactor))
}

// GetReqTime mocks base method.
func (m *MockComparableContextExpected) GetReqTime() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqTime")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetReqTime indicates an expected call of GetReqTime.
func (mr *MockComparableContextExpectedMockRecorder) GetReqTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqTime", reflect.TypeOf((*MockComparableContextExpected)(nil).GetReqTime))
}

// GetRequest mocks base method.
func (m *MockComparableContextExpected) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockComparableContextExpectedMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockComparableContextExpected)(nil).GetRequest))
}

// GetYaCookies mocks base method.
func (m *MockComparableContextExpected) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockComparableContextExpectedMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockComparableContextExpected)(nil).GetYaCookies))
}

// GetYabs mocks base method.
func (m *MockComparableContextExpected) GetYabs() models.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabs")
	ret0, _ := ret[0].(models.Yabs)
	return ret0
}

// GetYabs indicates an expected call of GetYabs.
func (mr *MockComparableContextExpectedMockRecorder) GetYabs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabs", reflect.TypeOf((*MockComparableContextExpected)(nil).GetYabs))
}

// GetYabsOrErr mocks base method.
func (m *MockComparableContextExpected) GetYabsOrErr() (models.Yabs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsOrErr")
	ret0, _ := ret[0].(models.Yabs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYabsOrErr indicates an expected call of GetYabsOrErr.
func (mr *MockComparableContextExpectedMockRecorder) GetYabsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsOrErr", reflect.TypeOf((*MockComparableContextExpected)(nil).GetYabsOrErr))
}

// GetYabsURL mocks base method.
func (m *MockComparableContextExpected) GetYabsURL() yabs.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsURL")
	ret0, _ := ret[0].(yabs.Request)
	return ret0
}

// GetYabsURL indicates an expected call of GetYabsURL.
func (mr *MockComparableContextExpectedMockRecorder) GetYabsURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsURL", reflect.TypeOf((*MockComparableContextExpected)(nil).GetYabsURL))
}

// MockComparableContextGot is a mock of ComparableContextGot interface.
type MockComparableContextGot struct {
	ctrl     *gomock.Controller
	recorder *MockComparableContextGotMockRecorder
}

// MockComparableContextGotMockRecorder is the mock recorder for MockComparableContextGot.
type MockComparableContextGotMockRecorder struct {
	mock *MockComparableContextGot
}

// NewMockComparableContextGot creates a new mock instance.
func NewMockComparableContextGot(ctrl *gomock.Controller) *MockComparableContextGot {
	mock := &MockComparableContextGot{ctrl: ctrl}
	mock.recorder = &MockComparableContextGotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComparableContextGot) EXPECT() *MockComparableContextGotMockRecorder {
	return m.recorder
}

// GetAADB mocks base method.
func (m *MockComparableContextGot) GetAADB() models.AADB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAADB")
	ret0, _ := ret[0].(models.AADB)
	return ret0
}

// GetAADB indicates an expected call of GetAADB.
func (mr *MockComparableContextGotMockRecorder) GetAADB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAADB", reflect.TypeOf((*MockComparableContextGot)(nil).GetAADB))
}

// GetAppInfo mocks base method.
func (m *MockComparableContextGot) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockComparableContextGotMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockComparableContextGot)(nil).GetAppInfo))
}

// GetAuth mocks base method.
func (m *MockComparableContextGot) GetAuth() models.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth")
	ret0, _ := ret[0].(models.Auth)
	return ret0
}

// GetAuth indicates an expected call of GetAuth.
func (mr *MockComparableContextGotMockRecorder) GetAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockComparableContextGot)(nil).GetAuth))
}

// GetAuthOrErr mocks base method.
func (m *MockComparableContextGot) GetAuthOrErr() (models.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthOrErr")
	ret0, _ := ret[0].(models.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthOrErr indicates an expected call of GetAuthOrErr.
func (mr *MockComparableContextGotMockRecorder) GetAuthOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetAuthOrErr))
}

// GetBigB mocks base method.
func (m *MockComparableContextGot) GetBigB() models.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigB")
	ret0, _ := ret[0].(models.BigB)
	return ret0
}

// GetBigB indicates an expected call of GetBigB.
func (mr *MockComparableContextGotMockRecorder) GetBigB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigB", reflect.TypeOf((*MockComparableContextGot)(nil).GetBigB))
}

// GetBigBOrErr mocks base method.
func (m *MockComparableContextGot) GetBigBOrErr() (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBOrErr")
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBOrErr indicates an expected call of GetBigBOrErr.
func (mr *MockComparableContextGotMockRecorder) GetBigBOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetBigBOrErr))
}

// GetBigBURL mocks base method.
func (m *MockComparableContextGot) GetBigBURL() *proto.TQueryParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBURL")
	ret0, _ := ret[0].(*proto.TQueryParams)
	return ret0
}

// GetBigBURL indicates an expected call of GetBigBURL.
func (mr *MockComparableContextGotMockRecorder) GetBigBURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBURL", reflect.TypeOf((*MockComparableContextGot)(nil).GetBigBURL))
}

// GetCSP mocks base method.
func (m *MockComparableContextGot) GetCSP() models.CSP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSP")
	ret0, _ := ret[0].(models.CSP)
	return ret0
}

// GetCSP indicates an expected call of GetCSP.
func (mr *MockComparableContextGotMockRecorder) GetCSP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSP", reflect.TypeOf((*MockComparableContextGot)(nil).GetCSP))
}

// GetClid mocks base method.
func (m *MockComparableContextGot) GetClid() models.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClid")
	ret0, _ := ret[0].(models.Clid)
	return ret0
}

// GetClid indicates an expected call of GetClid.
func (mr *MockComparableContextGotMockRecorder) GetClid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClid", reflect.TypeOf((*MockComparableContextGot)(nil).GetClid))
}

// GetCookie mocks base method.
func (m *MockComparableContextGot) GetCookie() models.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie")
	ret0, _ := ret[0].(models.Cookie)
	return ret0
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockComparableContextGotMockRecorder) GetCookie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockComparableContextGot)(nil).GetCookie))
}

// GetDevice mocks base method.
func (m *MockComparableContextGot) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockComparableContextGotMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockComparableContextGot)(nil).GetDevice))
}

// GetDeviceOrErr mocks base method.
func (m *MockComparableContextGot) GetDeviceOrErr() (models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOrErr")
	ret0, _ := ret[0].(models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceOrErr indicates an expected call of GetDeviceOrErr.
func (mr *MockComparableContextGotMockRecorder) GetDeviceOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetDeviceOrErr))
}

// GetDomain mocks base method.
func (m *MockComparableContextGot) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockComparableContextGotMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockComparableContextGot)(nil).GetDomain))
}

// GetFlags mocks base method.
func (m *MockComparableContextGot) GetFlags() models.ABFlags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlags")
	ret0, _ := ret[0].(models.ABFlags)
	return ret0
}

// GetFlags indicates an expected call of GetFlags.
func (mr *MockComparableContextGotMockRecorder) GetFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlags", reflect.TypeOf((*MockComparableContextGot)(nil).GetFlags))
}

// GetFlagsOrErr mocks base method.
func (m *MockComparableContextGot) GetFlagsOrErr() (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsOrErr")
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsOrErr indicates an expected call of GetFlagsOrErr.
func (mr *MockComparableContextGotMockRecorder) GetFlagsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetFlagsOrErr))
}

// GetGeo mocks base method.
func (m *MockComparableContextGot) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockComparableContextGotMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockComparableContextGot)(nil).GetGeo))
}

// GetGeoOrErr mocks base method.
func (m *MockComparableContextGot) GetGeoOrErr() (models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoOrErr")
	ret0, _ := ret[0].(models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoOrErr indicates an expected call of GetGeoOrErr.
func (mr *MockComparableContextGotMockRecorder) GetGeoOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetGeoOrErr))
}

// GetLocale mocks base method.
func (m *MockComparableContextGot) GetLocale() models.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocale")
	ret0, _ := ret[0].(models.Locale)
	return ret0
}

// GetLocale indicates an expected call of GetLocale.
func (mr *MockComparableContextGotMockRecorder) GetLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocale", reflect.TypeOf((*MockComparableContextGot)(nil).GetLocale))
}

// GetLogger mocks base method.
func (m *MockComparableContextGot) GetLogger() log3.LoggerAlterable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(log3.LoggerAlterable)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockComparableContextGotMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockComparableContextGot)(nil).GetLogger))
}

// GetMadmContent mocks base method.
func (m *MockComparableContextGot) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockComparableContextGotMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockComparableContextGot)(nil).GetMadmContent))
}

// GetMadmOptions mocks base method.
func (m *MockComparableContextGot) GetMadmOptions() exports.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmOptions")
	ret0, _ := ret[0].(exports.Options)
	return ret0
}

// GetMadmOptions indicates an expected call of GetMadmOptions.
func (mr *MockComparableContextGotMockRecorder) GetMadmOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmOptions", reflect.TypeOf((*MockComparableContextGot)(nil).GetMadmOptions))
}

// GetMordaContent mocks base method.
func (m *MockComparableContextGot) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockComparableContextGotMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockComparableContextGot)(nil).GetMordaContent))
}

// GetMordaZone mocks base method.
func (m *MockComparableContextGot) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockComparableContextGotMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockComparableContextGot)(nil).GetMordaZone))
}

// GetOriginRequest mocks base method.
func (m *MockComparableContextGot) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockComparableContextGotMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockComparableContextGot)(nil).GetOriginRequest))
}

// GetPerlAuthInfo mocks base method.
func (m *MockComparableContextGot) GetPerlAuthInfo() (blackbox.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlAuthInfo")
	ret0, _ := ret[0].(blackbox.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerlAuthInfo indicates an expected call of GetPerlAuthInfo.
func (mr *MockComparableContextGotMockRecorder) GetPerlAuthInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlAuthInfo", reflect.TypeOf((*MockComparableContextGot)(nil).GetPerlAuthInfo))
}

// GetPerlScaleFactor mocks base method.
func (m *MockComparableContextGot) GetPerlScaleFactor() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlScaleFactor")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetPerlScaleFactor indicates an expected call of GetPerlScaleFactor.
func (mr *MockComparableContextGotMockRecorder) GetPerlScaleFactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlScaleFactor", reflect.TypeOf((*MockComparableContextGot)(nil).GetPerlScaleFactor))
}

// GetReqTime mocks base method.
func (m *MockComparableContextGot) GetReqTime() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqTime")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetReqTime indicates an expected call of GetReqTime.
func (mr *MockComparableContextGotMockRecorder) GetReqTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqTime", reflect.TypeOf((*MockComparableContextGot)(nil).GetReqTime))
}

// GetRequest mocks base method.
func (m *MockComparableContextGot) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockComparableContextGotMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockComparableContextGot)(nil).GetRequest))
}

// GetRobot mocks base method.
func (m *MockComparableContextGot) GetRobot() models.Robot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobot")
	ret0, _ := ret[0].(models.Robot)
	return ret0
}

// GetRobot indicates an expected call of GetRobot.
func (mr *MockComparableContextGotMockRecorder) GetRobot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobot", reflect.TypeOf((*MockComparableContextGot)(nil).GetRobot))
}

// GetRobotOrErr mocks base method.
func (m *MockComparableContextGot) GetRobotOrErr() (models.Robot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotOrErr")
	ret0, _ := ret[0].(models.Robot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotOrErr indicates an expected call of GetRobotOrErr.
func (mr *MockComparableContextGotMockRecorder) GetRobotOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetRobotOrErr))
}

// GetTime mocks base method.
func (m *MockComparableContextGot) GetTime() *models.TimeData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(*models.TimeData)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockComparableContextGotMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockComparableContextGot)(nil).GetTime))
}

// GetYaCookies mocks base method.
func (m *MockComparableContextGot) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockComparableContextGotMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockComparableContextGot)(nil).GetYaCookies))
}

// GetYaCookiesOrErr mocks base method.
func (m *MockComparableContextGot) GetYaCookiesOrErr() (models.YaCookies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookiesOrErr")
	ret0, _ := ret[0].(models.YaCookies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYaCookiesOrErr indicates an expected call of GetYaCookiesOrErr.
func (mr *MockComparableContextGotMockRecorder) GetYaCookiesOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookiesOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetYaCookiesOrErr))
}

// GetYabs mocks base method.
func (m *MockComparableContextGot) GetYabs() models.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabs")
	ret0, _ := ret[0].(models.Yabs)
	return ret0
}

// GetYabs indicates an expected call of GetYabs.
func (mr *MockComparableContextGotMockRecorder) GetYabs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabs", reflect.TypeOf((*MockComparableContextGot)(nil).GetYabs))
}

// GetYabsOrErr mocks base method.
func (m *MockComparableContextGot) GetYabsOrErr() (models.Yabs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsOrErr")
	ret0, _ := ret[0].(models.Yabs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYabsOrErr indicates an expected call of GetYabsOrErr.
func (mr *MockComparableContextGotMockRecorder) GetYabsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsOrErr", reflect.TypeOf((*MockComparableContextGot)(nil).GetYabsOrErr))
}

// GetYabsURL mocks base method.
func (m *MockComparableContextGot) GetYabsURL() yabs.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsURL")
	ret0, _ := ret[0].(yabs.Request)
	return ret0
}

// GetYabsURL indicates an expected call of GetYabsURL.
func (mr *MockComparableContextGotMockRecorder) GetYabsURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsURL", reflect.TypeOf((*MockComparableContextGot)(nil).GetYabsURL))
}

// IsSID669ByAuth mocks base method.
func (m *MockComparableContextGot) IsSID669ByAuth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSID669ByAuth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSID669ByAuth indicates an expected call of IsSID669ByAuth.
func (mr *MockComparableContextGotMockRecorder) IsSID669ByAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSID669ByAuth", reflect.TypeOf((*MockComparableContextGot)(nil).IsSID669ByAuth))
}

// SyncTime mocks base method.
func (m *MockComparableContextGot) SyncTime(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SyncTime", arg0)
}

// SyncTime indicates an expected call of SyncTime.
func (mr *MockComparableContextGotMockRecorder) SyncTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTime", reflect.TypeOf((*MockComparableContextGot)(nil).SyncTime), arg0)
}

// WarmCache mocks base method.
func (m *MockComparableContextGot) WarmCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// WarmCache indicates an expected call of WarmCache.
func (mr *MockComparableContextGotMockRecorder) WarmCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmCache", reflect.TypeOf((*MockComparableContextGot)(nil).WarmCache))
}

// MockForceableContextGot is a mock of ForceableContextGot interface.
type MockForceableContextGot struct {
	ctrl     *gomock.Controller
	recorder *MockForceableContextGotMockRecorder
}

// MockForceableContextGotMockRecorder is the mock recorder for MockForceableContextGot.
type MockForceableContextGotMockRecorder struct {
	mock *MockForceableContextGot
}

// NewMockForceableContextGot creates a new mock instance.
func NewMockForceableContextGot(ctrl *gomock.Controller) *MockForceableContextGot {
	mock := &MockForceableContextGot{ctrl: ctrl}
	mock.recorder = &MockForceableContextGotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForceableContextGot) EXPECT() *MockForceableContextGotMockRecorder {
	return m.recorder
}

// ForceABFlags mocks base method.
func (m *MockForceableContextGot) ForceABFlags(arg0 models.ABFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceABFlags", arg0)
}

// ForceABFlags indicates an expected call of ForceABFlags.
func (mr *MockForceableContextGotMockRecorder) ForceABFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceABFlags", reflect.TypeOf((*MockForceableContextGot)(nil).ForceABFlags), arg0)
}

// ForceAuth mocks base method.
func (m *MockForceableContextGot) ForceAuth(arg0 models.Auth) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceAuth", arg0)
}

// ForceAuth indicates an expected call of ForceAuth.
func (mr *MockForceableContextGotMockRecorder) ForceAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceAuth", reflect.TypeOf((*MockForceableContextGot)(nil).ForceAuth), arg0)
}

// ForceBigB mocks base method.
func (m *MockForceableContextGot) ForceBigB(arg0 models.BigB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceBigB", arg0)
}

// ForceBigB indicates an expected call of ForceBigB.
func (mr *MockForceableContextGotMockRecorder) ForceBigB(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceBigB", reflect.TypeOf((*MockForceableContextGot)(nil).ForceBigB), arg0)
}

// ForceClid mocks base method.
func (m *MockForceableContextGot) ForceClid(arg0 models.Clid) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceClid", arg0)
}

// ForceClid indicates an expected call of ForceClid.
func (mr *MockForceableContextGotMockRecorder) ForceClid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceClid", reflect.TypeOf((*MockForceableContextGot)(nil).ForceClid), arg0)
}

// ForceDevice mocks base method.
func (m *MockForceableContextGot) ForceDevice(arg0 models.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceDevice", arg0)
}

// ForceDevice indicates an expected call of ForceDevice.
func (mr *MockForceableContextGotMockRecorder) ForceDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceDevice", reflect.TypeOf((*MockForceableContextGot)(nil).ForceDevice), arg0)
}

// ForceGeo mocks base method.
func (m *MockForceableContextGot) ForceGeo(arg0 models.Geo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceGeo", arg0)
}

// ForceGeo indicates an expected call of ForceGeo.
func (mr *MockForceableContextGotMockRecorder) ForceGeo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceGeo", reflect.TypeOf((*MockForceableContextGot)(nil).ForceGeo), arg0)
}

// ForceLocale mocks base method.
func (m *MockForceableContextGot) ForceLocale(arg0 models.Locale) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceLocale", arg0)
}

// ForceLocale indicates an expected call of ForceLocale.
func (mr *MockForceableContextGotMockRecorder) ForceLocale(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceLocale", reflect.TypeOf((*MockForceableContextGot)(nil).ForceLocale), arg0)
}

// ForceMordaContent mocks base method.
func (m *MockForceableContextGot) ForceMordaContent(arg0 models.MordaContent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceMordaContent", arg0)
}

// ForceMordaContent indicates an expected call of ForceMordaContent.
func (mr *MockForceableContextGotMockRecorder) ForceMordaContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceMordaContent", reflect.TypeOf((*MockForceableContextGot)(nil).ForceMordaContent), arg0)
}

// ForceMordaZone mocks base method.
func (m *MockForceableContextGot) ForceMordaZone(arg0 models.MordaZone) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceMordaZone", arg0)
}

// ForceMordaZone indicates an expected call of ForceMordaZone.
func (mr *MockForceableContextGotMockRecorder) ForceMordaZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceMordaZone", reflect.TypeOf((*MockForceableContextGot)(nil).ForceMordaZone), arg0)
}

// ForceRobot mocks base method.
func (m *MockForceableContextGot) ForceRobot(arg0 models.Robot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceRobot", arg0)
}

// ForceRobot indicates an expected call of ForceRobot.
func (mr *MockForceableContextGotMockRecorder) ForceRobot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceRobot", reflect.TypeOf((*MockForceableContextGot)(nil).ForceRobot), arg0)
}

// ForceYabs mocks base method.
func (m *MockForceableContextGot) ForceYabs(arg0 models.Yabs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceYabs", arg0)
}

// ForceYabs indicates an expected call of ForceYabs.
func (mr *MockForceableContextGotMockRecorder) ForceYabs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceYabs", reflect.TypeOf((*MockForceableContextGot)(nil).ForceYabs), arg0)
}

// ForceYandexUID mocks base method.
func (m *MockForceableContextGot) ForceYandexUID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForceYandexUID", arg0)
}

// ForceYandexUID indicates an expected call of ForceYandexUID.
func (mr *MockForceableContextGotMockRecorder) ForceYandexUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceYandexUID", reflect.TypeOf((*MockForceableContextGot)(nil).ForceYandexUID), arg0)
}

// GetAADB mocks base method.
func (m *MockForceableContextGot) GetAADB() models.AADB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAADB")
	ret0, _ := ret[0].(models.AADB)
	return ret0
}

// GetAADB indicates an expected call of GetAADB.
func (mr *MockForceableContextGotMockRecorder) GetAADB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAADB", reflect.TypeOf((*MockForceableContextGot)(nil).GetAADB))
}

// GetAppInfo mocks base method.
func (m *MockForceableContextGot) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockForceableContextGotMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockForceableContextGot)(nil).GetAppInfo))
}

// GetAuth mocks base method.
func (m *MockForceableContextGot) GetAuth() models.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth")
	ret0, _ := ret[0].(models.Auth)
	return ret0
}

// GetAuth indicates an expected call of GetAuth.
func (mr *MockForceableContextGotMockRecorder) GetAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockForceableContextGot)(nil).GetAuth))
}

// GetAuthOrErr mocks base method.
func (m *MockForceableContextGot) GetAuthOrErr() (models.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthOrErr")
	ret0, _ := ret[0].(models.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthOrErr indicates an expected call of GetAuthOrErr.
func (mr *MockForceableContextGotMockRecorder) GetAuthOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetAuthOrErr))
}

// GetBigB mocks base method.
func (m *MockForceableContextGot) GetBigB() models.BigB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigB")
	ret0, _ := ret[0].(models.BigB)
	return ret0
}

// GetBigB indicates an expected call of GetBigB.
func (mr *MockForceableContextGotMockRecorder) GetBigB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigB", reflect.TypeOf((*MockForceableContextGot)(nil).GetBigB))
}

// GetBigBOrErr mocks base method.
func (m *MockForceableContextGot) GetBigBOrErr() (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBOrErr")
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBOrErr indicates an expected call of GetBigBOrErr.
func (mr *MockForceableContextGotMockRecorder) GetBigBOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetBigBOrErr))
}

// GetBigBURL mocks base method.
func (m *MockForceableContextGot) GetBigBURL() *proto.TQueryParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBURL")
	ret0, _ := ret[0].(*proto.TQueryParams)
	return ret0
}

// GetBigBURL indicates an expected call of GetBigBURL.
func (mr *MockForceableContextGotMockRecorder) GetBigBURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBURL", reflect.TypeOf((*MockForceableContextGot)(nil).GetBigBURL))
}

// GetCSP mocks base method.
func (m *MockForceableContextGot) GetCSP() models.CSP {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCSP")
	ret0, _ := ret[0].(models.CSP)
	return ret0
}

// GetCSP indicates an expected call of GetCSP.
func (mr *MockForceableContextGotMockRecorder) GetCSP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCSP", reflect.TypeOf((*MockForceableContextGot)(nil).GetCSP))
}

// GetClid mocks base method.
func (m *MockForceableContextGot) GetClid() models.Clid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClid")
	ret0, _ := ret[0].(models.Clid)
	return ret0
}

// GetClid indicates an expected call of GetClid.
func (mr *MockForceableContextGotMockRecorder) GetClid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClid", reflect.TypeOf((*MockForceableContextGot)(nil).GetClid))
}

// GetCookie mocks base method.
func (m *MockForceableContextGot) GetCookie() models.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie")
	ret0, _ := ret[0].(models.Cookie)
	return ret0
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockForceableContextGotMockRecorder) GetCookie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockForceableContextGot)(nil).GetCookie))
}

// GetDevice mocks base method.
func (m *MockForceableContextGot) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockForceableContextGotMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockForceableContextGot)(nil).GetDevice))
}

// GetDeviceOrErr mocks base method.
func (m *MockForceableContextGot) GetDeviceOrErr() (models.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceOrErr")
	ret0, _ := ret[0].(models.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceOrErr indicates an expected call of GetDeviceOrErr.
func (mr *MockForceableContextGotMockRecorder) GetDeviceOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetDeviceOrErr))
}

// GetDomain mocks base method.
func (m *MockForceableContextGot) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockForceableContextGotMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockForceableContextGot)(nil).GetDomain))
}

// GetFlags mocks base method.
func (m *MockForceableContextGot) GetFlags() models.ABFlags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlags")
	ret0, _ := ret[0].(models.ABFlags)
	return ret0
}

// GetFlags indicates an expected call of GetFlags.
func (mr *MockForceableContextGotMockRecorder) GetFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlags", reflect.TypeOf((*MockForceableContextGot)(nil).GetFlags))
}

// GetFlagsOrErr mocks base method.
func (m *MockForceableContextGot) GetFlagsOrErr() (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagsOrErr")
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagsOrErr indicates an expected call of GetFlagsOrErr.
func (mr *MockForceableContextGotMockRecorder) GetFlagsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagsOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetFlagsOrErr))
}

// GetGeo mocks base method.
func (m *MockForceableContextGot) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockForceableContextGotMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockForceableContextGot)(nil).GetGeo))
}

// GetGeoOrErr mocks base method.
func (m *MockForceableContextGot) GetGeoOrErr() (models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeoOrErr")
	ret0, _ := ret[0].(models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeoOrErr indicates an expected call of GetGeoOrErr.
func (mr *MockForceableContextGotMockRecorder) GetGeoOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetGeoOrErr))
}

// GetLocale mocks base method.
func (m *MockForceableContextGot) GetLocale() models.Locale {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocale")
	ret0, _ := ret[0].(models.Locale)
	return ret0
}

// GetLocale indicates an expected call of GetLocale.
func (mr *MockForceableContextGotMockRecorder) GetLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocale", reflect.TypeOf((*MockForceableContextGot)(nil).GetLocale))
}

// GetLogger mocks base method.
func (m *MockForceableContextGot) GetLogger() log3.LoggerAlterable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(log3.LoggerAlterable)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockForceableContextGotMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockForceableContextGot)(nil).GetLogger))
}

// GetMadmContent mocks base method.
func (m *MockForceableContextGot) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockForceableContextGotMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockForceableContextGot)(nil).GetMadmContent))
}

// GetMadmOptions mocks base method.
func (m *MockForceableContextGot) GetMadmOptions() exports.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmOptions")
	ret0, _ := ret[0].(exports.Options)
	return ret0
}

// GetMadmOptions indicates an expected call of GetMadmOptions.
func (mr *MockForceableContextGotMockRecorder) GetMadmOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmOptions", reflect.TypeOf((*MockForceableContextGot)(nil).GetMadmOptions))
}

// GetMordaContent mocks base method.
func (m *MockForceableContextGot) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockForceableContextGotMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockForceableContextGot)(nil).GetMordaContent))
}

// GetMordaZone mocks base method.
func (m *MockForceableContextGot) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockForceableContextGotMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockForceableContextGot)(nil).GetMordaZone))
}

// GetOriginRequest mocks base method.
func (m *MockForceableContextGot) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockForceableContextGotMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockForceableContextGot)(nil).GetOriginRequest))
}

// GetPerlAuthInfo mocks base method.
func (m *MockForceableContextGot) GetPerlAuthInfo() (blackbox.AuthInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlAuthInfo")
	ret0, _ := ret[0].(blackbox.AuthInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPerlAuthInfo indicates an expected call of GetPerlAuthInfo.
func (mr *MockForceableContextGotMockRecorder) GetPerlAuthInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlAuthInfo", reflect.TypeOf((*MockForceableContextGot)(nil).GetPerlAuthInfo))
}

// GetPerlScaleFactor mocks base method.
func (m *MockForceableContextGot) GetPerlScaleFactor() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerlScaleFactor")
	ret0, _ := ret[0].(float32)
	return ret0
}

// GetPerlScaleFactor indicates an expected call of GetPerlScaleFactor.
func (mr *MockForceableContextGotMockRecorder) GetPerlScaleFactor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerlScaleFactor", reflect.TypeOf((*MockForceableContextGot)(nil).GetPerlScaleFactor))
}

// GetReqTime mocks base method.
func (m *MockForceableContextGot) GetReqTime() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReqTime")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetReqTime indicates an expected call of GetReqTime.
func (mr *MockForceableContextGotMockRecorder) GetReqTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReqTime", reflect.TypeOf((*MockForceableContextGot)(nil).GetReqTime))
}

// GetRequest mocks base method.
func (m *MockForceableContextGot) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockForceableContextGotMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockForceableContextGot)(nil).GetRequest))
}

// GetRobot mocks base method.
func (m *MockForceableContextGot) GetRobot() models.Robot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobot")
	ret0, _ := ret[0].(models.Robot)
	return ret0
}

// GetRobot indicates an expected call of GetRobot.
func (mr *MockForceableContextGotMockRecorder) GetRobot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobot", reflect.TypeOf((*MockForceableContextGot)(nil).GetRobot))
}

// GetRobotOrErr mocks base method.
func (m *MockForceableContextGot) GetRobotOrErr() (models.Robot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobotOrErr")
	ret0, _ := ret[0].(models.Robot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRobotOrErr indicates an expected call of GetRobotOrErr.
func (mr *MockForceableContextGotMockRecorder) GetRobotOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobotOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetRobotOrErr))
}

// GetTime mocks base method.
func (m *MockForceableContextGot) GetTime() *models.TimeData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(*models.TimeData)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MockForceableContextGotMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MockForceableContextGot)(nil).GetTime))
}

// GetYaCookies mocks base method.
func (m *MockForceableContextGot) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockForceableContextGotMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockForceableContextGot)(nil).GetYaCookies))
}

// GetYaCookiesOrErr mocks base method.
func (m *MockForceableContextGot) GetYaCookiesOrErr() (models.YaCookies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookiesOrErr")
	ret0, _ := ret[0].(models.YaCookies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYaCookiesOrErr indicates an expected call of GetYaCookiesOrErr.
func (mr *MockForceableContextGotMockRecorder) GetYaCookiesOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookiesOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetYaCookiesOrErr))
}

// GetYabs mocks base method.
func (m *MockForceableContextGot) GetYabs() models.Yabs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabs")
	ret0, _ := ret[0].(models.Yabs)
	return ret0
}

// GetYabs indicates an expected call of GetYabs.
func (mr *MockForceableContextGotMockRecorder) GetYabs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabs", reflect.TypeOf((*MockForceableContextGot)(nil).GetYabs))
}

// GetYabsOrErr mocks base method.
func (m *MockForceableContextGot) GetYabsOrErr() (models.Yabs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsOrErr")
	ret0, _ := ret[0].(models.Yabs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetYabsOrErr indicates an expected call of GetYabsOrErr.
func (mr *MockForceableContextGotMockRecorder) GetYabsOrErr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsOrErr", reflect.TypeOf((*MockForceableContextGot)(nil).GetYabsOrErr))
}

// GetYabsURL mocks base method.
func (m *MockForceableContextGot) GetYabsURL() yabs.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYabsURL")
	ret0, _ := ret[0].(yabs.Request)
	return ret0
}

// GetYabsURL indicates an expected call of GetYabsURL.
func (mr *MockForceableContextGotMockRecorder) GetYabsURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYabsURL", reflect.TypeOf((*MockForceableContextGot)(nil).GetYabsURL))
}

// IsSID669ByAuth mocks base method.
func (m *MockForceableContextGot) IsSID669ByAuth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSID669ByAuth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSID669ByAuth indicates an expected call of IsSID669ByAuth.
func (mr *MockForceableContextGotMockRecorder) IsSID669ByAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSID669ByAuth", reflect.TypeOf((*MockForceableContextGot)(nil).IsSID669ByAuth))
}

// RefreshABFlags mocks base method.
func (m *MockForceableContextGot) RefreshABFlags() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshABFlags")
}

// RefreshABFlags indicates an expected call of RefreshABFlags.
func (mr *MockForceableContextGotMockRecorder) RefreshABFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshABFlags", reflect.TypeOf((*MockForceableContextGot)(nil).RefreshABFlags))
}

// RefreshLocale mocks base method.
func (m *MockForceableContextGot) RefreshLocale() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshLocale")
}

// RefreshLocale indicates an expected call of RefreshLocale.
func (mr *MockForceableContextGotMockRecorder) RefreshLocale() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshLocale", reflect.TypeOf((*MockForceableContextGot)(nil).RefreshLocale))
}

// RefreshMadmContent mocks base method.
func (m *MockForceableContextGot) RefreshMadmContent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshMadmContent")
}

// RefreshMadmContent indicates an expected call of RefreshMadmContent.
func (mr *MockForceableContextGotMockRecorder) RefreshMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMadmContent", reflect.TypeOf((*MockForceableContextGot)(nil).RefreshMadmContent))
}

// RefreshMordaZone mocks base method.
func (m *MockForceableContextGot) RefreshMordaZone() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshMordaZone")
}

// RefreshMordaZone indicates an expected call of RefreshMordaZone.
func (mr *MockForceableContextGotMockRecorder) RefreshMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshMordaZone", reflect.TypeOf((*MockForceableContextGot)(nil).RefreshMordaZone))
}

// RefreshTimeLocation mocks base method.
func (m *MockForceableContextGot) RefreshTimeLocation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshTimeLocation")
}

// RefreshTimeLocation indicates an expected call of RefreshTimeLocation.
func (mr *MockForceableContextGotMockRecorder) RefreshTimeLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTimeLocation", reflect.TypeOf((*MockForceableContextGot)(nil).RefreshTimeLocation))
}

// SetIsStaffLogin mocks base method.
func (m *MockForceableContextGot) SetIsStaffLogin() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIsStaffLogin")
}

// SetIsStaffLogin indicates an expected call of SetIsStaffLogin.
func (mr *MockForceableContextGotMockRecorder) SetIsStaffLogin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsStaffLogin", reflect.TypeOf((*MockForceableContextGot)(nil).SetIsStaffLogin))
}

// SyncTime mocks base method.
func (m *MockForceableContextGot) SyncTime(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SyncTime", arg0)
}

// SyncTime indicates an expected call of SyncTime.
func (mr *MockForceableContextGotMockRecorder) SyncTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTime", reflect.TypeOf((*MockForceableContextGot)(nil).SyncTime), arg0)
}

// WarmCache mocks base method.
func (m *MockForceableContextGot) WarmCache() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarmCache")
	ret0, _ := ret[0].(error)
	return ret0
}

// WarmCache indicates an expected call of WarmCache.
func (mr *MockForceableContextGotMockRecorder) WarmCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarmCache", reflect.TypeOf((*MockForceableContextGot)(nil).WarmCache))
}

// MockBaseComparator is a mock of BaseComparator interface.
type MockBaseComparator struct {
	ctrl     *gomock.Controller
	recorder *MockBaseComparatorMockRecorder
}

// MockBaseComparatorMockRecorder is the mock recorder for MockBaseComparator.
type MockBaseComparatorMockRecorder struct {
	mock *MockBaseComparator
}

// NewMockBaseComparator creates a new mock instance.
func NewMockBaseComparator(ctrl *gomock.Controller) *MockBaseComparator {
	mock := &MockBaseComparator{ctrl: ctrl}
	mock.recorder = &MockBaseComparatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseComparator) EXPECT() *MockBaseComparatorMockRecorder {
	return m.recorder
}

// CompareContext mocks base method.
func (m *MockBaseComparator) CompareContext(expected ComparableContextExpected, got ForceableContextGot) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareContext", expected, got)
	ret0, _ := ret[0].([]error)
	return ret0
}

// CompareContext indicates an expected call of CompareContext.
func (mr *MockBaseComparatorMockRecorder) CompareContext(expected, got interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareContext", reflect.TypeOf((*MockBaseComparator)(nil).CompareContext), expected, got)
}

// Mockcomparator is a mock of comparator interface.
type Mockcomparator struct {
	ctrl     *gomock.Controller
	recorder *MockcomparatorMockRecorder
}

// MockcomparatorMockRecorder is the mock recorder for Mockcomparator.
type MockcomparatorMockRecorder struct {
	mock *Mockcomparator
}

// NewMockcomparator creates a new mock instance.
func NewMockcomparator(ctrl *gomock.Controller) *Mockcomparator {
	mock := &Mockcomparator{ctrl: ctrl}
	mock.recorder = &MockcomparatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcomparator) EXPECT() *MockcomparatorMockRecorder {
	return m.recorder
}

// compare mocks base method.
func (m *Mockcomparator) compare(expected ComparableContextExpected, got ComparableContextGot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "compare", expected, got)
	ret0, _ := ret[0].(error)
	return ret0
}

// compare indicates an expected call of compare.
func (mr *MockcomparatorMockRecorder) compare(expected, got interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "compare", reflect.TypeOf((*Mockcomparator)(nil).compare), expected, got)
}

// force mocks base method.
func (m *Mockcomparator) force(expected ComparableContextExpected, got ForceableContextGot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "force", expected, got)
	ret0, _ := ret[0].(error)
	return ret0
}

// force indicates an expected call of force.
func (mr *MockcomparatorMockRecorder) force(expected, got interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "force", reflect.TypeOf((*Mockcomparator)(nil).force), expected, got)
}

// incrementMetric mocks base method.
func (m *Mockcomparator) incrementMetric(metric string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "incrementMetric", metric)
}

// incrementMetric indicates an expected call of incrementMetric.
func (mr *MockcomparatorMockRecorder) incrementMetric(metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "incrementMetric", reflect.TypeOf((*Mockcomparator)(nil).incrementMetric), metric)
}

// Mockrandomizer is a mock of randomizer interface.
type Mockrandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockrandomizerMockRecorder
}

// MockrandomizerMockRecorder is the mock recorder for Mockrandomizer.
type MockrandomizerMockRecorder struct {
	mock *Mockrandomizer
}

// NewMockrandomizer creates a new mock instance.
func NewMockrandomizer(ctrl *gomock.Controller) *Mockrandomizer {
	mock := &Mockrandomizer{ctrl: ctrl}
	mock.recorder = &MockrandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrandomizer) EXPECT() *MockrandomizerMockRecorder {
	return m.recorder
}

// randomPercent mocks base method.
func (m *Mockrandomizer) randomPercent() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "randomPercent")
	ret0, _ := ret[0].(int)
	return ret0
}

// randomPercent indicates an expected call of randomPercent.
func (mr *MockrandomizerMockRecorder) randomPercent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "randomPercent", reflect.TypeOf((*Mockrandomizer)(nil).randomPercent))
}

// MockfunctionallyComparable is a mock of functionallyComparable interface.
type MockfunctionallyComparable struct {
	ctrl     *gomock.Controller
	recorder *MockfunctionallyComparableMockRecorder
}

// MockfunctionallyComparableMockRecorder is the mock recorder for MockfunctionallyComparable.
type MockfunctionallyComparableMockRecorder struct {
	mock *MockfunctionallyComparable
}

// NewMockfunctionallyComparable creates a new mock instance.
func NewMockfunctionallyComparable(ctrl *gomock.Controller) *MockfunctionallyComparable {
	mock := &MockfunctionallyComparable{ctrl: ctrl}
	mock.recorder = &MockfunctionallyComparableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfunctionallyComparable) EXPECT() *MockfunctionallyComparableMockRecorder {
	return m.recorder
}

// IsEqual mocks base method.
func (m *MockfunctionallyComparable) IsEqual(other interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEqual", other)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEqual indicates an expected call of IsEqual.
func (mr *MockfunctionallyComparableMockRecorder) IsEqual(other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEqual", reflect.TypeOf((*MockfunctionallyComparable)(nil).IsEqual), other)
}

// MockmadmDataGetter is a mock of madmDataGetter interface.
type MockmadmDataGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmadmDataGetterMockRecorder
}

// MockmadmDataGetterMockRecorder is the mock recorder for MockmadmDataGetter.
type MockmadmDataGetterMockRecorder struct {
	mock *MockmadmDataGetter
}

// NewMockmadmDataGetter creates a new mock instance.
func NewMockmadmDataGetter(ctrl *gomock.Controller) *MockmadmDataGetter {
	mock := &MockmadmDataGetter{ctrl: ctrl}
	mock.recorder = &MockmadmDataGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmDataGetter) EXPECT() *MockmadmDataGetterMockRecorder {
	return m.recorder
}

// StaticData mocks base method.
func (m *MockmadmDataGetter) StaticData(exportName madm.ExportName, ctx contexts.Base, args ...madm.Arg) (madm.Items, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{exportName, ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StaticData", varargs...)
	ret0, _ := ret[0].(madm.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaticData indicates an expected call of StaticData.
func (mr *MockmadmDataGetterMockRecorder) StaticData(exportName, ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{exportName, ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticData", reflect.TypeOf((*MockmadmDataGetter)(nil).StaticData), varargs...)
}

// StaticDataAll mocks base method.
func (m *MockmadmDataGetter) StaticDataAll(exportName madm.ExportName) (madm.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaticDataAll", exportName)
	ret0, _ := ret[0].(madm.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StaticDataAll indicates an expected call of StaticDataAll.
func (mr *MockmadmDataGetterMockRecorder) StaticDataAll(exportName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaticDataAll", reflect.TypeOf((*MockmadmDataGetter)(nil).StaticDataAll), exportName)
}

// MockitsComparatorOptionsGetter is a mock of itsComparatorOptionsGetter interface.
type MockitsComparatorOptionsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockitsComparatorOptionsGetterMockRecorder
}

// MockitsComparatorOptionsGetterMockRecorder is the mock recorder for MockitsComparatorOptionsGetter.
type MockitsComparatorOptionsGetterMockRecorder struct {
	mock *MockitsComparatorOptionsGetter
}

// NewMockitsComparatorOptionsGetter creates a new mock instance.
func NewMockitsComparatorOptionsGetter(ctrl *gomock.Controller) *MockitsComparatorOptionsGetter {
	mock := &MockitsComparatorOptionsGetter{ctrl: ctrl}
	mock.recorder = &MockitsComparatorOptionsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockitsComparatorOptionsGetter) EXPECT() *MockitsComparatorOptionsGetterMockRecorder {
	return m.recorder
}

// GetComparatorOptions mocks base method.
func (m *MockitsComparatorOptionsGetter) GetComparatorOptions() its.ComparatorOptions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComparatorOptions")
	ret0, _ := ret[0].(its.ComparatorOptions)
	return ret0
}

// GetComparatorOptions indicates an expected call of GetComparatorOptions.
func (mr *MockitsComparatorOptionsGetterMockRecorder) GetComparatorOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComparatorOptions", reflect.TypeOf((*MockitsComparatorOptionsGetter)(nil).GetComparatorOptions))
}

// MocklangProvider is a mock of langProvider interface.
type MocklangProvider struct {
	ctrl     *gomock.Controller
	recorder *MocklangProviderMockRecorder
}

// MocklangProviderMockRecorder is the mock recorder for MocklangProvider.
type MocklangProviderMockRecorder struct {
	mock *MocklangProvider
}

// NewMocklangProvider creates a new mock instance.
func NewMocklangProvider(ctrl *gomock.Controller) *MocklangProvider {
	mock := &MocklangProvider{ctrl: ctrl}
	mock.recorder = &MocklangProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklangProvider) EXPECT() *MocklangProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MocklangProvider) Get(key, locale string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, locale)
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MocklangProviderMockRecorder) Get(key, locale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MocklangProvider)(nil).Get), key, locale)
}

// GetFallbackLocale mocks base method.
func (m *MocklangProvider) GetFallbackLocale(locale string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFallbackLocale", locale)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFallbackLocale indicates an expected call of GetFallbackLocale.
func (mr *MocklangProviderMockRecorder) GetFallbackLocale(locale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFallbackLocale", reflect.TypeOf((*MocklangProvider)(nil).GetFallbackLocale), locale)
}

// GetInternalName mocks base method.
func (m *MocklangProvider) GetInternalName(locale string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInternalName", locale)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInternalName indicates an expected call of GetInternalName.
func (mr *MocklangProviderMockRecorder) GetInternalName(locale interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInternalName", reflect.TypeOf((*MocklangProvider)(nil).GetInternalName), locale)
}
