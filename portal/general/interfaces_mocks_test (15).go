// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package madmprocessor is a generated GoMock package.
package madmprocessor

import (
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocktimeGetter is a mock of timeGetter interface.
type MocktimeGetter struct {
	ctrl     *gomock.Controller
	recorder *MocktimeGetterMockRecorder
}

// MocktimeGetterMockRecorder is the mock recorder for MocktimeGetter.
type MocktimeGetterMockRecorder struct {
	mock *MocktimeGetter
}

// NewMocktimeGetter creates a new mock instance.
func NewMocktimeGetter(ctrl *gomock.Controller) *MocktimeGetter {
	mock := &MocktimeGetter{ctrl: ctrl}
	mock.recorder = &MocktimeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeGetter) EXPECT() *MocktimeGetterMockRecorder {
	return m.recorder
}

// GetTime mocks base method.
func (m *MocktimeGetter) GetTime() *models.TimeData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(*models.TimeData)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MocktimeGetterMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MocktimeGetter)(nil).GetTime))
}

// MockmadmContentGetter is a mock of madmContentGetter interface.
type MockmadmContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmadmContentGetterMockRecorder
}

// MockmadmContentGetterMockRecorder is the mock recorder for MockmadmContentGetter.
type MockmadmContentGetterMockRecorder struct {
	mock *MockmadmContentGetter
}

// NewMockmadmContentGetter creates a new mock instance.
func NewMockmadmContentGetter(ctrl *gomock.Controller) *MockmadmContentGetter {
	mock := &MockmadmContentGetter{ctrl: ctrl}
	mock.recorder = &MockmadmContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmContentGetter) EXPECT() *MockmadmContentGetterMockRecorder {
	return m.recorder
}

// GetMadmContent mocks base method.
func (m *MockmadmContentGetter) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockmadmContentGetterMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockmadmContentGetter)(nil).GetMadmContent))
}

// MockdeviceGetter is a mock of deviceGetter interface.
type MockdeviceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdeviceGetterMockRecorder
}

// MockdeviceGetterMockRecorder is the mock recorder for MockdeviceGetter.
type MockdeviceGetterMockRecorder struct {
	mock *MockdeviceGetter
}

// NewMockdeviceGetter creates a new mock instance.
func NewMockdeviceGetter(ctrl *gomock.Controller) *MockdeviceGetter {
	mock := &MockdeviceGetter{ctrl: ctrl}
	mock.recorder = &MockdeviceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeviceGetter) EXPECT() *MockdeviceGetterMockRecorder {
	return m.recorder
}

// GetDevice mocks base method.
func (m *MockdeviceGetter) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockdeviceGetterMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockdeviceGetter)(nil).GetDevice))
}

// MockmordaZoneGetter is a mock of mordaZoneGetter interface.
type MockmordaZoneGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordaZoneGetterMockRecorder
}

// MockmordaZoneGetterMockRecorder is the mock recorder for MockmordaZoneGetter.
type MockmordaZoneGetterMockRecorder struct {
	mock *MockmordaZoneGetter
}

// NewMockmordaZoneGetter creates a new mock instance.
func NewMockmordaZoneGetter(ctrl *gomock.Controller) *MockmordaZoneGetter {
	mock := &MockmordaZoneGetter{ctrl: ctrl}
	mock.recorder = &MockmordaZoneGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaZoneGetter) EXPECT() *MockmordaZoneGetterMockRecorder {
	return m.recorder
}

// GetMordaZone mocks base method.
func (m *MockmordaZoneGetter) GetMordaZone() models.MordaZone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaZone")
	ret0, _ := ret[0].(models.MordaZone)
	return ret0
}

// GetMordaZone indicates an expected call of GetMordaZone.
func (mr *MockmordaZoneGetterMockRecorder) GetMordaZone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaZone", reflect.TypeOf((*MockmordaZoneGetter)(nil).GetMordaZone))
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockyaCookieGetter is a mock of yaCookieGetter interface.
type MockyaCookieGetter struct {
	ctrl     *gomock.Controller
	recorder *MockyaCookieGetterMockRecorder
}

// MockyaCookieGetterMockRecorder is the mock recorder for MockyaCookieGetter.
type MockyaCookieGetterMockRecorder struct {
	mock *MockyaCookieGetter
}

// NewMockyaCookieGetter creates a new mock instance.
func NewMockyaCookieGetter(ctrl *gomock.Controller) *MockyaCookieGetter {
	mock := &MockyaCookieGetter{ctrl: ctrl}
	mock.recorder = &MockyaCookieGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyaCookieGetter) EXPECT() *MockyaCookieGetterMockRecorder {
	return m.recorder
}

// GetYaCookies mocks base method.
func (m *MockyaCookieGetter) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockyaCookieGetterMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockyaCookieGetter)(nil).GetYaCookies))
}

// MockgeoGetter is a mock of geoGetter interface.
type MockgeoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockgeoGetterMockRecorder
}

// MockgeoGetterMockRecorder is the mock recorder for MockgeoGetter.
type MockgeoGetterMockRecorder struct {
	mock *MockgeoGetter
}

// NewMockgeoGetter creates a new mock instance.
func NewMockgeoGetter(ctrl *gomock.Controller) *MockgeoGetter {
	mock := &MockgeoGetter{ctrl: ctrl}
	mock.recorder = &MockgeoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoGetter) EXPECT() *MockgeoGetterMockRecorder {
	return m.recorder
}

// GetGeo mocks base method.
func (m *MockgeoGetter) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockgeoGetterMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockgeoGetter)(nil).GetGeo))
}

// MockappInfoGetter is a mock of appInfoGetter interface.
type MockappInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockappInfoGetterMockRecorder
}

// MockappInfoGetterMockRecorder is the mock recorder for MockappInfoGetter.
type MockappInfoGetterMockRecorder struct {
	mock *MockappInfoGetter
}

// NewMockappInfoGetter creates a new mock instance.
func NewMockappInfoGetter(ctrl *gomock.Controller) *MockappInfoGetter {
	mock := &MockappInfoGetter{ctrl: ctrl}
	mock.recorder = &MockappInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappInfoGetter) EXPECT() *MockappInfoGetterMockRecorder {
	return m.recorder
}

// GetAppInfo mocks base method.
func (m *MockappInfoGetter) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockappInfoGetterMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockappInfoGetter)(nil).GetAppInfo))
}

// MockmordaContentGetter is a mock of mordaContentGetter interface.
type MockmordaContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentGetterMockRecorder
}

// MockmordaContentGetterMockRecorder is the mock recorder for MockmordaContentGetter.
type MockmordaContentGetterMockRecorder struct {
	mock *MockmordaContentGetter
}

// NewMockmordaContentGetter creates a new mock instance.
func NewMockmordaContentGetter(ctrl *gomock.Controller) *MockmordaContentGetter {
	mock := &MockmordaContentGetter{ctrl: ctrl}
	mock.recorder = &MockmordaContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentGetter) EXPECT() *MockmordaContentGetterMockRecorder {
	return m.recorder
}

// GetMordaContent mocks base method.
func (m *MockmordaContentGetter) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockmordaContentGetterMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockmordaContentGetter)(nil).GetMordaContent))
}
