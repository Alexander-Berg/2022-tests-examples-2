// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package geo is a generated GoMock package.
package geo

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	coordinates "a.yandex-team.ru/portal/avocado/libs/utils/geo/coordinates"
	laas "a.yandex-team.ru/portal/avocado/libs/utils/geo/laas"
	lbs "a.yandex-team.ru/portal/avocado/libs/utils/geo/lbs"
	madm "a.yandex-team.ru/portal/avocado/libs/utils/madm"
	time "a.yandex-team.ru/portal/avocado/libs/utils/time"
	exports "a.yandex-team.ru/portal/avocado/morda-go/pkg/exports"
	its "a.yandex-team.ru/portal/avocado/morda-go/pkg/its"
	gomock "github.com/golang/mock/gomock"
)

// Mockcontext is a mock of context interface.
type Mockcontext struct {
	ctrl     *gomock.Controller
	recorder *MockcontextMockRecorder
}

// MockcontextMockRecorder is the mock recorder for Mockcontext.
type MockcontextMockRecorder struct {
	mock *Mockcontext
}

// NewMockcontext creates a new mock instance.
func NewMockcontext(ctrl *gomock.Controller) *Mockcontext {
	mock := &Mockcontext{ctrl: ctrl}
	mock.recorder = &MockcontextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcontext) EXPECT() *MockcontextMockRecorder {
	return m.recorder
}

// AddLAASByGPAutoBalancingHint mocks base method.
func (m *Mockcontext) AddLAASByGPAutoBalancingHint(hint uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLAASByGPAutoBalancingHint", hint)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLAASByGPAutoBalancingHint indicates an expected call of AddLAASByGPAutoBalancingHint.
func (mr *MockcontextMockRecorder) AddLAASByGPAutoBalancingHint(hint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLAASByGPAutoBalancingHint", reflect.TypeOf((*Mockcontext)(nil).AddLAASByGPAutoBalancingHint), hint)
}

// AddLAASByGPAutoRequest mocks base method.
func (m *Mockcontext) AddLAASByGPAutoRequest(request *laas.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLAASByGPAutoRequest", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLAASByGPAutoRequest indicates an expected call of AddLAASByGPAutoRequest.
func (mr *MockcontextMockRecorder) AddLAASByGPAutoRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLAASByGPAutoRequest", reflect.TypeOf((*Mockcontext)(nil).AddLAASByGPAutoRequest), request)
}

// AddLBSRequest mocks base method.
func (m *Mockcontext) AddLBSRequest(request *lbs.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLBSRequest", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLBSRequest indicates an expected call of AddLBSRequest.
func (mr *MockcontextMockRecorder) AddLBSRequest(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLBSRequest", reflect.TypeOf((*Mockcontext)(nil).AddLBSRequest), request)
}

// GetLAASResponse mocks base method.
func (m *Mockcontext) GetLAASResponse() (*laas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLAASResponse")
	ret0, _ := ret[0].(*laas.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLAASResponse indicates an expected call of GetLAASResponse.
func (mr *MockcontextMockRecorder) GetLAASResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLAASResponse", reflect.TypeOf((*Mockcontext)(nil).GetLAASResponse))
}

// GetLBSLocation mocks base method.
func (m *Mockcontext) GetLBSLocation() (*lbs.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLBSLocation")
	ret0, _ := ret[0].(*lbs.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLBSLocation indicates an expected call of GetLBSLocation.
func (mr *MockcontextMockRecorder) GetLBSLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLBSLocation", reflect.TypeOf((*Mockcontext)(nil).GetLBSLocation))
}

// UpdateGeo mocks base method.
func (m *Mockcontext) UpdateGeo(geo models.Geo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGeo", geo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGeo indicates an expected call of UpdateGeo.
func (mr *MockcontextMockRecorder) UpdateGeo(geo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGeo", reflect.TypeOf((*Mockcontext)(nil).UpdateGeo), geo)
}

// Mockhandler is a mock of handler interface.
type Mockhandler struct {
	ctrl     *gomock.Controller
	recorder *MockhandlerMockRecorder
}

// MockhandlerMockRecorder is the mock recorder for Mockhandler.
type MockhandlerMockRecorder struct {
	mock *Mockhandler
}

// NewMockhandler creates a new mock instance.
func NewMockhandler(ctrl *gomock.Controller) *Mockhandler {
	mock := &Mockhandler{ctrl: ctrl}
	mock.recorder = &MockhandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhandler) EXPECT() *MockhandlerMockRecorder {
	return m.recorder
}

// GetCoordinates mocks base method.
func (m *Mockhandler) GetCoordinates(ctx context, cgi url.Values) (coordinates.Coordinates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinates", ctx, cgi)
	ret0, _ := ret[0].(coordinates.Coordinates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoordinates indicates an expected call of GetCoordinates.
func (mr *MockhandlerMockRecorder) GetCoordinates(ctx, cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinates", reflect.TypeOf((*Mockhandler)(nil).GetCoordinates), ctx, cgi)
}

// ProcessGeo mocks base method.
func (m *Mockhandler) ProcessGeo(ctx context, regionID int, coords coordinates.Coordinates) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessGeo", ctx, regionID, coords)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessGeo indicates an expected call of ProcessGeo.
func (mr *MockhandlerMockRecorder) ProcessGeo(ctx, regionID, coords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessGeo", reflect.TypeOf((*Mockhandler)(nil).ProcessGeo), ctx, regionID, coords)
}

// ProcessRegion mocks base method.
func (m *Mockhandler) ProcessRegion(ctx context, smartRegionID, superRegionID int, coords coordinates.Coordinates) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRegion", ctx, smartRegionID, superRegionID, coords)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRegion indicates an expected call of ProcessRegion.
func (mr *MockhandlerMockRecorder) ProcessRegion(ctx, smartRegionID, superRegionID, coords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRegion", reflect.TypeOf((*Mockhandler)(nil).ProcessRegion), ctx, smartRegionID, superRegionID, coords)
}

// SetupLAASByGpAuto mocks base method.
func (m *Mockhandler) SetupLAASByGpAuto(ctx context, request models.Request, coords coordinates.Coordinates, headers http.Header, appInfo models.AppInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupLAASByGpAuto", ctx, request, coords, headers, appInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupLAASByGpAuto indicates an expected call of SetupLAASByGpAuto.
func (mr *MockhandlerMockRecorder) SetupLAASByGpAuto(ctx, request, coords, headers, appInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupLAASByGpAuto", reflect.TypeOf((*Mockhandler)(nil).SetupLAASByGpAuto), ctx, request, coords, headers, appInfo)
}

// SkipLBS mocks base method.
func (m *Mockhandler) SkipLBS(request models.Request, appInfo models.AppInfo) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SkipLBS", request, appInfo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SkipLBS indicates an expected call of SkipLBS.
func (mr *MockhandlerMockRecorder) SkipLBS(request, appInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipLBS", reflect.TypeOf((*Mockhandler)(nil).SkipLBS), request, appInfo)
}

// MockgeoResolver is a mock of geoResolver interface.
type MockgeoResolver struct {
	ctrl     *gomock.Controller
	recorder *MockgeoResolverMockRecorder
}

// MockgeoResolverMockRecorder is the mock recorder for MockgeoResolver.
type MockgeoResolverMockRecorder struct {
	mock *MockgeoResolver
}

// NewMockgeoResolver creates a new mock instance.
func NewMockgeoResolver(ctrl *gomock.Controller) *MockgeoResolver {
	mock := &MockgeoResolver{ctrl: ctrl}
	mock.recorder = &MockgeoResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoResolver) EXPECT() *MockgeoResolverMockRecorder {
	return m.recorder
}

// GetCapitalRegionID mocks base method.
func (m *MockgeoResolver) GetCapitalRegionID(regionID int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapitalRegionID", regionID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCapitalRegionID indicates an expected call of GetCapitalRegionID.
func (mr *MockgeoResolverMockRecorder) GetCapitalRegionID(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapitalRegionID", reflect.TypeOf((*MockgeoResolver)(nil).GetCapitalRegionID), regionID)
}

// GetRegionGeo mocks base method.
func (m *MockgeoResolver) GetRegionGeo(regionID int) (*models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionGeo", regionID)
	ret0, _ := ret[0].(*models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionGeo indicates an expected call of GetRegionGeo.
func (mr *MockgeoResolverMockRecorder) GetRegionGeo(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionGeo", reflect.TypeOf((*MockgeoResolver)(nil).GetRegionGeo), regionID)
}

// HasRegion mocks base method.
func (m *MockgeoResolver) HasRegion(regionID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRegion", regionID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRegion indicates an expected call of HasRegion.
func (mr *MockgeoResolverMockRecorder) HasRegion(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRegion", reflect.TypeOf((*MockgeoResolver)(nil).HasRegion), regionID)
}

// IsGoodRegion mocks base method.
func (m *MockgeoResolver) IsGoodRegion(regionID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGoodRegion", regionID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGoodRegion indicates an expected call of IsGoodRegion.
func (mr *MockgeoResolverMockRecorder) IsGoodRegion(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGoodRegion", reflect.TypeOf((*MockgeoResolver)(nil).IsGoodRegion), regionID)
}

// ResolveGeo mocks base method.
func (m *MockgeoResolver) ResolveGeo(regionID int, coordinates coordinates.Coordinates) (*models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveGeo", regionID, coordinates)
	ret0, _ := ret[0].(*models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveGeo indicates an expected call of ResolveGeo.
func (mr *MockgeoResolverMockRecorder) ResolveGeo(regionID, coordinates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveGeo", reflect.TypeOf((*MockgeoResolver)(nil).ResolveGeo), regionID, coordinates)
}

// ResolveRegionID mocks base method.
func (m *MockgeoResolver) ResolveRegionID(regionID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveRegionID", regionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveRegionID indicates an expected call of ResolveRegionID.
func (mr *MockgeoResolverMockRecorder) ResolveRegionID(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveRegionID", reflect.TypeOf((*MockgeoResolver)(nil).ResolveRegionID), regionID)
}

// MockcoordinatesParser is a mock of coordinatesParser interface.
type MockcoordinatesParser struct {
	ctrl     *gomock.Controller
	recorder *MockcoordinatesParserMockRecorder
}

// MockcoordinatesParserMockRecorder is the mock recorder for MockcoordinatesParser.
type MockcoordinatesParserMockRecorder struct {
	mock *MockcoordinatesParser
}

// NewMockcoordinatesParser creates a new mock instance.
func NewMockcoordinatesParser(ctrl *gomock.Controller) *MockcoordinatesParser {
	mock := &MockcoordinatesParser{ctrl: ctrl}
	mock.recorder = &MockcoordinatesParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcoordinatesParser) EXPECT() *MockcoordinatesParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockcoordinatesParser) Parse(cgi url.Values) coordinates.Coordinates {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", cgi)
	ret0, _ := ret[0].(coordinates.Coordinates)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockcoordinatesParserMockRecorder) Parse(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockcoordinatesParser)(nil).Parse), cgi)
}

// MocklbsParamsValidator is a mock of lbsParamsValidator interface.
type MocklbsParamsValidator struct {
	ctrl     *gomock.Controller
	recorder *MocklbsParamsValidatorMockRecorder
}

// MocklbsParamsValidatorMockRecorder is the mock recorder for MocklbsParamsValidator.
type MocklbsParamsValidatorMockRecorder struct {
	mock *MocklbsParamsValidator
}

// NewMocklbsParamsValidator creates a new mock instance.
func NewMocklbsParamsValidator(ctrl *gomock.Controller) *MocklbsParamsValidator {
	mock := &MocklbsParamsValidator{ctrl: ctrl}
	mock.recorder = &MocklbsParamsValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklbsParamsValidator) EXPECT() *MocklbsParamsValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MocklbsParamsValidator) Validate(cgi url.Values) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", cgi)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MocklbsParamsValidatorMockRecorder) Validate(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MocklbsParamsValidator)(nil).Validate), cgi)
}

// MockoptionsGetter is a mock of optionsGetter interface.
type MockoptionsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockoptionsGetterMockRecorder
}

// MockoptionsGetterMockRecorder is the mock recorder for MockoptionsGetter.
type MockoptionsGetterMockRecorder struct {
	mock *MockoptionsGetter
}

// NewMockoptionsGetter creates a new mock instance.
func NewMockoptionsGetter(ctrl *gomock.Controller) *MockoptionsGetter {
	mock := &MockoptionsGetter{ctrl: ctrl}
	mock.recorder = &MockoptionsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoptionsGetter) EXPECT() *MockoptionsGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockoptionsGetter) Get() its.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(its.Options)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockoptionsGetterMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockoptionsGetter)(nil).Get))
}

// MockgeoRequestParser is a mock of geoRequestParser interface.
type MockgeoRequestParser struct {
	ctrl     *gomock.Controller
	recorder *MockgeoRequestParserMockRecorder
}

// MockgeoRequestParserMockRecorder is the mock recorder for MockgeoRequestParser.
type MockgeoRequestParserMockRecorder struct {
	mock *MockgeoRequestParser
}

// NewMockgeoRequestParser creates a new mock instance.
func NewMockgeoRequestParser(ctrl *gomock.Controller) *MockgeoRequestParser {
	mock := &MockgeoRequestParser{ctrl: ctrl}
	mock.recorder = &MockgeoRequestParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoRequestParser) EXPECT() *MockgeoRequestParserMockRecorder {
	return m.recorder
}

// GetCoordinates mocks base method.
func (m *MockgeoRequestParser) GetCoordinates(cgi url.Values, lbsLocation *lbs.Location) coordinates.Coordinates {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinates", cgi, lbsLocation)
	ret0, _ := ret[0].(coordinates.Coordinates)
	return ret0
}

// GetCoordinates indicates an expected call of GetCoordinates.
func (mr *MockgeoRequestParserMockRecorder) GetCoordinates(cgi, lbsLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinates", reflect.TypeOf((*MockgeoRequestParser)(nil).GetCoordinates), cgi, lbsLocation)
}

// ParsePumpkinRegionID mocks base method.
func (m *MockgeoRequestParser) ParsePumpkinRegionID(headers http.Header) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePumpkinRegionID", headers)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParsePumpkinRegionID indicates an expected call of ParsePumpkinRegionID.
func (mr *MockgeoRequestParserMockRecorder) ParsePumpkinRegionID(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePumpkinRegionID", reflect.TypeOf((*MockgeoRequestParser)(nil).ParsePumpkinRegionID), headers)
}

// ParseRegion mocks base method.
func (m *MockgeoRequestParser) ParseRegion(smartRegionID, superRegionID int, coords coordinates.Coordinates) (*models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRegion", smartRegionID, superRegionID, coords)
	ret0, _ := ret[0].(*models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegion indicates an expected call of ParseRegion.
func (mr *MockgeoRequestParserMockRecorder) ParseRegion(smartRegionID, superRegionID, coords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegion", reflect.TypeOf((*MockgeoRequestParser)(nil).ParseRegion), smartRegionID, superRegionID, coords)
}

// ParseSmartRegionID mocks base method.
func (m *MockgeoRequestParser) ParseSmartRegionID(cgi url.Values) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSmartRegionID", cgi)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParseSmartRegionID indicates an expected call of ParseSmartRegionID.
func (mr *MockgeoRequestParserMockRecorder) ParseSmartRegionID(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSmartRegionID", reflect.TypeOf((*MockgeoRequestParser)(nil).ParseSmartRegionID), cgi)
}

// ParseSuperRegionID mocks base method.
func (m *MockgeoRequestParser) ParseSuperRegionID(cgi url.Values) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSuperRegionID", cgi)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParseSuperRegionID indicates an expected call of ParseSuperRegionID.
func (mr *MockgeoRequestParserMockRecorder) ParseSuperRegionID(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSuperRegionID", reflect.TypeOf((*MockgeoRequestParser)(nil).ParseSuperRegionID), cgi)
}

// MockmadmComponents is a mock of madmComponents interface.
type MockmadmComponents struct {
	ctrl     *gomock.Controller
	recorder *MockmadmComponentsMockRecorder
}

// MockmadmComponentsMockRecorder is the mock recorder for MockmadmComponents.
type MockmadmComponentsMockRecorder struct {
	mock *MockmadmComponents
}

// NewMockmadmComponents creates a new mock instance.
func NewMockmadmComponents(ctrl *gomock.Controller) *MockmadmComponents {
	mock := &MockmadmComponents{ctrl: ctrl}
	mock.recorder = &MockmadmComponentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmComponents) EXPECT() *MockmadmComponentsMockRecorder {
	return m.recorder
}

// GetEUAppsearchGeoReader mocks base method.
func (m *MockmadmComponents) GetEUAppsearchGeoReader() madm.EUAppSearchGeoReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEUAppsearchGeoReader")
	ret0, _ := ret[0].(madm.EUAppSearchGeoReader)
	return ret0
}

// GetEUAppsearchGeoReader indicates an expected call of GetEUAppsearchGeoReader.
func (mr *MockmadmComponentsMockRecorder) GetEUAppsearchGeoReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEUAppsearchGeoReader", reflect.TypeOf((*MockmadmComponents)(nil).GetEUAppsearchGeoReader))
}

// GetHolidaysGetter mocks base method.
func (m *MockmadmComponents) GetHolidaysGetter() time.HolidaysGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolidaysGetter")
	ret0, _ := ret[0].(time.HolidaysGetter)
	return ret0
}

// GetHolidaysGetter indicates an expected call of GetHolidaysGetter.
func (mr *MockmadmComponentsMockRecorder) GetHolidaysGetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolidaysGetter", reflect.TypeOf((*MockmadmComponents)(nil).GetHolidaysGetter))
}

// GetOptionsGetter mocks base method.
func (m *MockmadmComponents) GetOptionsGetter() exports.MADMOptionsGetter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptionsGetter")
	ret0, _ := ret[0].(exports.MADMOptionsGetter)
	return ret0
}

// GetOptionsGetter indicates an expected call of GetOptionsGetter.
func (mr *MockmadmComponentsMockRecorder) GetOptionsGetter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptionsGetter", reflect.TypeOf((*MockmadmComponents)(nil).GetOptionsGetter))
}
