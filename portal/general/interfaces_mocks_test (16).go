// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package domains is a generated GoMock package.
package domains

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockspokSettings is a mock of spokSettings interface.
type MockspokSettings struct {
	ctrl     *gomock.Controller
	recorder *MockspokSettingsMockRecorder
}

// MockspokSettingsMockRecorder is the mock recorder for MockspokSettings.
type MockspokSettingsMockRecorder struct {
	mock *MockspokSettings
}

// NewMockspokSettings creates a new mock instance.
func NewMockspokSettings(ctrl *gomock.Controller) *MockspokSettings {
	mock := &MockspokSettings{ctrl: ctrl}
	mock.recorder = &MockspokSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspokSettings) EXPECT() *MockspokSettingsMockRecorder {
	return m.recorder
}

// CityIDByDomain mocks base method.
func (m *MockspokSettings) CityIDByDomain(domain string) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CityIDByDomain", domain)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// CityIDByDomain indicates an expected call of CityIDByDomain.
func (mr *MockspokSettingsMockRecorder) CityIDByDomain(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CityIDByDomain", reflect.TypeOf((*MockspokSettings)(nil).CityIDByDomain), domain)
}

// CountryIDByDomain mocks base method.
func (m *MockspokSettings) CountryIDByDomain(domain string) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountryIDByDomain", domain)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// CountryIDByDomain indicates an expected call of CountryIDByDomain.
func (mr *MockspokSettingsMockRecorder) CountryIDByDomain(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountryIDByDomain", reflect.TypeOf((*MockspokSettings)(nil).CountryIDByDomain), domain)
}
