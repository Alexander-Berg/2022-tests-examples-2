// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mordainit is a generated GoMock package.
package mordainit

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	contexts "a.yandex-team.ru/portal/avocado/morda-go/pkg/contexts"
	proto "a.yandex-team.ru/yabs/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockInitHandler is a mock of InitHandler interface.
type MockInitHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInitHandlerMockRecorder
}

// MockInitHandlerMockRecorder is the mock recorder for MockInitHandler.
type MockInitHandlerMockRecorder struct {
	mock *MockInitHandler
}

// NewMockInitHandler creates a new mock instance.
func NewMockInitHandler(ctrl *gomock.Controller) *MockInitHandler {
	mock := &MockInitHandler{ctrl: ctrl}
	mock.recorder = &MockInitHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitHandler) EXPECT() *MockInitHandlerMockRecorder {
	return m.recorder
}

// ServeInit mocks base method.
func (m *MockInitHandler) ServeInit(base contexts.ChangeableBase, ctx handlerContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeInit", base, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeInit indicates an expected call of ServeInit.
func (mr *MockInitHandlerMockRecorder) ServeInit(base, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeInit", reflect.TypeOf((*MockInitHandler)(nil).ServeInit), base, ctx)
}

// MockflagsGetter is a mock of flagsGetter interface.
type MockflagsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockflagsGetterMockRecorder
}

// MockflagsGetterMockRecorder is the mock recorder for MockflagsGetter.
type MockflagsGetterMockRecorder struct {
	mock *MockflagsGetter
}

// NewMockflagsGetter creates a new mock instance.
func NewMockflagsGetter(ctrl *gomock.Controller) *MockflagsGetter {
	mock := &MockflagsGetter{ctrl: ctrl}
	mock.recorder = &MockflagsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflagsGetter) EXPECT() *MockflagsGetterMockRecorder {
	return m.recorder
}

// GetFlags mocks base method.
func (m *MockflagsGetter) GetFlags() models.ABFlags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlags")
	ret0, _ := ret[0].(models.ABFlags)
	return ret0
}

// GetFlags indicates an expected call of GetFlags.
func (mr *MockflagsGetterMockRecorder) GetFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlags", reflect.TypeOf((*MockflagsGetter)(nil).GetFlags))
}

// MockrequestLimiter is a mock of requestLimiter interface.
type MockrequestLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestLimiterMockRecorder
}

// MockrequestLimiterMockRecorder is the mock recorder for MockrequestLimiter.
type MockrequestLimiterMockRecorder struct {
	mock *MockrequestLimiter
}

// NewMockrequestLimiter creates a new mock instance.
func NewMockrequestLimiter(ctrl *gomock.Controller) *MockrequestLimiter {
	mock := &MockrequestLimiter{ctrl: ctrl}
	mock.recorder = &MockrequestLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestLimiter) EXPECT() *MockrequestLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockrequestLimiter) Allow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockrequestLimiterMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockrequestLimiter)(nil).Allow))
}

// MockhandlerContext is a mock of handlerContext interface.
type MockhandlerContext struct {
	ctrl     *gomock.Controller
	recorder *MockhandlerContextMockRecorder
}

// MockhandlerContextMockRecorder is the mock recorder for MockhandlerContext.
type MockhandlerContextMockRecorder struct {
	mock *MockhandlerContext
}

// NewMockhandlerContext creates a new mock instance.
func NewMockhandlerContext(ctrl *gomock.Controller) *MockhandlerContext {
	mock := &MockhandlerContext{ctrl: ctrl}
	mock.recorder = &MockhandlerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhandlerContext) EXPECT() *MockhandlerContextMockRecorder {
	return m.recorder
}

// GetBigBResponse mocks base method.
func (m *MockhandlerContext) GetBigBResponse() (*proto.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBigBResponse")
	ret0, _ := ret[0].(*proto.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBigBResponse indicates an expected call of GetBigBResponse.
func (mr *MockhandlerContextMockRecorder) GetBigBResponse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBigBResponse", reflect.TypeOf((*MockhandlerContext)(nil).GetBigBResponse))
}

// MockbigbParser is a mock of bigbParser interface.
type MockbigbParser struct {
	ctrl     *gomock.Controller
	recorder *MockbigbParserMockRecorder
}

// MockbigbParserMockRecorder is the mock recorder for MockbigbParser.
type MockbigbParserMockRecorder struct {
	mock *MockbigbParser
}

// NewMockbigbParser creates a new mock instance.
func NewMockbigbParser(ctrl *gomock.Controller) *MockbigbParser {
	mock := &MockbigbParser{ctrl: ctrl}
	mock.recorder = &MockbigbParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbigbParser) EXPECT() *MockbigbParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockbigbParser) Parse(base contexts.Base, response *proto.Profile) (models.BigB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", base, response)
	ret0, _ := ret[0].(models.BigB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockbigbParserMockRecorder) Parse(base, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockbigbParser)(nil).Parse), base, response)
}
