// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package storage is a generated GoMock package.
package storage

import (
	geobase "a.yandex-team.ru/library/go/yandex/geobase"
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockgeoBase is a mock of geoBase interface.
type MockgeoBase struct {
	ctrl     *gomock.Controller
	recorder *MockgeoBaseMockRecorder
}

// MockgeoBaseMockRecorder is the mock recorder for MockgeoBase.
type MockgeoBaseMockRecorder struct {
	mock *MockgeoBase
}

// NewMockgeoBase creates a new mock instance.
func NewMockgeoBase(ctrl *gomock.Controller) *MockgeoBase {
	mock := &MockgeoBase{ctrl: ctrl}
	mock.recorder = &MockgeoBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoBase) EXPECT() *MockgeoBaseMockRecorder {
	return m.recorder
}

// GetParentsIDsDef mocks base method.
func (m *MockgeoBase) GetParentsIDsDef(id geobase.ID) ([]geobase.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentsIDsDef", id)
	ret0, _ := ret[0].([]geobase.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentsIDsDef indicates an expected call of GetParentsIDsDef.
func (mr *MockgeoBaseMockRecorder) GetParentsIDsDef(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentsIDsDef", reflect.TypeOf((*MockgeoBase)(nil).GetParentsIDsDef), id)
}

// MockdomainGetter is a mock of domainGetter interface.
type MockdomainGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdomainGetterMockRecorder
}

// MockdomainGetterMockRecorder is the mock recorder for MockdomainGetter.
type MockdomainGetterMockRecorder struct {
	mock *MockdomainGetter
}

// NewMockdomainGetter creates a new mock instance.
func NewMockdomainGetter(ctrl *gomock.Controller) *MockdomainGetter {
	mock := &MockdomainGetter{ctrl: ctrl}
	mock.recorder = &MockdomainGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainGetter) EXPECT() *MockdomainGetterMockRecorder {
	return m.recorder
}

// GetDomain mocks base method.
func (m *MockdomainGetter) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockdomainGetterMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockdomainGetter)(nil).GetDomain))
}

// MockmadmContentGetter is a mock of madmContentGetter interface.
type MockmadmContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmadmContentGetterMockRecorder
}

// MockmadmContentGetterMockRecorder is the mock recorder for MockmadmContentGetter.
type MockmadmContentGetterMockRecorder struct {
	mock *MockmadmContentGetter
}

// NewMockmadmContentGetter creates a new mock instance.
func NewMockmadmContentGetter(ctrl *gomock.Controller) *MockmadmContentGetter {
	mock := &MockmadmContentGetter{ctrl: ctrl}
	mock.recorder = &MockmadmContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmContentGetter) EXPECT() *MockmadmContentGetterMockRecorder {
	return m.recorder
}

// GetMadmContent mocks base method.
func (m *MockmadmContentGetter) GetMadmContent() models.MadmContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmContent")
	ret0, _ := ret[0].(models.MadmContent)
	return ret0
}

// GetMadmContent indicates an expected call of GetMadmContent.
func (mr *MockmadmContentGetterMockRecorder) GetMadmContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmContent", reflect.TypeOf((*MockmadmContentGetter)(nil).GetMadmContent))
}

// MockgeoGetter is a mock of geoGetter interface.
type MockgeoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockgeoGetterMockRecorder
}

// MockgeoGetterMockRecorder is the mock recorder for MockgeoGetter.
type MockgeoGetterMockRecorder struct {
	mock *MockgeoGetter
}

// NewMockgeoGetter creates a new mock instance.
func NewMockgeoGetter(ctrl *gomock.Controller) *MockgeoGetter {
	mock := &MockgeoGetter{ctrl: ctrl}
	mock.recorder = &MockgeoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoGetter) EXPECT() *MockgeoGetterMockRecorder {
	return m.recorder
}

// GetGeo mocks base method.
func (m *MockgeoGetter) GetGeo() models.Geo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeo")
	ret0, _ := ret[0].(models.Geo)
	return ret0
}

// GetGeo indicates an expected call of GetGeo.
func (mr *MockgeoGetterMockRecorder) GetGeo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeo", reflect.TypeOf((*MockgeoGetter)(nil).GetGeo))
}

// MocktimeGetter is a mock of timeGetter interface.
type MocktimeGetter struct {
	ctrl     *gomock.Controller
	recorder *MocktimeGetterMockRecorder
}

// MocktimeGetterMockRecorder is the mock recorder for MocktimeGetter.
type MocktimeGetterMockRecorder struct {
	mock *MocktimeGetter
}

// NewMocktimeGetter creates a new mock instance.
func NewMocktimeGetter(ctrl *gomock.Controller) *MocktimeGetter {
	mock := &MocktimeGetter{ctrl: ctrl}
	mock.recorder = &MocktimeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktimeGetter) EXPECT() *MocktimeGetterMockRecorder {
	return m.recorder
}

// GetTime mocks base method.
func (m *MocktimeGetter) GetTime() *models.TimeData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTime")
	ret0, _ := ret[0].(*models.TimeData)
	return ret0
}

// GetTime indicates an expected call of GetTime.
func (mr *MocktimeGetterMockRecorder) GetTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTime", reflect.TypeOf((*MocktimeGetter)(nil).GetTime))
}

// Mockfilters is a mock of filters interface.
type Mockfilters struct {
	ctrl     *gomock.Controller
	recorder *MockfiltersMockRecorder
}

// MockfiltersMockRecorder is the mock recorder for Mockfilters.
type MockfiltersMockRecorder struct {
	mock *Mockfilters
}

// NewMockfilters creates a new mock instance.
func NewMockfilters(ctrl *gomock.Controller) *Mockfilters {
	mock := &Mockfilters{ctrl: ctrl}
	mock.recorder = &MockfiltersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockfilters) EXPECT() *MockfiltersMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *Mockfilters) Filter(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockfiltersMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*Mockfilters)(nil).Filter), arg0)
}
