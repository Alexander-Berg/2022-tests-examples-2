// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package parser is a generated GoMock package.
package parser

import (
	http "net/http"
	url "net/url"
	reflect "reflect"

	geobase "a.yandex-team.ru/library/go/yandex/geobase"
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	coordinates "a.yandex-team.ru/portal/avocado/libs/utils/geo/coordinates"
	gpauto "a.yandex-team.ru/portal/avocado/libs/utils/geo/gpauto"
	laas "a.yandex-team.ru/portal/avocado/libs/utils/geo/laas"
	lbs "a.yandex-team.ru/portal/avocado/libs/utils/geo/lbs"
	gomock "github.com/golang/mock/gomock"
)

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockoriginRequestKeeper is a mock of originRequestKeeper interface.
type MockoriginRequestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockoriginRequestKeeperMockRecorder
}

// MockoriginRequestKeeperMockRecorder is the mock recorder for MockoriginRequestKeeper.
type MockoriginRequestKeeperMockRecorder struct {
	mock *MockoriginRequestKeeper
}

// NewMockoriginRequestKeeper creates a new mock instance.
func NewMockoriginRequestKeeper(ctrl *gomock.Controller) *MockoriginRequestKeeper {
	mock := &MockoriginRequestKeeper{ctrl: ctrl}
	mock.recorder = &MockoriginRequestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoriginRequestKeeper) EXPECT() *MockoriginRequestKeeperMockRecorder {
	return m.recorder
}

// GetOriginRequest mocks base method.
func (m *MockoriginRequestKeeper) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockoriginRequestKeeperMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockoriginRequestKeeper)(nil).GetOriginRequest))
}

// MockyaCookiesGetter is a mock of yaCookiesGetter interface.
type MockyaCookiesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockyaCookiesGetterMockRecorder
}

// MockyaCookiesGetterMockRecorder is the mock recorder for MockyaCookiesGetter.
type MockyaCookiesGetterMockRecorder struct {
	mock *MockyaCookiesGetter
}

// NewMockyaCookiesGetter creates a new mock instance.
func NewMockyaCookiesGetter(ctrl *gomock.Controller) *MockyaCookiesGetter {
	mock := &MockyaCookiesGetter{ctrl: ctrl}
	mock.recorder = &MockyaCookiesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockyaCookiesGetter) EXPECT() *MockyaCookiesGetterMockRecorder {
	return m.recorder
}

// GetYaCookies mocks base method.
func (m *MockyaCookiesGetter) GetYaCookies() models.YaCookies {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetYaCookies")
	ret0, _ := ret[0].(models.YaCookies)
	return ret0
}

// GetYaCookies indicates an expected call of GetYaCookies.
func (mr *MockyaCookiesGetterMockRecorder) GetYaCookies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetYaCookies", reflect.TypeOf((*MockyaCookiesGetter)(nil).GetYaCookies))
}

// MockgeoResolver is a mock of geoResolver interface.
type MockgeoResolver struct {
	ctrl     *gomock.Controller
	recorder *MockgeoResolverMockRecorder
}

// MockgeoResolverMockRecorder is the mock recorder for MockgeoResolver.
type MockgeoResolverMockRecorder struct {
	mock *MockgeoResolver
}

// NewMockgeoResolver creates a new mock instance.
func NewMockgeoResolver(ctrl *gomock.Controller) *MockgeoResolver {
	mock := &MockgeoResolver{ctrl: ctrl}
	mock.recorder = &MockgeoResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoResolver) EXPECT() *MockgeoResolverMockRecorder {
	return m.recorder
}

// GetCapitalRegionID mocks base method.
func (m *MockgeoResolver) GetCapitalRegionID(regionID int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapitalRegionID", regionID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCapitalRegionID indicates an expected call of GetCapitalRegionID.
func (mr *MockgeoResolverMockRecorder) GetCapitalRegionID(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapitalRegionID", reflect.TypeOf((*MockgeoResolver)(nil).GetCapitalRegionID), regionID)
}

// GetRegionGeo mocks base method.
func (m *MockgeoResolver) GetRegionGeo(regionID int) (*models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionGeo", regionID)
	ret0, _ := ret[0].(*models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionGeo indicates an expected call of GetRegionGeo.
func (mr *MockgeoResolverMockRecorder) GetRegionGeo(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionGeo", reflect.TypeOf((*MockgeoResolver)(nil).GetRegionGeo), regionID)
}

// HasRegion mocks base method.
func (m *MockgeoResolver) HasRegion(regionID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRegion", regionID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRegion indicates an expected call of HasRegion.
func (mr *MockgeoResolverMockRecorder) HasRegion(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRegion", reflect.TypeOf((*MockgeoResolver)(nil).HasRegion), regionID)
}

// IsGoodRegion mocks base method.
func (m *MockgeoResolver) IsGoodRegion(regionID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGoodRegion", regionID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGoodRegion indicates an expected call of IsGoodRegion.
func (mr *MockgeoResolverMockRecorder) IsGoodRegion(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGoodRegion", reflect.TypeOf((*MockgeoResolver)(nil).IsGoodRegion), regionID)
}

// MakeGeoParents mocks base method.
func (m *MockgeoResolver) MakeGeoParents(id int) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeGeoParents", id)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeGeoParents indicates an expected call of MakeGeoParents.
func (mr *MockgeoResolverMockRecorder) MakeGeoParents(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeGeoParents", reflect.TypeOf((*MockgeoResolver)(nil).MakeGeoParents), id)
}

// ResolveGeo mocks base method.
func (m *MockgeoResolver) ResolveGeo(regionID int, coordinates coordinates.Coordinates) (*models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveGeo", regionID, coordinates)
	ret0, _ := ret[0].(*models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveGeo indicates an expected call of ResolveGeo.
func (mr *MockgeoResolverMockRecorder) ResolveGeo(regionID, coordinates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveGeo", reflect.TypeOf((*MockgeoResolver)(nil).ResolveGeo), regionID, coordinates)
}

// ResolveRegionID mocks base method.
func (m *MockgeoResolver) ResolveRegionID(regionID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveRegionID", regionID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveRegionID indicates an expected call of ResolveRegionID.
func (mr *MockgeoResolverMockRecorder) ResolveRegionID(regionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveRegionID", reflect.TypeOf((*MockgeoResolver)(nil).ResolveRegionID), regionID)
}

// MocklaasFallBacker is a mock of laasFallBacker interface.
type MocklaasFallBacker struct {
	ctrl     *gomock.Controller
	recorder *MocklaasFallBackerMockRecorder
}

// MocklaasFallBackerMockRecorder is the mock recorder for MocklaasFallBacker.
type MocklaasFallBackerMockRecorder struct {
	mock *MocklaasFallBacker
}

// NewMocklaasFallBacker creates a new mock instance.
func NewMocklaasFallBacker(ctrl *gomock.Controller) *MocklaasFallBacker {
	mock := &MocklaasFallBacker{ctrl: ctrl}
	mock.recorder = &MocklaasFallBackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklaasFallBacker) EXPECT() *MocklaasFallBackerMockRecorder {
	return m.recorder
}

// GetRegionID mocks base method.
func (m *MocklaasFallBacker) GetRegionID(ip string, headers http.Header, gpAuto string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegionID", ip, headers, gpAuto)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegionID indicates an expected call of GetRegionID.
func (mr *MocklaasFallBackerMockRecorder) GetRegionID(ip, headers, gpAuto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegionID", reflect.TypeOf((*MocklaasFallBacker)(nil).GetRegionID), ip, headers, gpAuto)
}

// MocklaasParser is a mock of laasParser interface.
type MocklaasParser struct {
	ctrl     *gomock.Controller
	recorder *MocklaasParserMockRecorder
}

// MocklaasParserMockRecorder is the mock recorder for MocklaasParser.
type MocklaasParserMockRecorder struct {
	mock *MocklaasParser
}

// NewMocklaasParser creates a new mock instance.
func NewMocklaasParser(ctrl *gomock.Controller) *MocklaasParser {
	mock := &MocklaasParser{ctrl: ctrl}
	mock.recorder = &MocklaasParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklaasParser) EXPECT() *MocklaasParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MocklaasParser) Parse(headers http.Header, gpAuto *gpauto.GpAuto, unixTime int64) (*laas.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", headers, gpAuto, unixTime)
	ret0, _ := ret[0].(*laas.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MocklaasParserMockRecorder) Parse(headers, gpAuto, unixTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MocklaasParser)(nil).Parse), headers, gpAuto, unixTime)
}

// MockcoordinatesParser is a mock of coordinatesParser interface.
type MockcoordinatesParser struct {
	ctrl     *gomock.Controller
	recorder *MockcoordinatesParserMockRecorder
}

// MockcoordinatesParserMockRecorder is the mock recorder for MockcoordinatesParser.
type MockcoordinatesParserMockRecorder struct {
	mock *MockcoordinatesParser
}

// NewMockcoordinatesParser creates a new mock instance.
func NewMockcoordinatesParser(ctrl *gomock.Controller) *MockcoordinatesParser {
	mock := &MockcoordinatesParser{ctrl: ctrl}
	mock.recorder = &MockcoordinatesParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcoordinatesParser) EXPECT() *MockcoordinatesParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockcoordinatesParser) Parse(cgi url.Values) coordinates.Coordinates {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", cgi)
	ret0, _ := ret[0].(coordinates.Coordinates)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockcoordinatesParserMockRecorder) Parse(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockcoordinatesParser)(nil).Parse), cgi)
}

// MockappInfoGetter is a mock of appInfoGetter interface.
type MockappInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockappInfoGetterMockRecorder
}

// MockappInfoGetterMockRecorder is the mock recorder for MockappInfoGetter.
type MockappInfoGetterMockRecorder struct {
	mock *MockappInfoGetter
}

// NewMockappInfoGetter creates a new mock instance.
func NewMockappInfoGetter(ctrl *gomock.Controller) *MockappInfoGetter {
	mock := &MockappInfoGetter{ctrl: ctrl}
	mock.recorder = &MockappInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappInfoGetter) EXPECT() *MockappInfoGetterMockRecorder {
	return m.recorder
}

// GetAppInfo mocks base method.
func (m *MockappInfoGetter) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockappInfoGetterMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockappInfoGetter)(nil).GetAppInfo))
}

// MockgeoBase is a mock of geoBase interface.
type MockgeoBase struct {
	ctrl     *gomock.Controller
	recorder *MockgeoBaseMockRecorder
}

// MockgeoBaseMockRecorder is the mock recorder for MockgeoBase.
type MockgeoBaseMockRecorder struct {
	mock *MockgeoBase
}

// NewMockgeoBase creates a new mock instance.
func NewMockgeoBase(ctrl *gomock.Controller) *MockgeoBase {
	mock := &MockgeoBase{ctrl: ctrl}
	mock.recorder = &MockgeoBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoBase) EXPECT() *MockgeoBaseMockRecorder {
	return m.recorder
}

// MakePinpointGeolocation mocks base method.
func (m *MockgeoBase) MakePinpointGeolocation(input geobase.GeolocationInput, ypCookie, ysCookie string) (geobase.Geolocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePinpointGeolocation", input, ypCookie, ysCookie)
	ret0, _ := ret[0].(geobase.Geolocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakePinpointGeolocation indicates an expected call of MakePinpointGeolocation.
func (mr *MockgeoBaseMockRecorder) MakePinpointGeolocation(input, ypCookie, ysCookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePinpointGeolocation", reflect.TypeOf((*MockgeoBase)(nil).MakePinpointGeolocation), input, ypCookie, ysCookie)
}

// MockgeoRequestParser is a mock of geoRequestParser interface.
type MockgeoRequestParser struct {
	ctrl     *gomock.Controller
	recorder *MockgeoRequestParserMockRecorder
}

// MockgeoRequestParserMockRecorder is the mock recorder for MockgeoRequestParser.
type MockgeoRequestParserMockRecorder struct {
	mock *MockgeoRequestParser
}

// NewMockgeoRequestParser creates a new mock instance.
func NewMockgeoRequestParser(ctrl *gomock.Controller) *MockgeoRequestParser {
	mock := &MockgeoRequestParser{ctrl: ctrl}
	mock.recorder = &MockgeoRequestParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgeoRequestParser) EXPECT() *MockgeoRequestParserMockRecorder {
	return m.recorder
}

// GetCoordinates mocks base method.
func (m *MockgeoRequestParser) GetCoordinates(cgi url.Values, lbsLocation *lbs.Location) coordinates.Coordinates {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinates", cgi, lbsLocation)
	ret0, _ := ret[0].(coordinates.Coordinates)
	return ret0
}

// GetCoordinates indicates an expected call of GetCoordinates.
func (mr *MockgeoRequestParserMockRecorder) GetCoordinates(cgi, lbsLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinates", reflect.TypeOf((*MockgeoRequestParser)(nil).GetCoordinates), cgi, lbsLocation)
}

// ParsePumpkinRegionID mocks base method.
func (m *MockgeoRequestParser) ParsePumpkinRegionID(headers http.Header) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePumpkinRegionID", headers)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParsePumpkinRegionID indicates an expected call of ParsePumpkinRegionID.
func (mr *MockgeoRequestParserMockRecorder) ParsePumpkinRegionID(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePumpkinRegionID", reflect.TypeOf((*MockgeoRequestParser)(nil).ParsePumpkinRegionID), headers)
}

// ParseRegion mocks base method.
func (m *MockgeoRequestParser) ParseRegion(smartRegionID, superRegionID int, coords coordinates.Coordinates) (*models.Geo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRegion", smartRegionID, superRegionID, coords)
	ret0, _ := ret[0].(*models.Geo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegion indicates an expected call of ParseRegion.
func (mr *MockgeoRequestParserMockRecorder) ParseRegion(smartRegionID, superRegionID, coords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegion", reflect.TypeOf((*MockgeoRequestParser)(nil).ParseRegion), smartRegionID, superRegionID, coords)
}

// ParseSmartRegionID mocks base method.
func (m *MockgeoRequestParser) ParseSmartRegionID(cgi url.Values) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSmartRegionID", cgi)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParseSmartRegionID indicates an expected call of ParseSmartRegionID.
func (mr *MockgeoRequestParserMockRecorder) ParseSmartRegionID(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSmartRegionID", reflect.TypeOf((*MockgeoRequestParser)(nil).ParseSmartRegionID), cgi)
}

// ParseSuperRegionID mocks base method.
func (m *MockgeoRequestParser) ParseSuperRegionID(cgi url.Values) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseSuperRegionID", cgi)
	ret0, _ := ret[0].(int)
	return ret0
}

// ParseSuperRegionID indicates an expected call of ParseSuperRegionID.
func (mr *MockgeoRequestParserMockRecorder) ParseSuperRegionID(cgi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSuperRegionID", reflect.TypeOf((*MockgeoRequestParser)(nil).ParseSuperRegionID), cgi)
}

// MockmordaContentGetter is a mock of mordaContentGetter interface.
type MockmordaContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentGetterMockRecorder
}

// MockmordaContentGetterMockRecorder is the mock recorder for MockmordaContentGetter.
type MockmordaContentGetterMockRecorder struct {
	mock *MockmordaContentGetter
}

// NewMockmordaContentGetter creates a new mock instance.
func NewMockmordaContentGetter(ctrl *gomock.Controller) *MockmordaContentGetter {
	mock := &MockmordaContentGetter{ctrl: ctrl}
	mock.recorder = &MockmordaContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentGetter) EXPECT() *MockmordaContentGetterMockRecorder {
	return m.recorder
}

// GetMordaContent mocks base method.
func (m *MockmordaContentGetter) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockmordaContentGetterMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockmordaContentGetter)(nil).GetMordaContent))
}

// MockdomainGetter is a mock of domainGetter interface.
type MockdomainGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdomainGetterMockRecorder
}

// MockdomainGetterMockRecorder is the mock recorder for MockdomainGetter.
type MockdomainGetterMockRecorder struct {
	mock *MockdomainGetter
}

// NewMockdomainGetter creates a new mock instance.
func NewMockdomainGetter(ctrl *gomock.Controller) *MockdomainGetter {
	mock := &MockdomainGetter{ctrl: ctrl}
	mock.recorder = &MockdomainGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainGetter) EXPECT() *MockdomainGetterMockRecorder {
	return m.recorder
}

// GetDomain mocks base method.
func (m *MockdomainGetter) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockdomainGetterMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockdomainGetter)(nil).GetDomain))
}

// MockdomainConverter is a mock of domainConverter interface.
type MockdomainConverter struct {
	ctrl     *gomock.Controller
	recorder *MockdomainConverterMockRecorder
}

// MockdomainConverterMockRecorder is the mock recorder for MockdomainConverter.
type MockdomainConverterMockRecorder struct {
	mock *MockdomainConverter
}

// NewMockdomainConverter creates a new mock instance.
func NewMockdomainConverter(ctrl *gomock.Controller) *MockdomainConverter {
	mock := &MockdomainConverter{ctrl: ctrl}
	mock.recorder = &MockdomainConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainConverter) EXPECT() *MockdomainConverterMockRecorder {
	return m.recorder
}

// DomainToCity mocks base method.
func (m *MockdomainConverter) DomainToCity(arg0 string) (uint32, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainToCity", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DomainToCity indicates an expected call of DomainToCity.
func (mr *MockdomainConverterMockRecorder) DomainToCity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainToCity", reflect.TypeOf((*MockdomainConverter)(nil).DomainToCity), arg0)
}

// DomainToGeo mocks base method.
func (m *MockdomainConverter) DomainToGeo(arg0 string) (uint32, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainToGeo", arg0)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// DomainToGeo indicates an expected call of DomainToGeo.
func (mr *MockdomainConverterMockRecorder) DomainToGeo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainToGeo", reflect.TypeOf((*MockdomainConverter)(nil).DomainToGeo), arg0)
}

// MockrobotGetter is a mock of robotGetter interface.
type MockrobotGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrobotGetterMockRecorder
}

// MockrobotGetterMockRecorder is the mock recorder for MockrobotGetter.
type MockrobotGetterMockRecorder struct {
	mock *MockrobotGetter
}

// NewMockrobotGetter creates a new mock instance.
func NewMockrobotGetter(ctrl *gomock.Controller) *MockrobotGetter {
	mock := &MockrobotGetter{ctrl: ctrl}
	mock.recorder = &MockrobotGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrobotGetter) EXPECT() *MockrobotGetterMockRecorder {
	return m.recorder
}

// GetRobot mocks base method.
func (m *MockrobotGetter) GetRobot() models.Robot {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRobot")
	ret0, _ := ret[0].(models.Robot)
	return ret0
}

// GetRobot indicates an expected call of GetRobot.
func (mr *MockrobotGetterMockRecorder) GetRobot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRobot", reflect.TypeOf((*MockrobotGetter)(nil).GetRobot))
}
