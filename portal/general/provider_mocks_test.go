// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package time is a generated GoMock package.
package time

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTimeProvider is a mock of TimeProvider interface.
type MockTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTimeProviderMockRecorder
}

// MockTimeProviderMockRecorder is the mock recorder for MockTimeProvider.
type MockTimeProviderMockRecorder struct {
	mock *MockTimeProvider
}

// NewMockTimeProvider creates a new mock instance.
func NewMockTimeProvider(ctrl *gomock.Controller) *MockTimeProvider {
	mock := &MockTimeProvider{ctrl: ctrl}
	mock.recorder = &MockTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeProvider) EXPECT() *MockTimeProviderMockRecorder {
	return m.recorder
}

// GetMoscowLocation mocks base method.
func (m *MockTimeProvider) GetMoscowLocation() *Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoscowLocation")
	ret0, _ := ret[0].(*Location)
	return ret0
}

// GetMoscowLocation indicates an expected call of GetMoscowLocation.
func (mr *MockTimeProviderMockRecorder) GetMoscowLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoscowLocation", reflect.TypeOf((*MockTimeProvider)(nil).GetMoscowLocation))
}

// GetCurrentTime mocks base method.
func (m *MockTimeProvider) GetCurrentTime() Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTime")
	ret0, _ := ret[0].(Time)
	return ret0
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockTimeProviderMockRecorder) GetCurrentTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockTimeProvider)(nil).GetCurrentTime))
}
