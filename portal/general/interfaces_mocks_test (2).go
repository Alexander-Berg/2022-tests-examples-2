// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package aadb is a generated GoMock package.
package aadb

import (
	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockcookieGetter is a mock of cookieGetter interface.
type MockcookieGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcookieGetterMockRecorder
}

// MockcookieGetterMockRecorder is the mock recorder for MockcookieGetter.
type MockcookieGetterMockRecorder struct {
	mock *MockcookieGetter
}

// NewMockcookieGetter creates a new mock instance.
func NewMockcookieGetter(ctrl *gomock.Controller) *MockcookieGetter {
	mock := &MockcookieGetter{ctrl: ctrl}
	mock.recorder = &MockcookieGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcookieGetter) EXPECT() *MockcookieGetterMockRecorder {
	return m.recorder
}

// GetCookie mocks base method.
func (m *MockcookieGetter) GetCookie() models.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie")
	ret0, _ := ret[0].(models.Cookie)
	return ret0
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockcookieGetterMockRecorder) GetCookie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockcookieGetter)(nil).GetCookie))
}

// MockdailyGetter is a mock of dailyGetter interface.
type MockdailyGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdailyGetterMockRecorder
}

// MockdailyGetterMockRecorder is the mock recorder for MockdailyGetter.
type MockdailyGetterMockRecorder struct {
	mock *MockdailyGetter
}

// NewMockdailyGetter creates a new mock instance.
func NewMockdailyGetter(ctrl *gomock.Controller) *MockdailyGetter {
	mock := &MockdailyGetter{ctrl: ctrl}
	mock.recorder = &MockdailyGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdailyGetter) EXPECT() *MockdailyGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockdailyGetter) Get() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(string)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockdailyGetterMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdailyGetter)(nil).Get))
}

// MockaadbParser is a mock of aadbParser interface.
type MockaadbParser struct {
	ctrl     *gomock.Controller
	recorder *MockaadbParserMockRecorder
}

// MockaadbParserMockRecorder is the mock recorder for MockaadbParser.
type MockaadbParserMockRecorder struct {
	mock *MockaadbParser
}

// NewMockaadbParser creates a new mock instance.
func NewMockaadbParser(ctrl *gomock.Controller) *MockaadbParser {
	mock := &MockaadbParser{ctrl: ctrl}
	mock.recorder = &MockaadbParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaadbParser) EXPECT() *MockaadbParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockaadbParser) Parse() (models.AADB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(models.AADB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockaadbParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockaadbParser)(nil).Parse))
}
