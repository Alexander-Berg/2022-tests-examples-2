// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package madmcontent is a generated GoMock package.
package madmcontent

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	httpprocessor "a.yandex-team.ru/portal/avocado/libs/utils/experiments/httpprocessor"
	staticparams "a.yandex-team.ru/portal/avocado/libs/utils/staticparams"
	exports "a.yandex-team.ru/portal/avocado/morda-go/pkg/exports"
	gomock "github.com/golang/mock/gomock"
)

// MockhandlerChecker is a mock of handlerChecker interface.
type MockhandlerChecker struct {
	ctrl     *gomock.Controller
	recorder *MockhandlerCheckerMockRecorder
}

// MockhandlerCheckerMockRecorder is the mock recorder for MockhandlerChecker.
type MockhandlerCheckerMockRecorder struct {
	mock *MockhandlerChecker
}

// NewMockhandlerChecker creates a new mock instance.
func NewMockhandlerChecker(ctrl *gomock.Controller) *MockhandlerChecker {
	mock := &MockhandlerChecker{ctrl: ctrl}
	mock.recorder = &MockhandlerCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhandlerChecker) EXPECT() *MockhandlerCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockhandlerChecker) Check(path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockhandlerCheckerMockRecorder) Check(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockhandlerChecker)(nil).Check), path)
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockappInfoGetter is a mock of appInfoGetter interface.
type MockappInfoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockappInfoGetterMockRecorder
}

// MockappInfoGetterMockRecorder is the mock recorder for MockappInfoGetter.
type MockappInfoGetterMockRecorder struct {
	mock *MockappInfoGetter
}

// NewMockappInfoGetter creates a new mock instance.
func NewMockappInfoGetter(ctrl *gomock.Controller) *MockappInfoGetter {
	mock := &MockappInfoGetter{ctrl: ctrl}
	mock.recorder = &MockappInfoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappInfoGetter) EXPECT() *MockappInfoGetterMockRecorder {
	return m.recorder
}

// GetAppInfo mocks base method.
func (m *MockappInfoGetter) GetAppInfo() models.AppInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppInfo")
	ret0, _ := ret[0].(models.AppInfo)
	return ret0
}

// GetAppInfo indicates an expected call of GetAppInfo.
func (mr *MockappInfoGetterMockRecorder) GetAppInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppInfo", reflect.TypeOf((*MockappInfoGetter)(nil).GetAppInfo))
}

// MockmordaContentGetter is a mock of mordaContentGetter interface.
type MockmordaContentGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentGetterMockRecorder
}

// MockmordaContentGetterMockRecorder is the mock recorder for MockmordaContentGetter.
type MockmordaContentGetterMockRecorder struct {
	mock *MockmordaContentGetter
}

// NewMockmordaContentGetter creates a new mock instance.
func NewMockmordaContentGetter(ctrl *gomock.Controller) *MockmordaContentGetter {
	mock := &MockmordaContentGetter{ctrl: ctrl}
	mock.recorder = &MockmordaContentGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentGetter) EXPECT() *MockmordaContentGetterMockRecorder {
	return m.recorder
}

// GetMordaContent mocks base method.
func (m *MockmordaContentGetter) GetMordaContent() models.MordaContent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMordaContent")
	ret0, _ := ret[0].(models.MordaContent)
	return ret0
}

// GetMordaContent indicates an expected call of GetMordaContent.
func (mr *MockmordaContentGetterMockRecorder) GetMordaContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMordaContent", reflect.TypeOf((*MockmordaContentGetter)(nil).GetMordaContent))
}

// MockmadmContentParser is a mock of madmContentParser interface.
type MockmadmContentParser struct {
	ctrl     *gomock.Controller
	recorder *MockmadmContentParserMockRecorder
}

// MockmadmContentParserMockRecorder is the mock recorder for MockmadmContentParser.
type MockmadmContentParserMockRecorder struct {
	mock *MockmadmContentParser
}

// NewMockmadmContentParser creates a new mock instance.
func NewMockmadmContentParser(ctrl *gomock.Controller) *MockmadmContentParser {
	mock := &MockmadmContentParser{ctrl: ctrl}
	mock.recorder = &MockmadmContentParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmContentParser) EXPECT() *MockmadmContentParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockmadmContentParser) Parse() (models.MadmContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(models.MadmContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockmadmContentParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockmadmContentParser)(nil).Parse))
}

// MockmadmOptionsGetter is a mock of madmOptionsGetter interface.
type MockmadmOptionsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockmadmOptionsGetterMockRecorder
}

// MockmadmOptionsGetterMockRecorder is the mock recorder for MockmadmOptionsGetter.
type MockmadmOptionsGetterMockRecorder struct {
	mock *MockmadmOptionsGetter
}

// NewMockmadmOptionsGetter creates a new mock instance.
func NewMockmadmOptionsGetter(ctrl *gomock.Controller) *MockmadmOptionsGetter {
	mock := &MockmadmOptionsGetter{ctrl: ctrl}
	mock.recorder = &MockmadmOptionsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmOptionsGetter) EXPECT() *MockmadmOptionsGetterMockRecorder {
	return m.recorder
}

// GetMadmOptions mocks base method.
func (m *MockmadmOptionsGetter) GetMadmOptions() exports.Options {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMadmOptions")
	ret0, _ := ret[0].(exports.Options)
	return ret0
}

// GetMadmOptions indicates an expected call of GetMadmOptions.
func (mr *MockmadmOptionsGetterMockRecorder) GetMadmOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMadmOptions", reflect.TypeOf((*MockmadmOptionsGetter)(nil).GetMadmOptions))
}

// MockhttpWrapper is a mock of httpWrapper interface.
type MockhttpWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockhttpWrapperMockRecorder
}

// MockhttpWrapperMockRecorder is the mock recorder for MockhttpWrapper.
type MockhttpWrapperMockRecorder struct {
	mock *MockhttpWrapper
}

// NewMockhttpWrapper creates a new mock instance.
func NewMockhttpWrapper(ctrl *gomock.Controller) *MockhttpWrapper {
	mock := &MockhttpWrapper{ctrl: ctrl}
	mock.recorder = &MockhttpWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpWrapper) EXPECT() *MockhttpWrapperMockRecorder {
	return m.recorder
}

// GetExpBoxes mocks base method.
func (m *MockhttpWrapper) GetExpBoxes(location staticparams.Location) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpBoxes", location)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExpBoxes indicates an expected call of GetExpBoxes.
func (mr *MockhttpWrapperMockRecorder) GetExpBoxes(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpBoxes", reflect.TypeOf((*MockhttpWrapper)(nil).GetExpBoxes), location)
}

// MockhttpFlagsProcessor is a mock of httpFlagsProcessor interface.
type MockhttpFlagsProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockhttpFlagsProcessorMockRecorder
}

// MockhttpFlagsProcessorMockRecorder is the mock recorder for MockhttpFlagsProcessor.
type MockhttpFlagsProcessorMockRecorder struct {
	mock *MockhttpFlagsProcessor
}

// NewMockhttpFlagsProcessor creates a new mock instance.
func NewMockhttpFlagsProcessor(ctrl *gomock.Controller) *MockhttpFlagsProcessor {
	mock := &MockhttpFlagsProcessor{ctrl: ctrl}
	mock.recorder = &MockhttpFlagsProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpFlagsProcessor) EXPECT() *MockhttpFlagsProcessorMockRecorder {
	return m.recorder
}

// ParseExperimentBoxes mocks base method.
func (m *MockhttpFlagsProcessor) ParseExperimentBoxes(s string) ([]httpprocessor.ExperimentBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseExperimentBoxes", s)
	ret0, _ := ret[0].([]httpprocessor.ExperimentBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseExperimentBoxes indicates an expected call of ParseExperimentBoxes.
func (mr *MockhttpFlagsProcessorMockRecorder) ParseExperimentBoxes(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseExperimentBoxes", reflect.TypeOf((*MockhttpFlagsProcessor)(nil).ParseExperimentBoxes), s)
}

// MockdomainGetter is a mock of domainGetter interface.
type MockdomainGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdomainGetterMockRecorder
}

// MockdomainGetterMockRecorder is the mock recorder for MockdomainGetter.
type MockdomainGetterMockRecorder struct {
	mock *MockdomainGetter
}

// NewMockdomainGetter creates a new mock instance.
func NewMockdomainGetter(ctrl *gomock.Controller) *MockdomainGetter {
	mock := &MockdomainGetter{ctrl: ctrl}
	mock.recorder = &MockdomainGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainGetter) EXPECT() *MockdomainGetterMockRecorder {
	return m.recorder
}

// GetDomain mocks base method.
func (m *MockdomainGetter) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockdomainGetterMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockdomainGetter)(nil).GetDomain))
}
