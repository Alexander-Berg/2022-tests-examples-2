// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mordacontent is a generated GoMock package.
package mordacontent

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	log3 "a.yandex-team.ru/portal/avocado/libs/utils/log3"
	gomock "github.com/golang/mock/gomock"
)

// MockdeviceGetter is a mock of deviceGetter interface.
type MockdeviceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdeviceGetterMockRecorder
}

// MockdeviceGetterMockRecorder is the mock recorder for MockdeviceGetter.
type MockdeviceGetterMockRecorder struct {
	mock *MockdeviceGetter
}

// NewMockdeviceGetter creates a new mock instance.
func NewMockdeviceGetter(ctrl *gomock.Controller) *MockdeviceGetter {
	mock := &MockdeviceGetter{ctrl: ctrl}
	mock.recorder = &MockdeviceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdeviceGetter) EXPECT() *MockdeviceGetterMockRecorder {
	return m.recorder
}

// GetDevice mocks base method.
func (m *MockdeviceGetter) GetDevice() models.Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(models.Device)
	return ret0
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockdeviceGetterMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockdeviceGetter)(nil).GetDevice))
}

// MockoriginRequestKeeper is a mock of originRequestKeeper interface.
type MockoriginRequestKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockoriginRequestKeeperMockRecorder
}

// MockoriginRequestKeeperMockRecorder is the mock recorder for MockoriginRequestKeeper.
type MockoriginRequestKeeperMockRecorder struct {
	mock *MockoriginRequestKeeper
}

// NewMockoriginRequestKeeper creates a new mock instance.
func NewMockoriginRequestKeeper(ctrl *gomock.Controller) *MockoriginRequestKeeper {
	mock := &MockoriginRequestKeeper{ctrl: ctrl}
	mock.recorder = &MockoriginRequestKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoriginRequestKeeper) EXPECT() *MockoriginRequestKeeperMockRecorder {
	return m.recorder
}

// GetOriginRequest mocks base method.
func (m *MockoriginRequestKeeper) GetOriginRequest() (*models.OriginRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginRequest")
	ret0, _ := ret[0].(*models.OriginRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginRequest indicates an expected call of GetOriginRequest.
func (mr *MockoriginRequestKeeperMockRecorder) GetOriginRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginRequest", reflect.TypeOf((*MockoriginRequestKeeper)(nil).GetOriginRequest))
}

// MockcookieGetter is a mock of cookieGetter interface.
type MockcookieGetter struct {
	ctrl     *gomock.Controller
	recorder *MockcookieGetterMockRecorder
}

// MockcookieGetterMockRecorder is the mock recorder for MockcookieGetter.
type MockcookieGetterMockRecorder struct {
	mock *MockcookieGetter
}

// NewMockcookieGetter creates a new mock instance.
func NewMockcookieGetter(ctrl *gomock.Controller) *MockcookieGetter {
	mock := &MockcookieGetter{ctrl: ctrl}
	mock.recorder = &MockcookieGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcookieGetter) EXPECT() *MockcookieGetterMockRecorder {
	return m.recorder
}

// GetCookie mocks base method.
func (m *MockcookieGetter) GetCookie() models.Cookie {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCookie")
	ret0, _ := ret[0].(models.Cookie)
	return ret0
}

// GetCookie indicates an expected call of GetCookie.
func (mr *MockcookieGetterMockRecorder) GetCookie() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockcookieGetter)(nil).GetCookie))
}

// MockmordaContentMetrics is a mock of mordaContentMetrics interface.
type MockmordaContentMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentMetricsMockRecorder
}

// MockmordaContentMetricsMockRecorder is the mock recorder for MockmordaContentMetrics.
type MockmordaContentMetricsMockRecorder struct {
	mock *MockmordaContentMetrics
}

// NewMockmordaContentMetrics creates a new mock instance.
func NewMockmordaContentMetrics(ctrl *gomock.Controller) *MockmordaContentMetrics {
	mock := &MockmordaContentMetrics{ctrl: ctrl}
	mock.recorder = &MockmordaContentMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentMetrics) EXPECT() *MockmordaContentMetricsMockRecorder {
	return m.recorder
}

// UpdateMordaContent mocks base method.
func (m *MockmordaContentMetrics) UpdateMordaContent(arg0 string, arg1 log3.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMordaContent", arg0, arg1)
}

// UpdateMordaContent indicates an expected call of UpdateMordaContent.
func (mr *MockmordaContentMetricsMockRecorder) UpdateMordaContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMordaContent", reflect.TypeOf((*MockmordaContentMetrics)(nil).UpdateMordaContent), arg0, arg1)
}

// MockmordaContentParser is a mock of mordaContentParser interface.
type MockmordaContentParser struct {
	ctrl     *gomock.Controller
	recorder *MockmordaContentParserMockRecorder
}

// MockmordaContentParserMockRecorder is the mock recorder for MockmordaContentParser.
type MockmordaContentParserMockRecorder struct {
	mock *MockmordaContentParser
}

// NewMockmordaContentParser creates a new mock instance.
func NewMockmordaContentParser(ctrl *gomock.Controller) *MockmordaContentParser {
	mock := &MockmordaContentParser{ctrl: ctrl}
	mock.recorder = &MockmordaContentParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmordaContentParser) EXPECT() *MockmordaContentParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockmordaContentParser) Parse() (models.MordaContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse")
	ret0, _ := ret[0].(models.MordaContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockmordaContentParserMockRecorder) Parse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockmordaContentParser)(nil).Parse))
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockspokSettings is a mock of spokSettings interface.
type MockspokSettings struct {
	ctrl     *gomock.Controller
	recorder *MockspokSettingsMockRecorder
}

// MockspokSettingsMockRecorder is the mock recorder for MockspokSettings.
type MockspokSettingsMockRecorder struct {
	mock *MockspokSettings
}

// NewMockspokSettings creates a new mock instance.
func NewMockspokSettings(ctrl *gomock.Controller) *MockspokSettings {
	mock := &MockspokSettings{ctrl: ctrl}
	mock.recorder = &MockspokSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspokSettings) EXPECT() *MockspokSettingsMockRecorder {
	return m.recorder
}

// IsSpokDomain mocks base method.
func (m *MockspokSettings) IsSpokDomain(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpokDomain", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSpokDomain indicates an expected call of IsSpokDomain.
func (mr *MockspokSettingsMockRecorder) IsSpokDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpokDomain", reflect.TypeOf((*MockspokSettings)(nil).IsSpokDomain), arg0)
}

// MockdomainGetter is a mock of domainGetter interface.
type MockdomainGetter struct {
	ctrl     *gomock.Controller
	recorder *MockdomainGetterMockRecorder
}

// MockdomainGetterMockRecorder is the mock recorder for MockdomainGetter.
type MockdomainGetterMockRecorder struct {
	mock *MockdomainGetter
}

// NewMockdomainGetter creates a new mock instance.
func NewMockdomainGetter(ctrl *gomock.Controller) *MockdomainGetter {
	mock := &MockdomainGetter{ctrl: ctrl}
	mock.recorder = &MockdomainGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainGetter) EXPECT() *MockdomainGetterMockRecorder {
	return m.recorder
}

// GetDomain mocks base method.
func (m *MockdomainGetter) GetDomain() models.Domain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain")
	ret0, _ := ret[0].(models.Domain)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockdomainGetterMockRecorder) GetDomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockdomainGetter)(nil).GetDomain))
}
