// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package madmoptions is a generated GoMock package.
package madmoptions

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	exports "a.yandex-team.ru/portal/avocado/morda-go/pkg/exports"
	gomock "github.com/golang/mock/gomock"
)

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockoptionsRewriter is a mock of optionsRewriter interface.
type MockoptionsRewriter struct {
	ctrl     *gomock.Controller
	recorder *MockoptionsRewriterMockRecorder
}

// MockoptionsRewriterMockRecorder is the mock recorder for MockoptionsRewriter.
type MockoptionsRewriterMockRecorder struct {
	mock *MockoptionsRewriter
}

// NewMockoptionsRewriter creates a new mock instance.
func NewMockoptionsRewriter(ctrl *gomock.Controller) *MockoptionsRewriter {
	mock := &MockoptionsRewriter{ctrl: ctrl}
	mock.recorder = &MockoptionsRewriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoptionsRewriter) EXPECT() *MockoptionsRewriterMockRecorder {
	return m.recorder
}

// RewriteOptions mocks base method.
func (m *MockoptionsRewriter) RewriteOptions(options *exports.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RewriteOptions", options)
	ret0, _ := ret[0].(error)
	return ret0
}

// RewriteOptions indicates an expected call of RewriteOptions.
func (mr *MockoptionsRewriterMockRecorder) RewriteOptions(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewriteOptions", reflect.TypeOf((*MockoptionsRewriter)(nil).RewriteOptions), options)
}

// WithOptions mocks base method.
func (m *MockoptionsRewriter) WithOptions(options map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithOptions", options)
}

// WithOptions indicates an expected call of WithOptions.
func (mr *MockoptionsRewriterMockRecorder) WithOptions(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOptions", reflect.TypeOf((*MockoptionsRewriter)(nil).WithOptions), options)
}
