// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package experiments is a generated GoMock package.
package experiments

import (
	reflect "reflect"

	models "a.yandex-team.ru/portal/avocado/libs/utils/base/models"
	common "a.yandex-team.ru/portal/avocado/libs/utils/common"
	madmprocessor "a.yandex-team.ru/portal/avocado/libs/utils/experiments/madmprocessor"
	staticparams "a.yandex-team.ru/portal/avocado/libs/utils/staticparams"
	gomock "github.com/golang/mock/gomock"
)

// MockhttpWrapper is a mock of httpWrapper interface.
type MockhttpWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockhttpWrapperMockRecorder
}

// MockhttpWrapperMockRecorder is the mock recorder for MockhttpWrapper.
type MockhttpWrapperMockRecorder struct {
	mock *MockhttpWrapper
}

// NewMockhttpWrapper creates a new mock instance.
func NewMockhttpWrapper(ctrl *gomock.Controller) *MockhttpWrapper {
	mock := &MockhttpWrapper{ctrl: ctrl}
	mock.recorder = &MockhttpWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpWrapper) EXPECT() *MockhttpWrapperMockRecorder {
	return m.recorder
}

// GetExpBoxes mocks base method.
func (m *MockhttpWrapper) GetExpBoxes(location staticparams.Location) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpBoxes", location)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExpBoxes indicates an expected call of GetExpBoxes.
func (mr *MockhttpWrapperMockRecorder) GetExpBoxes(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpBoxes", reflect.TypeOf((*MockhttpWrapper)(nil).GetExpBoxes), location)
}

// GetExpFlags mocks base method.
func (m *MockhttpWrapper) GetExpFlags(location staticparams.Location) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpFlags", location)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExpFlags indicates an expected call of GetExpFlags.
func (mr *MockhttpWrapperMockRecorder) GetExpFlags(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpFlags", reflect.TypeOf((*MockhttpWrapper)(nil).GetExpFlags), location)
}

// GetOverridingABFlags mocks base method.
func (m *MockhttpWrapper) GetOverridingABFlags() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverridingABFlags")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetOverridingABFlags indicates an expected call of GetOverridingABFlags.
func (mr *MockhttpWrapperMockRecorder) GetOverridingABFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverridingABFlags", reflect.TypeOf((*MockhttpWrapper)(nil).GetOverridingABFlags))
}

// IsInternalRequest mocks base method.
func (m *MockhttpWrapper) IsInternalRequest() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInternalRequest")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInternalRequest indicates an expected call of IsInternalRequest.
func (mr *MockhttpWrapperMockRecorder) IsInternalRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInternalRequest", reflect.TypeOf((*MockhttpWrapper)(nil).IsInternalRequest))
}

// MockflagsParser is a mock of flagsParser interface.
type MockflagsParser struct {
	ctrl     *gomock.Controller
	recorder *MockflagsParserMockRecorder
}

// MockflagsParserMockRecorder is the mock recorder for MockflagsParser.
type MockflagsParserMockRecorder struct {
	mock *MockflagsParser
}

// NewMockflagsParser creates a new mock instance.
func NewMockflagsParser(ctrl *gomock.Controller) *MockflagsParser {
	mock := &MockflagsParser{ctrl: ctrl}
	mock.recorder = &MockflagsParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockflagsParser) EXPECT() *MockflagsParserMockRecorder {
	return m.recorder
}

// parse mocks base method.
func (m *MockflagsParser) parse(ignoreBalancerExps bool) (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "parse", ignoreBalancerExps)
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// parse indicates an expected call of parse.
func (mr *MockflagsParserMockRecorder) parse(ignoreBalancerExps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "parse", reflect.TypeOf((*MockflagsParser)(nil).parse), ignoreBalancerExps)
}

// MockhttpFlagsProcessor is a mock of httpFlagsProcessor interface.
type MockhttpFlagsProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockhttpFlagsProcessorMockRecorder
}

// MockhttpFlagsProcessorMockRecorder is the mock recorder for MockhttpFlagsProcessor.
type MockhttpFlagsProcessorMockRecorder struct {
	mock *MockhttpFlagsProcessor
}

// NewMockhttpFlagsProcessor creates a new mock instance.
func NewMockhttpFlagsProcessor(ctrl *gomock.Controller) *MockhttpFlagsProcessor {
	mock := &MockhttpFlagsProcessor{ctrl: ctrl}
	mock.recorder = &MockhttpFlagsProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhttpFlagsProcessor) EXPECT() *MockhttpFlagsProcessorMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockhttpFlagsProcessor) Process(expBoxesHeader, flagsHeader, handler string) (models.ABFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", expBoxesHeader, flagsHeader, handler)
	ret0, _ := ret[0].(models.ABFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockhttpFlagsProcessorMockRecorder) Process(expBoxesHeader, flagsHeader, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockhttpFlagsProcessor)(nil).Process), expBoxesHeader, flagsHeader, handler)
}

// MockmadmFlagsProcessor is a mock of madmFlagsProcessor interface.
type MockmadmFlagsProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockmadmFlagsProcessorMockRecorder
}

// MockmadmFlagsProcessorMockRecorder is the mock recorder for MockmadmFlagsProcessor.
type MockmadmFlagsProcessorMockRecorder struct {
	mock *MockmadmFlagsProcessor
}

// NewMockmadmFlagsProcessor creates a new mock instance.
func NewMockmadmFlagsProcessor(ctrl *gomock.Controller) *MockmadmFlagsProcessor {
	mock := &MockmadmFlagsProcessor{ctrl: ctrl}
	mock.recorder = &MockmadmFlagsProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmadmFlagsProcessor) EXPECT() *MockmadmFlagsProcessorMockRecorder {
	return m.recorder
}

// GetFlags mocks base method.
func (m *MockmadmFlagsProcessor) GetFlags() (map[string][]madmprocessor.ABFlagsParameters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlags")
	ret0, _ := ret[0].(map[string][]madmprocessor.ABFlagsParameters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlags indicates an expected call of GetFlags.
func (mr *MockmadmFlagsProcessorMockRecorder) GetFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlags", reflect.TypeOf((*MockmadmFlagsProcessor)(nil).GetFlags))
}

// Process mocks base method.
func (m *MockmadmFlagsProcessor) Process(flag string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", flag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Process indicates an expected call of Process.
func (mr *MockmadmFlagsProcessorMockRecorder) Process(flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockmadmFlagsProcessor)(nil).Process), flag)
}

// MockrequestGetter is a mock of requestGetter interface.
type MockrequestGetter struct {
	ctrl     *gomock.Controller
	recorder *MockrequestGetterMockRecorder
}

// MockrequestGetterMockRecorder is the mock recorder for MockrequestGetter.
type MockrequestGetterMockRecorder struct {
	mock *MockrequestGetter
}

// NewMockrequestGetter creates a new mock instance.
func NewMockrequestGetter(ctrl *gomock.Controller) *MockrequestGetter {
	mock := &MockrequestGetter{ctrl: ctrl}
	mock.recorder = &MockrequestGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrequestGetter) EXPECT() *MockrequestGetterMockRecorder {
	return m.recorder
}

// GetRequest mocks base method.
func (m *MockrequestGetter) GetRequest() models.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(models.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockrequestGetterMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockrequestGetter)(nil).GetRequest))
}

// MockstaticParamsGetter is a mock of staticParamsGetter interface.
type MockstaticParamsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockstaticParamsGetterMockRecorder
}

// MockstaticParamsGetterMockRecorder is the mock recorder for MockstaticParamsGetter.
type MockstaticParamsGetterMockRecorder struct {
	mock *MockstaticParamsGetter
}

// NewMockstaticParamsGetter creates a new mock instance.
func NewMockstaticParamsGetter(ctrl *gomock.Controller) *MockstaticParamsGetter {
	mock := &MockstaticParamsGetter{ctrl: ctrl}
	mock.recorder = &MockstaticParamsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstaticParamsGetter) EXPECT() *MockstaticParamsGetterMockRecorder {
	return m.recorder
}

// Env mocks base method.
func (m *MockstaticParamsGetter) Env() common.Environment {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Env")
	ret0, _ := ret[0].(common.Environment)
	return ret0
}

// Env indicates an expected call of Env.
func (mr *MockstaticParamsGetterMockRecorder) Env() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Env", reflect.TypeOf((*MockstaticParamsGetter)(nil).Env))
}

// Location mocks base method.
func (m *MockstaticParamsGetter) Location() staticparams.Location {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Location")
	ret0, _ := ret[0].(staticparams.Location)
	return ret0
}

// Location indicates an expected call of Location.
func (mr *MockstaticParamsGetterMockRecorder) Location() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Location", reflect.TypeOf((*MockstaticParamsGetter)(nil).Location))
}
