// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	langdetect "a.yandex-team.ru/portal/avocado/libs/utils/langdetect"
	mock "github.com/stretchr/testify/mock"
)

// Lookup is an autogenerated mock type for the Lookup type
type Lookup struct {
	mock.Mock
}

// Destroy provides a mock function with given fields:
func (_m *Lookup) Destroy() {
	_m.Called()
}

// Filepath provides a mock function with given fields:
func (_m *Lookup) Filepath() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: geo, language, domain, cookie, filter, def
func (_m *Lookup) Find(geo string, language string, domain string, cookie int, filter []string, def string) (langdetect.LangInfo, error) {
	ret := _m.Called(geo, language, domain, cookie, filter, def)

	var r0 langdetect.LangInfo
	if rf, ok := ret.Get(0).(func(string, string, string, int, []string, string) langdetect.LangInfo); ok {
		r0 = rf(geo, language, domain, cookie, filter, def)
	} else {
		r0 = ret.Get(0).(langdetect.LangInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, []string, string) error); ok {
		r1 = rf(geo, language, domain, cookie, filter, def)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: geo, language, domain, cookie, filter, def
func (_m *Lookup) List(geo string, language string, domain string, cookie int, filter []string, def string) ([]langdetect.LangInfo, error) {
	ret := _m.Called(geo, language, domain, cookie, filter, def)

	var r0 []langdetect.LangInfo
	if rf, ok := ret.Get(0).(func(string, string, string, int, []string, string) []langdetect.LangInfo); ok {
		r0 = rf(geo, language, domain, cookie, filter, def)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]langdetect.LangInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, int, []string, string) error); ok {
		r1 = rf(geo, language, domain, cookie, filter, def)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
