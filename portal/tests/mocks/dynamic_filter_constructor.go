// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	filters "a.yandex-team.ru/portal/avocado/libs/utils/madm/filters"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DynamicFilterConstructor is an autogenerated mock type for the DynamicFilterConstructor type
type DynamicFilterConstructor struct {
	mock.Mock
}

// NewDynamicFilter provides a mock function with given fields: code
func (_m *DynamicFilterConstructor) NewDynamicFilter(code string) (filters.Filter, error) {
	ret := _m.Called(code)

	var r0 filters.Filter
	if rf, ok := ret.Get(0).(func(string) filters.Filter); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filters.Filter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDynamicFilterConstructor creates a new instance of DynamicFilterConstructor. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDynamicFilterConstructor(t testing.TB) *DynamicFilterConstructor {
	mock := &DynamicFilterConstructor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
