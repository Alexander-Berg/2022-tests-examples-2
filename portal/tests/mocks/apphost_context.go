// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	apphost "a.yandex-team.ru/apphost/api/service/go/apphost"

	mock "github.com/stretchr/testify/mock"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// ApphostContext is an autogenerated mock type for the ApphostContext type
type ApphostContext struct {
	mock.Mock
}

// AddBalancingHint provides a mock function with given fields: targetSource, hint
func (_m *ApphostContext) AddBalancingHint(targetSource string, hint uint64) error {
	ret := _m.Called(targetSource, hint)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint64) error); ok {
		r0 = rf(targetSource, hint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddFlag provides a mock function with given fields: flag
func (_m *ApphostContext) AddFlag(flag string) error {
	ret := _m.Called(flag)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddJSON provides a mock function with given fields: typ, value
func (_m *ApphostContext) AddJSON(typ string, value interface{}) error {
	ret := _m.Called(typ, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(typ, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddPB provides a mock function with given fields: typ, value
func (_m *ApphostContext) AddPB(typ string, value protoreflect.ProtoMessage) error {
	ret := _m.Called(typ, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, protoreflect.ProtoMessage) error); ok {
		r0 = rf(typ, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApphostParams provides a mock function with given fields:
func (_m *ApphostContext) ApphostParams() (apphost.ServiceParams, error) {
	ret := _m.Called()

	var r0 apphost.ServiceParams
	if rf, ok := ret.Get(0).(func() apphost.ServiceParams); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apphost.ServiceParams)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Context provides a mock function with given fields:
func (_m *ApphostContext) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *ApphostContext) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GUID provides a mock function with given fields:
func (_m *ApphostContext) GUID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetJSONs provides a mock function with given fields: typ, slice
func (_m *ApphostContext) GetJSONs(typ string, slice interface{}) error {
	ret := _m.Called(typ, slice)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(typ, slice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOneJSON provides a mock function with given fields: typ, value
func (_m *ApphostContext) GetOneJSON(typ string, value interface{}) error {
	ret := _m.Called(typ, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(typ, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOnePB provides a mock function with given fields: typ, value
func (_m *ApphostContext) GetOnePB(typ string, value protoreflect.ProtoMessage) error {
	ret := _m.Called(typ, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, protoreflect.ProtoMessage) error); ok {
		r0 = rf(typ, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPBs provides a mock function with given fields: typ, slice
func (_m *ApphostContext) GetPBs(typ string, slice interface{}) error {
	ret := _m.Called(typ, slice)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(typ, slice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *ApphostContext) Next() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Path provides a mock function with given fields:
func (_m *ApphostContext) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RUID provides a mock function with given fields:
func (_m *ApphostContext) RUID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// ReadAll provides a mock function with given fields:
func (_m *ApphostContext) ReadAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceTicket provides a mock function with given fields:
func (_m *ApphostContext) ServiceTicket() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserTicket provides a mock function with given fields:
func (_m *ApphostContext) UserTicket() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithContext provides a mock function with given fields: ctx
func (_m *ApphostContext) WithContext(ctx context.Context) apphost.Context {
	ret := _m.Called(ctx)

	var r0 apphost.Context
	if rf, ok := ret.Get(0).(func(context.Context) apphost.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apphost.Context)
		}
	}

	return r0
}
