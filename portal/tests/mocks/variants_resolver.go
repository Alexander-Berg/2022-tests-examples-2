// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	madm "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2"
	mock "github.com/stretchr/testify/mock"

	requestcontext "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2/internal/requestcontext"

	testing "testing"
)

// variantsResolver is an autogenerated mock type for the variantsResolver type
type variantsResolver struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *variantsResolver) Execute(_a0 requestcontext.Context, _a1 madm.ArgsConfig) ([]interface{}, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(requestcontext.Context, madm.ArgsConfig) []interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestcontext.Context, madm.ArgsConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newVariantsResolver creates a new instance of variantsResolver. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func newVariantsResolver(t testing.TB) *variantsResolver {
	mock := &variantsResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
