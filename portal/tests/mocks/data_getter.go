// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	madm "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2"
	contexts "a.yandex-team.ru/portal/avocado/morda-go/pkg/contexts"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// DataGetter is an autogenerated mock type for the DataGetter type
type DataGetter struct {
	mock.Mock
}

// StaticData provides a mock function with given fields: exportName, ctx, args
func (_m *DataGetter) StaticData(exportName madm.ExportName, ctx contexts.Base, args ...madm.Arg) (madm.Items, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, exportName, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 madm.Items
	if rf, ok := ret.Get(0).(func(madm.ExportName, contexts.Base, ...madm.Arg) madm.Items); ok {
		r0 = rf(exportName, ctx, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(madm.Items)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(madm.ExportName, contexts.Base, ...madm.Arg) error); ok {
		r1 = rf(exportName, ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDataGetter creates a new instance of DataGetter. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataGetter(t testing.TB) *DataGetter {
	mock := &DataGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
