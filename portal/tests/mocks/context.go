// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	filters "a.yandex-team.ru/portal/avocado/libs/utils/madm/filters"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

// GetBool provides a mock function with given fields: _a0
func (_m *Context) GetBool(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDataForStaticFilters provides a mock function with given fields:
func (_m *Context) GetDataForStaticFilters() *filters.DataForStaticFilters {
	ret := _m.Called()

	var r0 *filters.DataForStaticFilters
	if rf, ok := ret.Get(0).(func() *filters.DataForStaticFilters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filters.DataForStaticFilters)
		}
	}

	return r0
}

// GetInteger provides a mock function with given fields: _a0
func (_m *Context) GetInteger(_a0 string) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLogger provides a mock function with given fields:
func (_m *Context) GetLogger() filters.Logger {
	ret := _m.Called()

	var r0 filters.Logger
	if rf, ok := ret.Get(0).(func() filters.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filters.Logger)
		}
	}

	return r0
}

// GetMissedKeys provides a mock function with given fields:
func (_m *Context) GetMissedKeys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetString provides a mock function with given fields: _a0
func (_m *Context) GetString(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasKey provides a mock function with given fields: _a0
func (_m *Context) HasKey(_a0 string) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewContext creates a new instance of Context. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewContext(t testing.TB) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
