// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	blackbox "a.yandex-team.ru/portal/avocado/libs/utils/blackbox"
	contexts "a.yandex-team.ru/portal/avocado/morda-go/pkg/contexts"

	mock "github.com/stretchr/testify/mock"

	morda_data "a.yandex-team.ru/portal/avocado/proto/morda_data"

	protoanswers "a.yandex-team.ru/apphost/lib/proto_answers"

	uaasinit "a.yandex-team.ru/quality/ab_testing/exp_daemon/iface/apphost/protos"
)

// Morda is an autogenerated mock type for the Morda type
type Morda struct {
	mock.Mock
}

// Base provides a mock function with given fields:
func (_m *Morda) Base() contexts.Base {
	ret := _m.Called()

	var r0 contexts.Base
	if rf, ok := ret.Get(0).(func() contexts.Base); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(contexts.Base)
		}
	}

	return r0
}

// GetAuthInfoForCompare provides a mock function with given fields:
func (_m *Morda) GetAuthInfoForCompare() ([]blackbox.AuthInfo, error) {
	ret := _m.Called()

	var r0 []blackbox.AuthInfo
	if rf, ok := ret.Get(0).(func() []blackbox.AuthInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blackbox.AuthInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFirstChunkOfZenRequest provides a mock function with given fields:
func (_m *Morda) GetFirstChunkOfZenRequest() (*morda_data.TMordaBackendData, error) {
	ret := _m.Called()

	var r0 *morda_data.TMordaBackendData
	if rf, ok := ret.Get(0).(func() *morda_data.TMordaBackendData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*morda_data.TMordaBackendData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOriginHTTPRequest provides a mock function with given fields: _a0
func (_m *Morda) GetOriginHTTPRequest(_a0 *contexts.HTTPRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.HTTPRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUaasOutput provides a mock function with given fields:
func (_m *Morda) GetUaasOutput() (*uaasinit.TUaasResponse, error) {
	ret := _m.Called()

	var r0 *uaasinit.TUaasResponse
	if rf, ok := ret.Get(0).(func() *uaasinit.TUaasResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uaasinit.TUaasResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUaasOutputHTTP provides a mock function with given fields: _a0
func (_m *Morda) GetUaasOutputHTTP(_a0 *[]contexts.UaasResponseHTTP) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]contexts.UaasResponseHTTP) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetZenRequest provides a mock function with given fields:
func (_m *Morda) GetZenRequest() (*morda_data.TMordaBackendData, error) {
	ret := _m.Called()

	var r0 *morda_data.TMordaBackendData
	if rf, ok := ret.Get(0).(func() *morda_data.TMordaBackendData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*morda_data.TMordaBackendData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRequestToReqCompare provides a mock function with given fields:
func (_m *Morda) PutRequestToReqCompare() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutRequestToZenSetup provides a mock function with given fields:
func (_m *Morda) PutRequestToZenSetup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutUaasInput provides a mock function with given fields: input
func (_m *Morda) PutUaasInput(input *uaasinit.TUaasInput) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uaasinit.TUaasInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutUaasInputHTTP provides a mock function with given fields: _a0
func (_m *Morda) PutUaasInputHTTP(_a0 *contexts.HTTPRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*contexts.HTTPRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBackendRequest provides a mock function with given fields: request
func (_m *Morda) SetBackendRequest(request *protoanswers.THttpRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protoanswers.THttpRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFinalResponse provides a mock function with given fields: response
func (_m *Morda) SetFinalResponse(response *protoanswers.THttpResponse) error {
	ret := _m.Called(response)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protoanswers.THttpResponse) error); ok {
		r0 = rf(response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFirstChunkOfZenForCompare provides a mock function with given fields: request
func (_m *Morda) SetFirstChunkOfZenForCompare(request *morda_data.TMordaBackendData) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*morda_data.TMordaBackendData) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFirstChunkOfZenForInit provides a mock function with given fields: request
func (_m *Morda) SetFirstChunkOfZenForInit(request *morda_data.TMordaBackendData) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*morda_data.TMordaBackendData) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLegacyBackendRequest provides a mock function with given fields: request
func (_m *Morda) SetLegacyBackendRequest(request *protoanswers.THttpRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protoanswers.THttpRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPerlInitRequest provides a mock function with given fields: request
func (_m *Morda) SetPerlInitRequest(request *protoanswers.THttpRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protoanswers.THttpRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWebLiteRequest provides a mock function with given fields: request
func (_m *Morda) SetWebLiteRequest(request *protoanswers.THttpRequest) error {
	ret := _m.Called(request)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protoanswers.THttpRequest) error); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMorda interface {
	mock.TestingT
	Cleanup(func())
}

// NewMorda creates a new instance of Morda. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMorda(t mockConstructorTestingTNewMorda) *Morda {
	mock := &Morda{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
