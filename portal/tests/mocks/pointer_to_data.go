// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	testing "testing"

	readers "a.yandex-team.ru/portal/avocado/libs/utils/madm/readers"
	mock "github.com/stretchr/testify/mock"
)

// PointerToData is an autogenerated mock type for the PointerToData type
type PointerToData struct {
	mock.Mock
}

// GenerateParser provides a mock function with given fields:
func (_m *PointerToData) GenerateParser() (readers.EntryParser, error) {
	ret := _m.Called()

	var r0 readers.EntryParser
	if rf, ok := ret.Get(0).(func() readers.EntryParser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(readers.EntryParser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replace provides a mock function with given fields: _a0
func (_m *PointerToData) Replace(_a0 []map[string]interface{}) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]map[string]interface{}) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPointerToData creates a new instance of PointerToData. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPointerToData(t testing.TB) *PointerToData {
	mock := &PointerToData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
