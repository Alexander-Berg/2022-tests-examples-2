// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	madm "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2"
	mock "github.com/stretchr/testify/mock"

	requestcontext "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2/internal/requestcontext"

	storage "a.yandex-team.ru/portal/avocado/libs/utils/madm/v2/storage"

	testing "testing"
)

// Index is an autogenerated mock type for the Index type
type Index struct {
	mock.Mock
}

// Add provides a mock function with given fields: item, chain
func (_m *Index) Add(item storage.Item, chain []storage.indexField) error {
	ret := _m.Called(item, chain)

	var r0 error
	if rf, ok := ret.Get(0).(func(storage.Item, []storage.indexField) error); ok {
		r0 = rf(item, chain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: ctx, args
func (_m *Index) Select(ctx requestcontext.Context, args madm.ArgsConfig) ([]storage.Item, error) {
	ret := _m.Called(ctx, args)

	var r0 []storage.Item
	if rf, ok := ret.Get(0).(func(requestcontext.Context, madm.ArgsConfig) []storage.Item); ok {
		r0 = rf(ctx, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(requestcontext.Context, madm.ArgsConfig) error); ok {
		r1 = rf(ctx, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIndex creates a new instance of Index. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewIndex(t testing.TB) *Index {
	mock := &Index{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
