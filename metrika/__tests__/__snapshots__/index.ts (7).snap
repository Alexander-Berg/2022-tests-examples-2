// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`boolean segment should handle No 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "value": false,
    },
    "id": "ym:s:isNewUser",
    "type": "boolean",
  },
]
`;

exports[`boolean segment should handle Yes 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "value": true,
    },
    "id": "ym:s:isNewUser",
    "type": "boolean",
  },
]
`;

exports[`boolean segment user-centric mode should work with one date 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "value": true,
    },
    "dateFrom": "2015-12-15",
    "id": "ym:s:hasGCLID-usercentric",
    "type": "boolean",
  },
]
`;

exports[`boolean segment user-centric mode should work with two dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "value": false,
    },
    "dateFrom": "2015-12-12",
    "dateTo": "2016-12-12",
    "id": "ym:s:hasGCLID-usercentric",
    "type": "boolean",
  },
]
`;

exports[`boolean segment user-centric mode should work without dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "value": true,
    },
    "id": "ym:s:hasGCLID-usercentric",
    "type": "boolean",
  },
]
`;

exports[`boolean segment user-centric mode should work without dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "value": false,
    },
    "id": "ym:s:hasGCLID-usercentric",
    "type": "boolean",
  },
]
`;

exports[`date segment should parse < expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "from": "2016-03-04",
      "operator": "<",
      "to": "2016-03-04",
    },
    "id": "ym:s:previousVisitDate",
    "type": "date",
  },
]
`;

exports[`date segment should parse == expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "from": "2016-01-01",
      "operator": "==",
      "to": "2016-01-01",
    },
    "id": "ym:s:previousVisitDate",
    "type": "date",
  },
]
`;

exports[`date segment should parse > expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "from": "2016-02-02",
      "operator": ">",
      "to": "2016-02-02",
    },
    "id": "ym:s:previousVisitDate",
    "type": "date",
  },
]
`;

exports[`date segment should parse between 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "from": "2015-12-01",
      "operator": "<>",
      "to": "2016-03-05",
    },
    "id": "ym:s:previousVisitDate",
    "type": "date",
  },
]
`;

exports[`date segment should parse between 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "from": "2013-12-12",
      "operator": "<>",
      "to": "2014-05-06",
    },
    "id": "ym:s:previousVisitDate",
    "type": "date",
  },
]
`;

exports[`goal segment complex expression should parse goal reached segment 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        123456,
        98765,
      ],
    },
    "id": "ym:s:goal",
    "type": "goals",
  },
]
`;

exports[`goal segment single expression should parse goal not reached segment 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        123456,
      ],
    },
    "id": "ym:s:goal",
    "type": "goals",
  },
]
`;

exports[`goal segment single expression should parse goal reached segment 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        123456,
      ],
    },
    "id": "ym:s:goal",
    "type": "goals",
  },
]
`;

exports[`list segment complex expression should parse exclude expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        "ru",
        "us",
        null,
      ],
    },
    "id": "ym:s:browserCountry",
    "type": "list",
  },
]
`;

exports[`list segment complex expression should parse include expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "ru",
        "us",
        null,
      ],
    },
    "id": "ym:s:browserCountry",
    "type": "list",
  },
]
`;

exports[`list segment simple expression should parse exclude expression with regular value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        "ru",
      ],
    },
    "id": "ym:s:browserCountry",
    "type": "list",
  },
]
`;

exports[`list segment simple expression should parse exclude with null value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        null,
      ],
    },
    "id": "ym:s:browserCountry",
    "type": "list",
  },
]
`;

exports[`list segment simple expression should parse include expression with null value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        null,
      ],
    },
    "id": "ym:s:browserCountry",
    "type": "list",
  },
]
`;

exports[`list segment simple expression should parse include expression with regular value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "ru",
      ],
    },
    "id": "ym:s:browserCountry",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with one date should work with complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with one date should work with complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with one date should work with simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with one date should work with simple expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with two dates should work with complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with two dates should work with complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with two dates should work with simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode with two dates should work with simple expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode without dates should work with complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
        2,
      ],
    },
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode exclude mode without dates should work with simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        1,
      ],
    },
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with one date should work with complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with one date should work with complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with one date should work with simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with one date should work with simple expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with two dates should work with complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with two dates should work with complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
        5,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with two dates should work with simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode with two dates should work with simple expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
      ],
    },
    "dateFrom": "2012-06-05",
    "dateTo": "2012-06-07",
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode without dates should work with complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
        2,
      ],
    },
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`list segment user-centric mode include mode without dates should work with simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        1,
      ],
    },
    "id": "ym:s:regionCitySize-usercentric",
    "type": "list",
  },
]
`;

exports[`multiline segment multiple lines with conjunction should work with three subexpressions 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        "phrase1",
        "@phrase2",
        "~phrase3",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment multiple lines with conjunction should work with two subexpressions 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        "phrase1",
        "phrase2",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment multiple lines with disjunction should work with three subexpressions 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "phrase1",
        "@phrase2",
        "~phrase3",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment multiple lines with disjunction should work with two subexpressions 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "phrase1",
        "phrase2",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment one line should parse !@ expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "!@phrase1",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment one line should parse !~ expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "!~phrase1",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment one line should parse == expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "phrase1",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment one line should parse @ expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "@phrase1",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment one line should parse ~ expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "~phrase1",
      ],
    },
    "id": "ym:s:searchPhrase",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode many lines expression conjunction mode should work with one date 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        "qwerty",
        "!asdf",
        "@qaz",
        "~wsx",
        "!@edc",
        "!~rfv",
      ],
    },
    "dateFrom": "2011-08-08",
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode many lines expression conjunction mode should work with two dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        "qwerty",
        "!asdf",
        "@qaz",
        "~wsx",
        "!@edc",
        "!~rfv",
      ],
    },
    "dateFrom": "2011-08-08",
    "dateTo": "2012-11-11",
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode many lines expression conjunction mode should work without dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        "qwerty",
        "!asdf",
        "@qaz",
        "~wsx",
        "!@edc",
        "!~rfv",
      ],
    },
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode many lines expression disjunction mode should work with one date 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        "qwerty",
        "!asdf",
        "@qaz",
        "~wsx",
        "!@edc",
        "!~rfv",
      ],
    },
    "dateFrom": "2011-08-08",
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode many lines expression disjunction mode should work with two dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        "qwerty",
        "!asdf",
        "@qaz",
        "~wsx",
        "!@edc",
        "!~rfv",
      ],
    },
    "dateFrom": "2011-08-08",
    "dateTo": "2012-11-11",
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode many lines expression disjunction mode should work without dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        "qwerty",
        "!asdf",
        "@qaz",
        "~wsx",
        "!@edc",
        "!~rfv",
      ],
    },
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode one line expression should work with one date 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        "qwerty",
      ],
    },
    "dateFrom": "2016-12-11",
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode one line expression should work with two dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        "qwerty",
      ],
    },
    "dateFrom": "2016-03-05",
    "dateTo": "2016-03-11",
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`multiline segment user-centric mode one line expression should work without dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        "qwerty",
      ],
    },
    "id": "ym:u:firstSearchPhrase-usercentric",
    "type": "multiline",
  },
]
`;

exports[`number segment should parse < expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "currency": undefined,
      "operator": "<",
      "value": 5,
    },
    "id": "ym:s:pageViews",
    "type": "comparable",
  },
]
`;

exports[`number segment should parse == expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "currency": undefined,
      "operator": "==",
      "value": 5,
    },
    "id": "ym:s:pageViews",
    "type": "comparable",
  },
]
`;

exports[`number segment should parse > expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "currency": undefined,
      "operator": ">",
      "value": 5,
    },
    "id": "ym:s:pageViews",
    "type": "comparable",
  },
]
`;

exports[`number segment should parse between 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "operator": "<>",
      "value": Array [
        5,
        10,
      ],
    },
    "id": "ym:s:pageViews",
    "type": "comparable",
  },
]
`;

exports[`number segment should parse between 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "operator": "<>",
      "value": Array [
        3,
        7,
      ],
    },
    "id": "ym:s:pageViews",
    "type": "comparable",
  },
]
`;

exports[`number segment should parse with currency 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "currency": "CNY",
      "operator": "==",
      "value": 2,
    },
    "id": "ym:u:user<currency>Revenue",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work with one date 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "currency": undefined,
      "operator": "==",
      "value": 5,
    },
    "dateFrom": "2012-3-5",
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work with one date 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "operator": "<>",
      "value": Array [
        5,
        10,
      ],
    },
    "dateFrom": "2012-3-5",
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work with two dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "currency": undefined,
      "operator": "==",
      "value": 5,
    },
    "dateFrom": "2012-3-5",
    "dateTo": "2015-01-05",
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work with two dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "operator": "<>",
      "value": Array [
        5,
        10,
      ],
    },
    "dateFrom": "2012-3-5",
    "dateTo": "2015-01-05",
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work without dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "currency": undefined,
      "operator": "==",
      "value": 5,
    },
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work without dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "currency": undefined,
      "operator": ">",
      "value": 5,
    },
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`number segment user-centric mode should work without dates 3`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "operator": "<>",
      "value": Array [
        5,
        7,
      ],
    },
    "id": "ym:u:daysSinceFirstVisitOneBased-usercentric",
    "type": "comparable",
  },
]
`;

exports[`params segment should correctly parse complex expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment should correctly parse complex expression with double value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsValueDouble",
      "paramVal": 5,
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment should correctly parse long complex expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1.level2",
      "paramType": "ym:s:paramsLevel3",
      "paramVal": "level3",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment should correctly parse simple expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment should correctly parse value comparison operators 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsValueDouble",
      "paramVal": 5,
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment should correctly parse value comparison operators 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": ">",
      "paramName": "level1",
      "paramType": "ym:s:paramsValueDouble",
      "paramVal": 5,
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment should correctly parse value comparison operators 3`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "<",
      "paramName": "level1",
      "paramType": "ym:s:paramsValueDouble",
      "paramVal": 5,
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier with one user-centric date should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier with one user-centric date should correctly handle noQuantifier flag for complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier with one user-centric date should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "dateFrom": "2016-03-15",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier with two user-centric dates should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "dateTo": "2016-03-17",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier with two user-centric dates should correctly handle noQuantifier flag for complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "dateTo": "2016-03-17",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier with two user-centric dates should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "dateFrom": "2016-03-15",
    "dateTo": "2016-03-17",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier without user-centric dates should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode with internal quantifier without user-centric dates should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier with one user-centric date should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier with one user-centric date should correctly handle noQuantifier flag for complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier with one user-centric date should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "dateFrom": "2016-03-15",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier with two user-centric dates should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "dateTo": "2016-03-17",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier with two user-centric dates should correctly handle noQuantifier flag for complex expression 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "dateFrom": "2016-03-15",
    "dateTo": "2016-03-17",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier with two user-centric dates should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "dateFrom": "2016-03-15",
    "dateTo": "2016-03-17",
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier without user-centric dates should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment user-centric mode without internal quantifier without user-centric dates should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "id": "ym:s:paramsLevel1-usercentric",
    "type": "params",
  },
]
`;

exports[`params segment with quantifier should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment with quantifier should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": false,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment without quantifier should correctly handle noQuantifier flag for complex expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramName": "level1",
      "paramType": "ym:s:paramsLevel2",
      "paramVal": "level2",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`params segment without quantifier should correctly handle noQuantifier flag for simple expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "noQuantifier": true,
      "op": "==",
      "paramType": "ym:s:paramsLevel1",
      "paramVal": "level1",
      "viewName": "level1",
    },
    "id": "ym:s:paramsLevel1",
    "type": "params",
  },
]
`;

exports[`path segment exclude mode multi dimension expression should work with many or many 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment exclude mode multi dimension expression should work with many or one 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          2,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment exclude mode multi dimension expression should work with one multidimension expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment exclude mode multi dimension expression should work with one or many 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment exclude mode one dimension expression shold work with null value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          null,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment exclude mode one dimension expression shold work with regular value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment exclude mode one dimension expression should work with two and more values 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode multi dimension expression should work with many or many 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode multi dimension expression should work with many or one 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          2,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode multi dimension expression should work with one multidimension expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode multi dimension expression should work with one or many 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode one dimension expression shold work with null value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          null,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode one dimension expression shold work with regular value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment include mode one dimension expression should work with two and more values 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "id": "ym:s:regionCountry",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression with dates should work with many or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression with dates should work with many or one 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          2,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression with dates should work with one multidimension expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          5,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression with dates should work with one or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression without dates should work with many or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression without dates should work with many or one 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          2,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression without dates should work with one multidimension expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode multi dimension expression without dates should work with one or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode one dimension expression should work with user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "dateFrom": "2014-12-14",
    "dateTo": "2016-01-01",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode one dimension expression should work with user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "dateFrom": "2014-12-14",
    "dateTo": "2016-01-01",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode exclude mode one dimension expression should work without user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression with dates should work with many or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression with dates should work with many or one 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          2,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression with dates should work with one multidimension expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          5,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression with dates should work with one or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "dateFrom": "2012-12-12",
    "dateTo": "2012-12-15",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression without dates should work with many or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression without dates should work with many or one 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          7,
        ],
        Array [
          2,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression without dates should work with one multidimension expression 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode multi dimension expression without dates should work with one or many 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          undefined,
          5,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode one dimension expression should work with user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "dateFrom": "2014-12-14",
    "dateTo": "2016-01-01",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode one dimension expression should work with user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "dateFrom": "2014-12-14",
    "dateTo": "2016-01-01",
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`path segment user-centric mode include mode one dimension expression should work without user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          1,
        ],
        Array [
          null,
        ],
      ],
    },
    "id": "ym:s:regionCountry-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and many values in exclude mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and many values in exclude mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and many values in include mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and many values in include mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and one value in exclude mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and one value in exclude mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and one value in include mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level many values and one value in include mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and many values in exclude mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and many values in exclude mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and many values in include mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and many values in include mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and one value in exclude mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and one value in exclude mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and one value in include mode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment multi level one value and one value in include mode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in exclude mode with many values 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in exclude mode with many values 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in exclude mode with one value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in exclude mode with one value 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in include mode with many values 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in include mode with many values 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in include mode with one value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level first dimension should parse in include mode with one value 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in exclude mode with many values 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in exclude mode with many values 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in exclude mode with one value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in exclude mode with one value 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in include mode with many values 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in include mode with many values 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in include mode with one value 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment one level not first dimension should parse in include mode with one value 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format exclude mode mixed depth mode should handle first complex and second is simple 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format exclude mode mixed depth mode should handle first simple and second is complex 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format exclude mode same depth level mode should handle multivalue expression of first level 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format exclude mode same depth level mode should handle multivalue path-like expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format exclude mode same depth level mode should handle single expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format exclude mode same depth level mode should handle single path-like expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format include mode mixed depth mode should handle first complex and second is simple 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format include mode mixed depth mode should handle first simple and second is complex 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format include mode same depth level mode should handle multivalue expression of first level 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format include mode same depth level mode should handle multivalue path-like expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format include mode same depth level mode should handle single expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment should fallback to path format parser for legacy filter format include mode same depth level mode should handle single path-like expression 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level exclude mode should work with user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level exclude mode should work with user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level exclude mode should work without user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level exclude mode should work without user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level include mode should work with user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level include mode should work with user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level include mode should work without user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric multi level include mode should work without user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work with user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work with user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work with user-centric dates 3`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work with user-centric dates 4`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work without user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work without user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work without user-centric dates 3`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level exclude mode should work without user-centric dates 4`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": true,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work with user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work with user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work with user-centric dates 3`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work with user-centric dates 4`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "dateFrom": "2015-04-05",
    "dateTo": "2015-05-07",
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work without user-centric dates 1`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work without user-centric dates 2`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          "windows",
        ],
        Array [
          "linux",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work without user-centric dates 3`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`tree segment user-centric one level include mode should work without user-centric dates 4`] = `
Array [
  Object {
    "centric": true,
    "data": Object {
      "inverted": false,
      "items": Array [
        Array [
          undefined,
          "windows xp",
        ],
        Array [
          undefined,
          "linux debian",
        ],
      ],
    },
    "id": "ym:s:operatingSystemRoot-usercentric",
    "type": "tree",
  },
]
`;

exports[`uid segment should parse uid segments 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "value": 123456,
    },
    "id": "ym:s:userIDHash",
    "type": "uid",
  },
]
`;

exports[`url segment should correctly handle urlMode 1`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "phrase1",
      ],
      "urlMode": "dim",
    },
    "id": "ym:pv:URL",
    "type": "url",
  },
]
`;

exports[`url segment should correctly handle urlMode 2`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "phrase1",
      ],
      "urlMode": "hostDim",
    },
    "id": "ym:pv:URL",
    "type": "url",
  },
]
`;

exports[`url segment should correctly handle urlMode 3`] = `
Array [
  Object {
    "centric": false,
    "data": Object {
      "inverted": false,
      "items": Array [
        "phrase1",
      ],
      "urlMode": "pathDim",
    },
    "id": "ym:pv:URL",
    "type": "url",
  },
]
`;
