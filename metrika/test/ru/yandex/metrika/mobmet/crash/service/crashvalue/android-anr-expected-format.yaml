head_units:
  - header:
      index: null
      name: "main"
      message: "group=main, state=waiting, tid=2, priority=5"
    body:
      raw_text: "main\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Thread.parkFor$(Thread.java:2137)\n\
      \tat sun.misc.Unsafe.park(Unsafe.java:358)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:190)\n\
      \tat java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:868)\n\
      \tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:900)\n\
      \tat java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1223)\n\
      \tat java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:210)\n\
      \tat java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:286)\n\
      \tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedLazyValue.invoke(LockBasedStorageManager.java:330)\n\
      \tat kotlin.reflect.jvm.internal.impl.storage.LockBasedStorageManager$LockBasedNotNullLazyValue.invoke(LockBasedStorageManager.java:408)\n\
      \tat kotlin.reflect.jvm.internal.impl.serialization.deserialization.descriptors.DeserializedClassDescriptor.getConstructors(DeserializedClassDescriptor.java:137)\n\
      \tat kotlin.reflect.jvm.internal.KClassImpl.getConstructorDescriptors(KClassImpl.java:200)\n\
      \tat kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2.invoke(KClassImpl.java:91)\n\
      \tat kotlin.reflect.jvm.internal.KClassImpl$Data$constructors$2.invoke(KClassImpl.java:44)\n\
      \tat kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:92)\n\
      \tat kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:31)\n\
      \tat kotlin.reflect.jvm.internal.KClassImpl$Data.d(KClassImpl.java:7)\n\tat\
      \ kotlin.reflect.jvm.internal.KClassImpl.getConstructors(KClassImpl.java:235)\n\
      \tat kotlin.reflect.full.KClasses.getPrimaryConstructor(KClasses.java:40)\n\t\
      at ru.kinopoisk.data.dto.converter.KotlinReflectiveTypeAdapterFactory$Adapter.read(KotlinReflectiveTypeAdapterFactory.java:89)\n\
      \tat com.google.gson.Gson.fromJson(Gson.java:927)\n\tat com.google.gson.Gson.fromJson(Gson.java:892)\n\
      \tat com.google.gson.Gson.fromJson(Gson.java:841)\n\tat ru.kinopoisk.data.dto.converter.JsonConverterImpl.from(JsonConverterImpl.java:28)\n\
      \tat ru.kinopoisk.utils.rating.RatingConfigFetcher$ratingConfigObservable$1.apply(RatingConfigFetcher.java:58)\n\
      \tat ru.kinopoisk.utils.rating.RatingConfigFetcher$ratingConfigObservable$1.apply(RatingConfigFetcher.java:13)\n\
      \tat io.reactivex.internal.operators.observable.ObservableSwitchMap$SwitchMapObserver.onNext(ObservableSwitchMap.java:111)\n\
      \tat io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$DistinctUntilChangedObserver.onNext(ObservableDistinctUntilChanged.java:85)\n\
      \tat io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter.onNext(ObservableCreate.java:66)\n\
      \tat ru.kinopoisk.utils.rating.RatingConfigFetcher$Companion$getStringObservable$1$listener$1.emitRemoteConfigString(RatingConfigFetcher.java:40)\n\
      \tat ru.kinopoisk.utils.rating.RatingConfigFetcher$Companion$getStringObservable$1$listener$1.onCache(RatingConfigFetcher.java:47)\n\
      \tat ru.kinopoisk.dynamic.FirebaseDynamicConstantsImpl$checkNeedUpdateAndFetch$1$3.invoke(FirebaseDynamicConstantsImpl.java:82)\n\
      \tat ru.kinopoisk.dynamic.FirebaseDynamicConstantsImpl$checkNeedUpdateAndFetch$1$3.invoke(FirebaseDynamicConstantsImpl.java:11)\n\
      \tat ru.kinopoisk.dynamic.FirebaseDynamicConstantsImpl.notifyUpdateListeners(FirebaseDynamicConstantsImpl.java:90)\n\
      \tat ru.kinopoisk.dynamic.FirebaseDynamicConstantsImpl.access$notifyUpdateListeners(FirebaseDynamicConstantsImpl.java:11)"
tail_units:
  - header:
      index: 0
      name: "Answers Events Handler1"
      message: "group=main, state=waiting, tid=4051, priority=5"
    body:
      raw_text: "Answers Events Handler1\n\tat java.lang.Object.wait(Native Method)\n\
      \tat java.lang.Thread.parkFor$(Thread.java:2137)\n\tat sun.misc.Unsafe.park(Unsafe.java:358)\n\
      \tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:190)\n\tat\
      \ java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2059)\n\
      \tat java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1120)\n\
      \tat java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:849)\n\
      \tat java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1092)\n\
      \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1152)\n\
      \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\n\
      \tat io.fabric.sdk.android.services.common.ExecutorUtils$1$1.onRun(ExecutorUtils.java:75)\n\
      \tat io.fabric.sdk.android.services.common.BackgroundPriorityRunnable.run(BackgroundPriorityRunnable.java:30)\n\
      \tat java.lang.Thread.run(Thread.java:764)"
  - header:
      index: 1
      name: "AsyncQueryWorker"
      message: "group=main, state=runnable, tid=4025, priority=5"
    body:
      raw_text: "AsyncQueryWorker\n\tat android.os.MessageQueue.nativePollOnce(Native\
      \ Method)\n\tat android.os.MessageQueue.next(MessageQueue.java:326)\n\tat android.os.Looper.loop(Looper.java:165)\n\
      \tat android.os.HandlerThread.run(HandlerThread.java:65)"
  - header:
      index: 2
      name: "AsyncTask #1"
      message: "group=main, state=timed_waiting, tid=4059, priority=5"
    body:
      raw_text: "AsyncTask #1\n\tat java.lang.Object.wait(Native Method)\n\tat java.lang.Thread.parkFor$(Thread.java:2137)\n\
      \tat sun.misc.Unsafe.park(Unsafe.java:358)\n\tat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:230)\n\
      \tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2101)\n\
      \tat java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)\n\
      \tat java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1091)\n\
      \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1152)\n\
      \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\n\
      \tat java.lang.Thread.run(Thread.java:764)"
