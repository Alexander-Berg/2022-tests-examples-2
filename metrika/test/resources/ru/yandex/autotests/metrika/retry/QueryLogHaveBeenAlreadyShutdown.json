{
  "errors": [
    {
      "error_type": "backend_error",
      "message": "Запрос не может быть обработан из-за внутренней ошибки. Мы проанализируем и постараемся устранить причину как можно быстрее. Пожалуйста, не отправляйте запрос повторно."
    }
  ],
  "code": 503,
  "message": "Запрос не может быть обработан из-за внутренней ошибки. Мы проанализируем и постараемся устранить причину как можно быстрее. Пожалуйста, не отправляйте запрос повторно.",
  "_profile": {
    "queries": [
      {
        "host": "mtlog05-01-2.yandex.ru:8123",
        "query": "SELECT `ym:ad:lastsignDirectPlatformTypeName` AS `ym:ad:lastsignDirectPlatformTypeName`, `ym:ad:avgVisitDurationSeconds` AS `ym:ad:avgVisitDurationSeconds`, `ym:ad:visitsPerDay` AS `ym:ad:visitsPerDay`, `ym:cs:sum643ClickCost` * `ym:c:sumGoal126570Reaches` / (`ym:c:sumGoal126570Reaches` * `ym:c:sumGoal126570Reaches`) AS `ym:ad:goal126570643CPA`, `ym:ad:affinityIndexInterests` AS `ym:ad:affinityIndexInterests`, `ym:ad:manPercentage` AS `ym:ad:manPercentage`, `ym:cs:sum643ClickCost` * `ym:c:sumVisits` / (`ym:c:sumVisits` * `ym:c:sumVisits`) AS `ym:ad:643AdCostPerVisit`, `ym:ad:sumParams` AS `ym:ad:sumParams`, `ym:ad:users` AS `ym:ad:users`, `ym:ad:goal126570visits` AS `ym:ad:goal126570visits` FROM (SELECT toInt64(TargetType \u003d toUInt16(2) ? toUInt16(0) : TargetType) AS `ym:ad:lastsignDirectPlatformTypeName`, sum((CurrencyID \u003d toInt16(643) ? CostCur / 1000000.0 : 0.0) * Sign) * toInt64(10) AS `ym:cs:sum643ClickCost` FROM click_storage SAMPLE 0.1 WHERE Date \u003d toDate(\u00272016-03-01\u0027) and ClientID \u003d 1486392 and PlaceID \u003d toInt32(542) and GoodEvent \u003e toInt32(0) GROUP BY `ym:ad:lastsignDirectPlatformTypeName` WITH TOTALS ) global any full outer join (SELECT toInt64(LastSignificantTraficSourceClickTargetType) \u003d toInt64(2) ? toInt64(0) : toInt64(LastSignificantTraficSourceClickTargetType) AS `ym:ad:lastsignDirectPlatformTypeName`, sum(Duration * Sign) / sum(Sign) AS `ym:ad:avgVisitDurationSeconds`, sum(Sign) / 1.0 * toInt64(10) AS `ym:ad:visitsPerDay`, sum(arrayCount(x -\u003e x \u003d 126570,`Goals.ID`) * Sign) * toInt64(10) AS `ym:c:sumGoal126570Reaches`, uniqExact(VisitID) AS `ym:ad:affinityIndexInterests`, 100.0 * (sumIf((Sex \u003d 1) * Sign,Sex - 1 !\u003d toInt16(-1)) / sumIf(Sign,Sex - 1 !\u003d toInt16(-1))) AS `ym:ad:manPercentage`, sum(Sign) * toInt64(10) AS `ym:c:sumVisits`, sumArray(arrayMap(x -\u003e (isFinite(x) ? x : 0) * Sign,arrayFilter(t,x_0 -\u003e x_0 !\u003d \u0027__ym\u0027,arrayMap(x_0,x_1 -\u003e x_1 * (x_0 \u003d toUInt32(0) ? toUInt32(1) : x_0),`ParsedParams.Quantity`,`ParsedParams.ValueDouble`),`ParsedParams.Key1`))) * toInt64(10) AS `ym:ad:sumParams`, uniqExact(UserID) * toInt64(10) AS `ym:ad:users`, sumIf(Sign,arrayExists(x_0 -\u003e x_0 \u003d 126570,`Goals.ID`)) * toInt64(10) AS `ym:ad:goal126570visits` FROM default.visits_layer SAMPLE 0.1 WHERE StartDate \u003d toDate(\u00272016-03-01\u0027) and CounterID \u003d 501087 and LastSignificantTraficSourceClickClientID \u003d 1486392 and LastSignificantTraficSourcePlaceID \u003d 542 and LastSignificantTraficSourceID \u003d toInt8(3) and LastSignificantTraficSourceClickGoodEvent \u003e toInt32(0) and (toInt64(LastSignificantTraficSourceClickTargetType) \u003d toInt64(2) OR toInt64(LastSignificantTraficSourceClickTargetType) !\u003d toInt64(-1) AND toInt64(LastSignificantTraficSourceClickTargetType) !\u003d toInt64(2)) GROUP BY `ym:ad:lastsignDirectPlatformTypeName` WITH TOTALS ) using `ym:ad:lastsignDirectPlatformTypeName` ORDER BY `ym:ad:avgVisitDurationSeconds` DESC, `ym:ad:lastsignDirectPlatformTypeName` ASC limit 0,7",
        "params": {
          "extremes": "1",
          "user": "web",
          "compress": "1"
        },
        "time": 47,
        "rows": 0,
        "request_id": "dba07496-5f41-4e5d-9848-5f49786fe04a",
        "event_date_time": "2017-12-18 18:45:14",
        "daemon_name": "faced",
        "client_host": "faced-master.mtrs.yandex.ru",
        "db_type": "clickhouse",
        "base_time": 1513611914976,
        "error_message": "ClickHouse exception, code: 49, host: mtlog05-01-2.yandex.ru, port: 8123; Code: 49, e.displayText() \u003d DB::Exception: Query log have been already shutdown, e.what() \u003d DB::Exception\n at mtlog05-01-2.yandex.ru:8123, code 49",
        "query_hash": 381916593
      }
    ],
    "additional": {
      "exception": [
        [
          "ru.yandex.metrika.dbclients.clickhouse.errors.ClickhouseApiException: ClickHouse exception, code: 49, host: mtlog05-01-2.yandex.ru, port: 8123; Code: 49, e.displayText() \u003d DB::Exception: Query log have been already shutdown, e.what() \u003d DB::Exception\n at mtlog05-01-2.yandex.ru:8123, code 49",
          "at ru.yandex.metrika.dbclients.clickhouse.errors.ClickhouseExceptionSpecifier.specify(ClickhouseExceptionSpecifier.java:101)",
          "at ru.yandex.metrika.dbclients.clickhouse.HttpTemplateImpl.queryJson(HttpTemplateImpl.java:155)",
          "at ru.yandex.metrika.dbclients.clickhouse.HttpTemplateImpl$$FastClassBySpringCGLIB$$6470e9fd.invoke(\u003cgenerated\u003e)",
          "at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)",
          "at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:718)",
          "at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)",
          "at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)",
          "at ru.yandex.metrika.spring.profile.ProfilerAspect.profileWithArgs(ProfilerAspect.java:267)",
          "at ru.yandex.metrika.spring.profile.ProfilerAspect.profileClickHouse(ProfilerAspect.java:221)",
          "at sun.reflect.GeneratedMethodAccessor244.invoke(Unknown Source)",
          "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
          "at java.lang.reflect.Method.invoke(Method.java:498)",
          "at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)",
          "at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)",
          "at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:68)",
          "at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)",
          "at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)",
          "at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)",
          "at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:654)",
          "at ru.yandex.metrika.dbclients.clickhouse.HttpTemplateImpl$$EnhancerBySpringCGLIB$$87f55ea2.queryJson(\u003cgenerated\u003e)",
          "at sun.reflect.GeneratedMethodAccessor338.invoke(Unknown Source)",
          "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
          "at java.lang.reflect.Method.invoke(Method.java:498)",
          "at ru.yandex.metrika.util.route.LoadBalance.invoke(LoadBalance.java:192)",
          "at com.sun.proxy.$Proxy31.queryJson(Unknown Source)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl$Requester.requestMainJson(ClickHouseDaoImpl.java:265)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl$Requester.doRequest(ClickHouseDaoImpl.java:156)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl.request(ClickHouseDaoImpl.java:74)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl.request(ClickHouseDaoImpl.java:56)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorService.requestDrillDown(ConstructorService.java:508)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorService.dynamicGetRowIds(ConstructorService.java:1276)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorService.requestDynamic(ConstructorService.java:898)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorController.lambda$requestDynamic$3(ConstructorController.java:155)",
          "at ru.yandex.metrika.spring.request.RequestContext.doInContext(RequestContext.java:102)",
          "at ru.yandex.metrika.spring.request.ApiCallCallable.call(ApiCallCallable.java:40)",
          "at org.springframework.web.context.request.async.WebAsyncManager$4.run(WebAsyncManager.java:316)",
          "at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)",
          "at java.util.concurrent.FutureTask.run(FutureTask.java:266)",
          "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
          "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
          "at java.lang.Thread.run(Thread.java:748)"
        ],
        [
          "ru.yandex.clickhouse.except.ClickHouseException: ClickHouse exception, code: 49, host: mtlog05-01-2.yandex.ru, port: 8123; Code: 49, e.displayText() \u003d DB::Exception: Query log have been already shutdown, e.what() \u003d DB::Exception\n",
          "at ru.yandex.clickhouse.except.ClickHouseExceptionSpecifier.specify(ClickHouseExceptionSpecifier.java:58)",
          "at ru.yandex.clickhouse.except.ClickHouseExceptionSpecifier.specify(ClickHouseExceptionSpecifier.java:28)",
          "at ru.yandex.clickhouse.ClickHouseStatementImpl.getInputStream(ClickHouseStatementImpl.java:513)",
          "at ru.yandex.clickhouse.ClickHouseStatementImpl.executeQueryClickhouseResponse(ClickHouseStatementImpl.java:130)",
          "at ru.yandex.metrika.dbclients.clickhouse.HttpTemplateImpl.queryJson(HttpTemplateImpl.java:153)",
          "at ru.yandex.metrika.dbclients.clickhouse.HttpTemplateImpl$$FastClassBySpringCGLIB$$6470e9fd.invoke(\u003cgenerated\u003e)",
          "at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)",
          "at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:718)",
          "at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)",
          "at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)",
          "at ru.yandex.metrika.spring.profile.ProfilerAspect.profileWithArgs(ProfilerAspect.java:267)",
          "at ru.yandex.metrika.spring.profile.ProfilerAspect.profileClickHouse(ProfilerAspect.java:221)",
          "at sun.reflect.GeneratedMethodAccessor244.invoke(Unknown Source)",
          "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
          "at java.lang.reflect.Method.invoke(Method.java:498)",
          "at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)",
          "at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)",
          "at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:68)",
          "at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)",
          "at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)",
          "at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)",
          "at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:654)",
          "at ru.yandex.metrika.dbclients.clickhouse.HttpTemplateImpl$$EnhancerBySpringCGLIB$$87f55ea2.queryJson(\u003cgenerated\u003e)",
          "at sun.reflect.GeneratedMethodAccessor338.invoke(Unknown Source)",
          "at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
          "at java.lang.reflect.Method.invoke(Method.java:498)",
          "at ru.yandex.metrika.util.route.LoadBalance.invoke(LoadBalance.java:192)",
          "at com.sun.proxy.$Proxy31.queryJson(Unknown Source)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl$Requester.requestMainJson(ClickHouseDaoImpl.java:265)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl$Requester.doRequest(ClickHouseDaoImpl.java:156)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl.request(ClickHouseDaoImpl.java:74)",
          "at ru.yandex.metrika.segments.core.dao.ClickHouseDaoImpl.request(ClickHouseDaoImpl.java:56)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorService.requestDrillDown(ConstructorService.java:508)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorService.dynamicGetRowIds(ConstructorService.java:1276)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorService.requestDynamic(ConstructorService.java:898)",
          "at ru.yandex.metrika.api.constructor.contr.ConstructorController.lambda$requestDynamic$3(ConstructorController.java:155)",
          "at ru.yandex.metrika.spring.request.RequestContext.doInContext(RequestContext.java:102)",
          "at ru.yandex.metrika.spring.request.ApiCallCallable.call(ApiCallCallable.java:40)",
          "at org.springframework.web.context.request.async.WebAsyncManager$4.run(WebAsyncManager.java:316)",
          "at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)",
          "at java.util.concurrent.FutureTask.run(FutureTask.java:266)",
          "at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)",
          "at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)",
          "at java.lang.Thread.run(Thread.java:748)"
        ]
      ],
      "layer": "5",
      "frontend-host": "faced-master.mtrs.yandex.ru:8082"
    },
    "base_time": 1513611914921,
    "request_id": "dba07496-5f41-4e5d-9848-5f49786fe04a",
    "request_uid": 348125177,
    "total_time": 118,
    "java_time": 71
  }
}